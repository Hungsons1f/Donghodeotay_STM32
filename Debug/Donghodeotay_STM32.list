
Donghodeotay_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d84  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a5c  08004e90  08004e90  00005e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058ec  080058ec  0000701c  2**0
                  CONTENTS
  4 .ARM          00000000  080058ec  080058ec  0000701c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080058ec  080058ec  0000701c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058ec  080058ec  000068ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080058f0  080058f0  000068f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  080058f4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000570  2000001c  08005910  0000701c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000058c  08005910  0000758c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000701c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef8a  00000000  00000000  00007045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d79  00000000  00000000  00015fcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  00018d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b99  00000000  00000000  00019c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199f4  00000000  00000000  0001a7f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016be6  00000000  00000000  000341ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000879eb  00000000  00000000  0004add3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d27be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b50  00000000  00000000  000d2804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000d6354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004e78 	.word	0x08004e78

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08004e78 	.word	0x08004e78

0800014c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	4a05      	ldr	r2, [pc, #20]	@ (8000170 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800015a:	4293      	cmp	r3, r2
 800015c:	d102      	bne.n	8000164 <HAL_TIM_PeriodElapsedCallback+0x18>
		updatescreen = 1;
 800015e:	4b05      	ldr	r3, [pc, #20]	@ (8000174 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000160:	2201      	movs	r2, #1
 8000162:	701a      	strb	r2, [r3, #0]
	}
}
 8000164:	bf00      	nop
 8000166:	370c      	adds	r7, #12
 8000168:	46bd      	mov	sp, r7
 800016a:	bc80      	pop	{r7}
 800016c:	4770      	bx	lr
 800016e:	bf00      	nop
 8000170:	40012c00 	.word	0x40012c00
 8000174:	2000011c 	.word	0x2000011c

08000178 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800017e:	f000 fb29 	bl	80007d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000182:	f000 f843 	bl	800020c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000186:	f000 f973 	bl	8000470 <MX_GPIO_Init>
  MX_I2C1_Init();
 800018a:	f000 f87b 	bl	8000284 <MX_I2C1_Init>
  MX_TIM3_Init();
 800018e:	f000 f8f7 	bl	8000380 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000192:	f000 f8a5 	bl	80002e0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
//  i2cController = &hi2c1;
  Rtc_Init(&hi2c1);
 8000196:	4816      	ldr	r0, [pc, #88]	@ (80001f0 <main+0x78>)
 8000198:	f004 fe32 	bl	8004e00 <Rtc_Init>
  Oled_Init(&hi2c1);
 800019c:	4814      	ldr	r0, [pc, #80]	@ (80001f0 <main+0x78>)
 800019e:	f004 fca5 	bl	8004aec <Oled_Init>
  Led_Init(GPIOC, GPIO_PIN_13, GPIOB, GPIO_PIN_2);
 80001a2:	2304      	movs	r3, #4
 80001a4:	4a13      	ldr	r2, [pc, #76]	@ (80001f4 <main+0x7c>)
 80001a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001aa:	4813      	ldr	r0, [pc, #76]	@ (80001f8 <main+0x80>)
 80001ac:	f004 fc7a 	bl	8004aa4 <Led_Init>
  Beep_Init(&htim3, TIM_CHANNEL_1);
 80001b0:	2100      	movs	r1, #0
 80001b2:	4812      	ldr	r0, [pc, #72]	@ (80001fc <main+0x84>)
 80001b4:	f004 fb68 	bl	8004888 <Beep_Init>
  Button_Init(GPIOA, GPIO_PIN_5, GPIOA, GPIO_PIN_6, GPIOA, GPIO_PIN_7);
 80001b8:	2380      	movs	r3, #128	@ 0x80
 80001ba:	9301      	str	r3, [sp, #4]
 80001bc:	4b10      	ldr	r3, [pc, #64]	@ (8000200 <main+0x88>)
 80001be:	9300      	str	r3, [sp, #0]
 80001c0:	2340      	movs	r3, #64	@ 0x40
 80001c2:	4a0f      	ldr	r2, [pc, #60]	@ (8000200 <main+0x88>)
 80001c4:	2120      	movs	r1, #32
 80001c6:	480e      	ldr	r0, [pc, #56]	@ (8000200 <main+0x88>)
 80001c8:	f004 fb72 	bl	80048b0 <Button_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 80001cc:	480d      	ldr	r0, [pc, #52]	@ (8000204 <main+0x8c>)
 80001ce:	f001 ff0d 	bl	8001fec <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  MainStateMachine();
 80001d2:	f003 f989 	bl	80034e8 <MainStateMachine>
	  MainStateAction();
 80001d6:	f003 fa23 	bl	8003620 <MainStateAction>

	  if (updatescreen == 1) {
 80001da:	4b0b      	ldr	r3, [pc, #44]	@ (8000208 <main+0x90>)
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	2b01      	cmp	r3, #1
 80001e0:	d1f7      	bne.n	80001d2 <main+0x5a>
		  updatescreen = 0;
 80001e2:	4b09      	ldr	r3, [pc, #36]	@ (8000208 <main+0x90>)
 80001e4:	2200      	movs	r2, #0
 80001e6:	701a      	strb	r2, [r3, #0]
		  UpdateScreen(NO);
 80001e8:	2000      	movs	r0, #0
 80001ea:	f003 fbe7 	bl	80039bc <UpdateScreen>
	  MainStateMachine();
 80001ee:	e7f0      	b.n	80001d2 <main+0x5a>
 80001f0:	20000038 	.word	0x20000038
 80001f4:	40010c00 	.word	0x40010c00
 80001f8:	40011000 	.word	0x40011000
 80001fc:	200000d4 	.word	0x200000d4
 8000200:	40010800 	.word	0x40010800
 8000204:	2000008c 	.word	0x2000008c
 8000208:	2000011c 	.word	0x2000011c

0800020c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b090      	sub	sp, #64	@ 0x40
 8000210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000212:	f107 0318 	add.w	r3, r7, #24
 8000216:	2228      	movs	r2, #40	@ 0x28
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f004 fe00 	bl	8004e20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]
 800022c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800022e:	2302      	movs	r3, #2
 8000230:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000232:	2301      	movs	r3, #1
 8000234:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000236:	2310      	movs	r3, #16
 8000238:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800023a:	2300      	movs	r3, #0
 800023c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023e:	f107 0318 	add.w	r3, r7, #24
 8000242:	4618      	mov	r0, r3
 8000244:	f001 fa86 	bl	8001754 <HAL_RCC_OscConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800024e:	f000 f97d 	bl	800054c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000252:	230f      	movs	r3, #15
 8000254:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000256:	2300      	movs	r3, #0
 8000258:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000266:	1d3b      	adds	r3, r7, #4
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f001 fcf4 	bl	8001c58 <HAL_RCC_ClockConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000276:	f000 f969 	bl	800054c <Error_Handler>
  }
}
 800027a:	bf00      	nop
 800027c:	3740      	adds	r7, #64	@ 0x40
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
	...

08000284 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000288:	4b12      	ldr	r3, [pc, #72]	@ (80002d4 <MX_I2C1_Init+0x50>)
 800028a:	4a13      	ldr	r2, [pc, #76]	@ (80002d8 <MX_I2C1_Init+0x54>)
 800028c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800028e:	4b11      	ldr	r3, [pc, #68]	@ (80002d4 <MX_I2C1_Init+0x50>)
 8000290:	4a12      	ldr	r2, [pc, #72]	@ (80002dc <MX_I2C1_Init+0x58>)
 8000292:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000294:	4b0f      	ldr	r3, [pc, #60]	@ (80002d4 <MX_I2C1_Init+0x50>)
 8000296:	2200      	movs	r2, #0
 8000298:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800029a:	4b0e      	ldr	r3, [pc, #56]	@ (80002d4 <MX_I2C1_Init+0x50>)
 800029c:	2200      	movs	r2, #0
 800029e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002a0:	4b0c      	ldr	r3, [pc, #48]	@ (80002d4 <MX_I2C1_Init+0x50>)
 80002a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80002a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002a8:	4b0a      	ldr	r3, [pc, #40]	@ (80002d4 <MX_I2C1_Init+0x50>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002ae:	4b09      	ldr	r3, [pc, #36]	@ (80002d4 <MX_I2C1_Init+0x50>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002b4:	4b07      	ldr	r3, [pc, #28]	@ (80002d4 <MX_I2C1_Init+0x50>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002ba:	4b06      	ldr	r3, [pc, #24]	@ (80002d4 <MX_I2C1_Init+0x50>)
 80002bc:	2200      	movs	r2, #0
 80002be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002c0:	4804      	ldr	r0, [pc, #16]	@ (80002d4 <MX_I2C1_Init+0x50>)
 80002c2:	f000 fdab 	bl	8000e1c <HAL_I2C_Init>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002cc:	f000 f93e 	bl	800054c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002d0:	bf00      	nop
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	20000038 	.word	0x20000038
 80002d8:	40005400 	.word	0x40005400
 80002dc:	00061a80 	.word	0x00061a80

080002e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b086      	sub	sp, #24
 80002e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002e6:	f107 0308 	add.w	r3, r7, #8
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002f4:	463b      	mov	r3, r7
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000378 <MX_TIM1_Init+0x98>)
 80002fe:	4a1f      	ldr	r2, [pc, #124]	@ (800037c <MX_TIM1_Init+0x9c>)
 8000300:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8000302:	4b1d      	ldr	r3, [pc, #116]	@ (8000378 <MX_TIM1_Init+0x98>)
 8000304:	224f      	movs	r2, #79	@ 0x4f
 8000306:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000308:	4b1b      	ldr	r3, [pc, #108]	@ (8000378 <MX_TIM1_Init+0x98>)
 800030a:	2200      	movs	r2, #0
 800030c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6999;
 800030e:	4b1a      	ldr	r3, [pc, #104]	@ (8000378 <MX_TIM1_Init+0x98>)
 8000310:	f641 3257 	movw	r2, #6999	@ 0x1b57
 8000314:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000316:	4b18      	ldr	r3, [pc, #96]	@ (8000378 <MX_TIM1_Init+0x98>)
 8000318:	2200      	movs	r2, #0
 800031a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800031c:	4b16      	ldr	r3, [pc, #88]	@ (8000378 <MX_TIM1_Init+0x98>)
 800031e:	2200      	movs	r2, #0
 8000320:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000322:	4b15      	ldr	r3, [pc, #84]	@ (8000378 <MX_TIM1_Init+0x98>)
 8000324:	2200      	movs	r2, #0
 8000326:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000328:	4813      	ldr	r0, [pc, #76]	@ (8000378 <MX_TIM1_Init+0x98>)
 800032a:	f001 fe0f 	bl	8001f4c <HAL_TIM_Base_Init>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000334:	f000 f90a 	bl	800054c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000338:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800033c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800033e:	f107 0308 	add.w	r3, r7, #8
 8000342:	4619      	mov	r1, r3
 8000344:	480c      	ldr	r0, [pc, #48]	@ (8000378 <MX_TIM1_Init+0x98>)
 8000346:	f002 f8ad 	bl	80024a4 <HAL_TIM_ConfigClockSource>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000350:	f000 f8fc 	bl	800054c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000354:	2300      	movs	r3, #0
 8000356:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000358:	2300      	movs	r3, #0
 800035a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800035c:	463b      	mov	r3, r7
 800035e:	4619      	mov	r1, r3
 8000360:	4805      	ldr	r0, [pc, #20]	@ (8000378 <MX_TIM1_Init+0x98>)
 8000362:	f002 fc17 	bl	8002b94 <HAL_TIMEx_MasterConfigSynchronization>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800036c:	f000 f8ee 	bl	800054c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000370:	bf00      	nop
 8000372:	3718      	adds	r7, #24
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	2000008c 	.word	0x2000008c
 800037c:	40012c00 	.word	0x40012c00

08000380 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b08e      	sub	sp, #56	@ 0x38
 8000384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000386:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000394:	f107 0320 	add.w	r3, r7, #32
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
 800039c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
 80003a4:	605a      	str	r2, [r3, #4]
 80003a6:	609a      	str	r2, [r3, #8]
 80003a8:	60da      	str	r2, [r3, #12]
 80003aa:	611a      	str	r2, [r3, #16]
 80003ac:	615a      	str	r2, [r3, #20]
 80003ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003b0:	4b2d      	ldr	r3, [pc, #180]	@ (8000468 <MX_TIM3_Init+0xe8>)
 80003b2:	4a2e      	ldr	r2, [pc, #184]	@ (800046c <MX_TIM3_Init+0xec>)
 80003b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 80003b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000468 <MX_TIM3_Init+0xe8>)
 80003b8:	2207      	movs	r2, #7
 80003ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003bc:	4b2a      	ldr	r3, [pc, #168]	@ (8000468 <MX_TIM3_Init+0xe8>)
 80003be:	2200      	movs	r2, #0
 80003c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80003c2:	4b29      	ldr	r3, [pc, #164]	@ (8000468 <MX_TIM3_Init+0xe8>)
 80003c4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80003c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ca:	4b27      	ldr	r3, [pc, #156]	@ (8000468 <MX_TIM3_Init+0xe8>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003d0:	4b25      	ldr	r3, [pc, #148]	@ (8000468 <MX_TIM3_Init+0xe8>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80003d6:	4824      	ldr	r0, [pc, #144]	@ (8000468 <MX_TIM3_Init+0xe8>)
 80003d8:	f001 fdb8 	bl	8001f4c <HAL_TIM_Base_Init>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80003e2:	f000 f8b3 	bl	800054c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80003ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80003ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80003f0:	4619      	mov	r1, r3
 80003f2:	481d      	ldr	r0, [pc, #116]	@ (8000468 <MX_TIM3_Init+0xe8>)
 80003f4:	f002 f856 	bl	80024a4 <HAL_TIM_ConfigClockSource>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80003fe:	f000 f8a5 	bl	800054c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000402:	4819      	ldr	r0, [pc, #100]	@ (8000468 <MX_TIM3_Init+0xe8>)
 8000404:	f001 fe44 	bl	8002090 <HAL_TIM_PWM_Init>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800040e:	f000 f89d 	bl	800054c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000412:	2300      	movs	r3, #0
 8000414:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000416:	2300      	movs	r3, #0
 8000418:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800041a:	f107 0320 	add.w	r3, r7, #32
 800041e:	4619      	mov	r1, r3
 8000420:	4811      	ldr	r0, [pc, #68]	@ (8000468 <MX_TIM3_Init+0xe8>)
 8000422:	f002 fbb7 	bl	8002b94 <HAL_TIMEx_MasterConfigSynchronization>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800042c:	f000 f88e 	bl	800054c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000430:	2360      	movs	r3, #96	@ 0x60
 8000432:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 499;
 8000434:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8000438:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800043a:	2300      	movs	r3, #0
 800043c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800043e:	2304      	movs	r3, #4
 8000440:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000442:	1d3b      	adds	r3, r7, #4
 8000444:	2200      	movs	r2, #0
 8000446:	4619      	mov	r1, r3
 8000448:	4807      	ldr	r0, [pc, #28]	@ (8000468 <MX_TIM3_Init+0xe8>)
 800044a:	f001 ff69 	bl	8002320 <HAL_TIM_PWM_ConfigChannel>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000454:	f000 f87a 	bl	800054c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000458:	4803      	ldr	r0, [pc, #12]	@ (8000468 <MX_TIM3_Init+0xe8>)
 800045a:	f000 f927 	bl	80006ac <HAL_TIM_MspPostInit>

}
 800045e:	bf00      	nop
 8000460:	3738      	adds	r7, #56	@ 0x38
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	200000d4 	.word	0x200000d4
 800046c:	40000400 	.word	0x40000400

08000470 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b088      	sub	sp, #32
 8000474:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000476:	f107 0310 	add.w	r3, r7, #16
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	605a      	str	r2, [r3, #4]
 8000480:	609a      	str	r2, [r3, #8]
 8000482:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000484:	4b2d      	ldr	r3, [pc, #180]	@ (800053c <MX_GPIO_Init+0xcc>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	4a2c      	ldr	r2, [pc, #176]	@ (800053c <MX_GPIO_Init+0xcc>)
 800048a:	f043 0310 	orr.w	r3, r3, #16
 800048e:	6193      	str	r3, [r2, #24]
 8000490:	4b2a      	ldr	r3, [pc, #168]	@ (800053c <MX_GPIO_Init+0xcc>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	f003 0310 	and.w	r3, r3, #16
 8000498:	60fb      	str	r3, [r7, #12]
 800049a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800049c:	4b27      	ldr	r3, [pc, #156]	@ (800053c <MX_GPIO_Init+0xcc>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	4a26      	ldr	r2, [pc, #152]	@ (800053c <MX_GPIO_Init+0xcc>)
 80004a2:	f043 0304 	orr.w	r3, r3, #4
 80004a6:	6193      	str	r3, [r2, #24]
 80004a8:	4b24      	ldr	r3, [pc, #144]	@ (800053c <MX_GPIO_Init+0xcc>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	f003 0304 	and.w	r3, r3, #4
 80004b0:	60bb      	str	r3, [r7, #8]
 80004b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b4:	4b21      	ldr	r3, [pc, #132]	@ (800053c <MX_GPIO_Init+0xcc>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	4a20      	ldr	r2, [pc, #128]	@ (800053c <MX_GPIO_Init+0xcc>)
 80004ba:	f043 0308 	orr.w	r3, r3, #8
 80004be:	6193      	str	r3, [r2, #24]
 80004c0:	4b1e      	ldr	r3, [pc, #120]	@ (800053c <MX_GPIO_Init+0xcc>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	f003 0308 	and.w	r3, r3, #8
 80004c8:	607b      	str	r3, [r7, #4]
 80004ca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80004cc:	2201      	movs	r2, #1
 80004ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004d2:	481b      	ldr	r0, [pc, #108]	@ (8000540 <MX_GPIO_Init+0xd0>)
 80004d4:	f000 fc89 	bl	8000dea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_SET);
 80004d8:	2201      	movs	r2, #1
 80004da:	2130      	movs	r1, #48	@ 0x30
 80004dc:	4819      	ldr	r0, [pc, #100]	@ (8000544 <MX_GPIO_Init+0xd4>)
 80004de:	f000 fc84 	bl	8000dea <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e8:	2301      	movs	r3, #1
 80004ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004ec:	2302      	movs	r3, #2
 80004ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f0:	2302      	movs	r3, #2
 80004f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004f4:	f107 0310 	add.w	r3, r7, #16
 80004f8:	4619      	mov	r1, r3
 80004fa:	4811      	ldr	r0, [pc, #68]	@ (8000540 <MX_GPIO_Init+0xd0>)
 80004fc:	f000 fada 	bl	8000ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000500:	23a0      	movs	r3, #160	@ 0xa0
 8000502:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000504:	2300      	movs	r3, #0
 8000506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000508:	2302      	movs	r3, #2
 800050a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050c:	f107 0310 	add.w	r3, r7, #16
 8000510:	4619      	mov	r1, r3
 8000512:	480d      	ldr	r0, [pc, #52]	@ (8000548 <MX_GPIO_Init+0xd8>)
 8000514:	f000 face 	bl	8000ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000518:	2330      	movs	r3, #48	@ 0x30
 800051a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800051c:	2301      	movs	r3, #1
 800051e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000520:	2301      	movs	r3, #1
 8000522:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000524:	2302      	movs	r3, #2
 8000526:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000528:	f107 0310 	add.w	r3, r7, #16
 800052c:	4619      	mov	r1, r3
 800052e:	4805      	ldr	r0, [pc, #20]	@ (8000544 <MX_GPIO_Init+0xd4>)
 8000530:	f000 fac0 	bl	8000ab4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000534:	bf00      	nop
 8000536:	3720      	adds	r7, #32
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	40021000 	.word	0x40021000
 8000540:	40011000 	.word	0x40011000
 8000544:	40010c00 	.word	0x40010c00
 8000548:	40010800 	.word	0x40010800

0800054c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000550:	b672      	cpsid	i
}
 8000552:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000554:	bf00      	nop
 8000556:	e7fd      	b.n	8000554 <Error_Handler+0x8>

08000558 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800055e:	4b15      	ldr	r3, [pc, #84]	@ (80005b4 <HAL_MspInit+0x5c>)
 8000560:	699b      	ldr	r3, [r3, #24]
 8000562:	4a14      	ldr	r2, [pc, #80]	@ (80005b4 <HAL_MspInit+0x5c>)
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	6193      	str	r3, [r2, #24]
 800056a:	4b12      	ldr	r3, [pc, #72]	@ (80005b4 <HAL_MspInit+0x5c>)
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000576:	4b0f      	ldr	r3, [pc, #60]	@ (80005b4 <HAL_MspInit+0x5c>)
 8000578:	69db      	ldr	r3, [r3, #28]
 800057a:	4a0e      	ldr	r2, [pc, #56]	@ (80005b4 <HAL_MspInit+0x5c>)
 800057c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000580:	61d3      	str	r3, [r2, #28]
 8000582:	4b0c      	ldr	r3, [pc, #48]	@ (80005b4 <HAL_MspInit+0x5c>)
 8000584:	69db      	ldr	r3, [r3, #28]
 8000586:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800058e:	4b0a      	ldr	r3, [pc, #40]	@ (80005b8 <HAL_MspInit+0x60>)
 8000590:	685b      	ldr	r3, [r3, #4]
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	4a04      	ldr	r2, [pc, #16]	@ (80005b8 <HAL_MspInit+0x60>)
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005aa:	bf00      	nop
 80005ac:	3714      	adds	r7, #20
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr
 80005b4:	40021000 	.word	0x40021000
 80005b8:	40010000 	.word	0x40010000

080005bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c4:	f107 0310 	add.w	r3, r7, #16
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a15      	ldr	r2, [pc, #84]	@ (800062c <HAL_I2C_MspInit+0x70>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d123      	bne.n	8000624 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005dc:	4b14      	ldr	r3, [pc, #80]	@ (8000630 <HAL_I2C_MspInit+0x74>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	4a13      	ldr	r2, [pc, #76]	@ (8000630 <HAL_I2C_MspInit+0x74>)
 80005e2:	f043 0308 	orr.w	r3, r3, #8
 80005e6:	6193      	str	r3, [r2, #24]
 80005e8:	4b11      	ldr	r3, [pc, #68]	@ (8000630 <HAL_I2C_MspInit+0x74>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	f003 0308 	and.w	r3, r3, #8
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005f4:	23c0      	movs	r3, #192	@ 0xc0
 80005f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005f8:	2312      	movs	r3, #18
 80005fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005fc:	2303      	movs	r3, #3
 80005fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000600:	f107 0310 	add.w	r3, r7, #16
 8000604:	4619      	mov	r1, r3
 8000606:	480b      	ldr	r0, [pc, #44]	@ (8000634 <HAL_I2C_MspInit+0x78>)
 8000608:	f000 fa54 	bl	8000ab4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800060c:	4b08      	ldr	r3, [pc, #32]	@ (8000630 <HAL_I2C_MspInit+0x74>)
 800060e:	69db      	ldr	r3, [r3, #28]
 8000610:	4a07      	ldr	r2, [pc, #28]	@ (8000630 <HAL_I2C_MspInit+0x74>)
 8000612:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000616:	61d3      	str	r3, [r2, #28]
 8000618:	4b05      	ldr	r3, [pc, #20]	@ (8000630 <HAL_I2C_MspInit+0x74>)
 800061a:	69db      	ldr	r3, [r3, #28]
 800061c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000624:	bf00      	nop
 8000626:	3720      	adds	r7, #32
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40005400 	.word	0x40005400
 8000630:	40021000 	.word	0x40021000
 8000634:	40010c00 	.word	0x40010c00

08000638 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a16      	ldr	r2, [pc, #88]	@ (80006a0 <HAL_TIM_Base_MspInit+0x68>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d114      	bne.n	8000674 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800064a:	4b16      	ldr	r3, [pc, #88]	@ (80006a4 <HAL_TIM_Base_MspInit+0x6c>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	4a15      	ldr	r2, [pc, #84]	@ (80006a4 <HAL_TIM_Base_MspInit+0x6c>)
 8000650:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000654:	6193      	str	r3, [r2, #24]
 8000656:	4b13      	ldr	r3, [pc, #76]	@ (80006a4 <HAL_TIM_Base_MspInit+0x6c>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000662:	2200      	movs	r2, #0
 8000664:	2100      	movs	r1, #0
 8000666:	2019      	movs	r0, #25
 8000668:	f000 f9ed 	bl	8000a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800066c:	2019      	movs	r0, #25
 800066e:	f000 fa06 	bl	8000a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000672:	e010      	b.n	8000696 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a0b      	ldr	r2, [pc, #44]	@ (80006a8 <HAL_TIM_Base_MspInit+0x70>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d10b      	bne.n	8000696 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800067e:	4b09      	ldr	r3, [pc, #36]	@ (80006a4 <HAL_TIM_Base_MspInit+0x6c>)
 8000680:	69db      	ldr	r3, [r3, #28]
 8000682:	4a08      	ldr	r2, [pc, #32]	@ (80006a4 <HAL_TIM_Base_MspInit+0x6c>)
 8000684:	f043 0302 	orr.w	r3, r3, #2
 8000688:	61d3      	str	r3, [r2, #28]
 800068a:	4b06      	ldr	r3, [pc, #24]	@ (80006a4 <HAL_TIM_Base_MspInit+0x6c>)
 800068c:	69db      	ldr	r3, [r3, #28]
 800068e:	f003 0302 	and.w	r3, r3, #2
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	68bb      	ldr	r3, [r7, #8]
}
 8000696:	bf00      	nop
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40012c00 	.word	0x40012c00
 80006a4:	40021000 	.word	0x40021000
 80006a8:	40000400 	.word	0x40000400

080006ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	f107 0310 	add.w	r3, r7, #16
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000704 <HAL_TIM_MspPostInit+0x58>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d117      	bne.n	80006fc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000708 <HAL_TIM_MspPostInit+0x5c>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000708 <HAL_TIM_MspPostInit+0x5c>)
 80006d2:	f043 0304 	orr.w	r3, r3, #4
 80006d6:	6193      	str	r3, [r2, #24]
 80006d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000708 <HAL_TIM_MspPostInit+0x5c>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	f003 0304 	and.w	r3, r3, #4
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006e4:	2340      	movs	r3, #64	@ 0x40
 80006e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e8:	2302      	movs	r3, #2
 80006ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ec:	2302      	movs	r3, #2
 80006ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f0:	f107 0310 	add.w	r3, r7, #16
 80006f4:	4619      	mov	r1, r3
 80006f6:	4805      	ldr	r0, [pc, #20]	@ (800070c <HAL_TIM_MspPostInit+0x60>)
 80006f8:	f000 f9dc 	bl	8000ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80006fc:	bf00      	nop
 80006fe:	3720      	adds	r7, #32
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40000400 	.word	0x40000400
 8000708:	40021000 	.word	0x40021000
 800070c:	40010800 	.word	0x40010800

08000710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000714:	bf00      	nop
 8000716:	e7fd      	b.n	8000714 <NMI_Handler+0x4>

08000718 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800071c:	bf00      	nop
 800071e:	e7fd      	b.n	800071c <HardFault_Handler+0x4>

08000720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000724:	bf00      	nop
 8000726:	e7fd      	b.n	8000724 <MemManage_Handler+0x4>

08000728 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800072c:	bf00      	nop
 800072e:	e7fd      	b.n	800072c <BusFault_Handler+0x4>

08000730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000734:	bf00      	nop
 8000736:	e7fd      	b.n	8000734 <UsageFault_Handler+0x4>

08000738 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr

08000744 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr

08000750 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr

0800075c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000760:	f000 f87e 	bl	8000860 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}

08000768 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800076c:	4802      	ldr	r0, [pc, #8]	@ (8000778 <TIM1_UP_IRQHandler+0x10>)
 800076e:	f001 fce7 	bl	8002140 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	2000008c 	.word	0x2000008c

0800077c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr

08000788 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000788:	f7ff fff8 	bl	800077c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800078c:	480b      	ldr	r0, [pc, #44]	@ (80007bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800078e:	490c      	ldr	r1, [pc, #48]	@ (80007c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000790:	4a0c      	ldr	r2, [pc, #48]	@ (80007c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000794:	e002      	b.n	800079c <LoopCopyDataInit>

08000796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800079a:	3304      	adds	r3, #4

0800079c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800079c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800079e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007a0:	d3f9      	bcc.n	8000796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007a2:	4a09      	ldr	r2, [pc, #36]	@ (80007c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007a4:	4c09      	ldr	r4, [pc, #36]	@ (80007cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a8:	e001      	b.n	80007ae <LoopFillZerobss>

080007aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007ac:	3204      	adds	r2, #4

080007ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007b0:	d3fb      	bcc.n	80007aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007b2:	f004 fb3d 	bl	8004e30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007b6:	f7ff fcdf 	bl	8000178 <main>
  bx lr
 80007ba:	4770      	bx	lr
  ldr r0, =_sdata
 80007bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007c0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80007c4:	080058f4 	.word	0x080058f4
  ldr r2, =_sbss
 80007c8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80007cc:	2000058c 	.word	0x2000058c

080007d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007d0:	e7fe      	b.n	80007d0 <ADC1_2_IRQHandler>
	...

080007d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007d8:	4b08      	ldr	r3, [pc, #32]	@ (80007fc <HAL_Init+0x28>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a07      	ldr	r2, [pc, #28]	@ (80007fc <HAL_Init+0x28>)
 80007de:	f043 0310 	orr.w	r3, r3, #16
 80007e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007e4:	2003      	movs	r0, #3
 80007e6:	f000 f923 	bl	8000a30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ea:	200f      	movs	r0, #15
 80007ec:	f000 f808 	bl	8000800 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007f0:	f7ff feb2 	bl	8000558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007f4:	2300      	movs	r3, #0
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40022000 	.word	0x40022000

08000800 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000808:	4b12      	ldr	r3, [pc, #72]	@ (8000854 <HAL_InitTick+0x54>)
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	4b12      	ldr	r3, [pc, #72]	@ (8000858 <HAL_InitTick+0x58>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	4619      	mov	r1, r3
 8000812:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000816:	fbb3 f3f1 	udiv	r3, r3, r1
 800081a:	fbb2 f3f3 	udiv	r3, r2, r3
 800081e:	4618      	mov	r0, r3
 8000820:	f000 f93b 	bl	8000a9a <HAL_SYSTICK_Config>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800082a:	2301      	movs	r3, #1
 800082c:	e00e      	b.n	800084c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2b0f      	cmp	r3, #15
 8000832:	d80a      	bhi.n	800084a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000834:	2200      	movs	r2, #0
 8000836:	6879      	ldr	r1, [r7, #4]
 8000838:	f04f 30ff 	mov.w	r0, #4294967295
 800083c:	f000 f903 	bl	8000a46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000840:	4a06      	ldr	r2, [pc, #24]	@ (800085c <HAL_InitTick+0x5c>)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000846:	2300      	movs	r3, #0
 8000848:	e000      	b.n	800084c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800084a:	2301      	movs	r3, #1
}
 800084c:	4618      	mov	r0, r3
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000000 	.word	0x20000000
 8000858:	20000008 	.word	0x20000008
 800085c:	20000004 	.word	0x20000004

08000860 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000864:	4b05      	ldr	r3, [pc, #20]	@ (800087c <HAL_IncTick+0x1c>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	461a      	mov	r2, r3
 800086a:	4b05      	ldr	r3, [pc, #20]	@ (8000880 <HAL_IncTick+0x20>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4413      	add	r3, r2
 8000870:	4a03      	ldr	r2, [pc, #12]	@ (8000880 <HAL_IncTick+0x20>)
 8000872:	6013      	str	r3, [r2, #0]
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr
 800087c:	20000008 	.word	0x20000008
 8000880:	20000120 	.word	0x20000120

08000884 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  return uwTick;
 8000888:	4b02      	ldr	r3, [pc, #8]	@ (8000894 <HAL_GetTick+0x10>)
 800088a:	681b      	ldr	r3, [r3, #0]
}
 800088c:	4618      	mov	r0, r3
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr
 8000894:	20000120 	.word	0x20000120

08000898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	f003 0307 	and.w	r3, r3, #7
 80008a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a8:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <__NVIC_SetPriorityGrouping+0x44>)
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ae:	68ba      	ldr	r2, [r7, #8]
 80008b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008b4:	4013      	ands	r3, r2
 80008b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ca:	4a04      	ldr	r2, [pc, #16]	@ (80008dc <__NVIC_SetPriorityGrouping+0x44>)
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	60d3      	str	r3, [r2, #12]
}
 80008d0:	bf00      	nop
 80008d2:	3714      	adds	r7, #20
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008e4:	4b04      	ldr	r3, [pc, #16]	@ (80008f8 <__NVIC_GetPriorityGrouping+0x18>)
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	0a1b      	lsrs	r3, r3, #8
 80008ea:	f003 0307 	and.w	r3, r3, #7
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090a:	2b00      	cmp	r3, #0
 800090c:	db0b      	blt.n	8000926 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	f003 021f 	and.w	r2, r3, #31
 8000914:	4906      	ldr	r1, [pc, #24]	@ (8000930 <__NVIC_EnableIRQ+0x34>)
 8000916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091a:	095b      	lsrs	r3, r3, #5
 800091c:	2001      	movs	r0, #1
 800091e:	fa00 f202 	lsl.w	r2, r0, r2
 8000922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	e000e100 	.word	0xe000e100

08000934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	6039      	str	r1, [r7, #0]
 800093e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000944:	2b00      	cmp	r3, #0
 8000946:	db0a      	blt.n	800095e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	b2da      	uxtb	r2, r3
 800094c:	490c      	ldr	r1, [pc, #48]	@ (8000980 <__NVIC_SetPriority+0x4c>)
 800094e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000952:	0112      	lsls	r2, r2, #4
 8000954:	b2d2      	uxtb	r2, r2
 8000956:	440b      	add	r3, r1
 8000958:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800095c:	e00a      	b.n	8000974 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	b2da      	uxtb	r2, r3
 8000962:	4908      	ldr	r1, [pc, #32]	@ (8000984 <__NVIC_SetPriority+0x50>)
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	f003 030f 	and.w	r3, r3, #15
 800096a:	3b04      	subs	r3, #4
 800096c:	0112      	lsls	r2, r2, #4
 800096e:	b2d2      	uxtb	r2, r2
 8000970:	440b      	add	r3, r1
 8000972:	761a      	strb	r2, [r3, #24]
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000e100 	.word	0xe000e100
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000988:	b480      	push	{r7}
 800098a:	b089      	sub	sp, #36	@ 0x24
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f003 0307 	and.w	r3, r3, #7
 800099a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800099c:	69fb      	ldr	r3, [r7, #28]
 800099e:	f1c3 0307 	rsb	r3, r3, #7
 80009a2:	2b04      	cmp	r3, #4
 80009a4:	bf28      	it	cs
 80009a6:	2304      	movcs	r3, #4
 80009a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	3304      	adds	r3, #4
 80009ae:	2b06      	cmp	r3, #6
 80009b0:	d902      	bls.n	80009b8 <NVIC_EncodePriority+0x30>
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	3b03      	subs	r3, #3
 80009b6:	e000      	b.n	80009ba <NVIC_EncodePriority+0x32>
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009bc:	f04f 32ff 	mov.w	r2, #4294967295
 80009c0:	69bb      	ldr	r3, [r7, #24]
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	43da      	mvns	r2, r3
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	401a      	ands	r2, r3
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009d0:	f04f 31ff 	mov.w	r1, #4294967295
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	fa01 f303 	lsl.w	r3, r1, r3
 80009da:	43d9      	mvns	r1, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e0:	4313      	orrs	r3, r2
         );
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3724      	adds	r7, #36	@ 0x24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr

080009ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3b01      	subs	r3, #1
 80009f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009fc:	d301      	bcc.n	8000a02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009fe:	2301      	movs	r3, #1
 8000a00:	e00f      	b.n	8000a22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a02:	4a0a      	ldr	r2, [pc, #40]	@ (8000a2c <SysTick_Config+0x40>)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3b01      	subs	r3, #1
 8000a08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a0a:	210f      	movs	r1, #15
 8000a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a10:	f7ff ff90 	bl	8000934 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a14:	4b05      	ldr	r3, [pc, #20]	@ (8000a2c <SysTick_Config+0x40>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a1a:	4b04      	ldr	r3, [pc, #16]	@ (8000a2c <SysTick_Config+0x40>)
 8000a1c:	2207      	movs	r2, #7
 8000a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	e000e010 	.word	0xe000e010

08000a30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f7ff ff2d 	bl	8000898 <__NVIC_SetPriorityGrouping>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b086      	sub	sp, #24
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	60b9      	str	r1, [r7, #8]
 8000a50:	607a      	str	r2, [r7, #4]
 8000a52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a58:	f7ff ff42 	bl	80008e0 <__NVIC_GetPriorityGrouping>
 8000a5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a5e:	687a      	ldr	r2, [r7, #4]
 8000a60:	68b9      	ldr	r1, [r7, #8]
 8000a62:	6978      	ldr	r0, [r7, #20]
 8000a64:	f7ff ff90 	bl	8000988 <NVIC_EncodePriority>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a6e:	4611      	mov	r1, r2
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff ff5f 	bl	8000934 <__NVIC_SetPriority>
}
 8000a76:	bf00      	nop
 8000a78:	3718      	adds	r7, #24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b082      	sub	sp, #8
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	4603      	mov	r3, r0
 8000a86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff ff35 	bl	80008fc <__NVIC_EnableIRQ>
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b082      	sub	sp, #8
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff ffa2 	bl	80009ec <SysTick_Config>
 8000aa8:	4603      	mov	r3, r0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b08b      	sub	sp, #44	@ 0x2c
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ac6:	e169      	b.n	8000d9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ac8:	2201      	movs	r2, #1
 8000aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000acc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	69fa      	ldr	r2, [r7, #28]
 8000ad8:	4013      	ands	r3, r2
 8000ada:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000adc:	69ba      	ldr	r2, [r7, #24]
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	f040 8158 	bne.w	8000d96 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	4a9a      	ldr	r2, [pc, #616]	@ (8000d54 <HAL_GPIO_Init+0x2a0>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d05e      	beq.n	8000bae <HAL_GPIO_Init+0xfa>
 8000af0:	4a98      	ldr	r2, [pc, #608]	@ (8000d54 <HAL_GPIO_Init+0x2a0>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d875      	bhi.n	8000be2 <HAL_GPIO_Init+0x12e>
 8000af6:	4a98      	ldr	r2, [pc, #608]	@ (8000d58 <HAL_GPIO_Init+0x2a4>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d058      	beq.n	8000bae <HAL_GPIO_Init+0xfa>
 8000afc:	4a96      	ldr	r2, [pc, #600]	@ (8000d58 <HAL_GPIO_Init+0x2a4>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d86f      	bhi.n	8000be2 <HAL_GPIO_Init+0x12e>
 8000b02:	4a96      	ldr	r2, [pc, #600]	@ (8000d5c <HAL_GPIO_Init+0x2a8>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d052      	beq.n	8000bae <HAL_GPIO_Init+0xfa>
 8000b08:	4a94      	ldr	r2, [pc, #592]	@ (8000d5c <HAL_GPIO_Init+0x2a8>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d869      	bhi.n	8000be2 <HAL_GPIO_Init+0x12e>
 8000b0e:	4a94      	ldr	r2, [pc, #592]	@ (8000d60 <HAL_GPIO_Init+0x2ac>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d04c      	beq.n	8000bae <HAL_GPIO_Init+0xfa>
 8000b14:	4a92      	ldr	r2, [pc, #584]	@ (8000d60 <HAL_GPIO_Init+0x2ac>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d863      	bhi.n	8000be2 <HAL_GPIO_Init+0x12e>
 8000b1a:	4a92      	ldr	r2, [pc, #584]	@ (8000d64 <HAL_GPIO_Init+0x2b0>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d046      	beq.n	8000bae <HAL_GPIO_Init+0xfa>
 8000b20:	4a90      	ldr	r2, [pc, #576]	@ (8000d64 <HAL_GPIO_Init+0x2b0>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d85d      	bhi.n	8000be2 <HAL_GPIO_Init+0x12e>
 8000b26:	2b12      	cmp	r3, #18
 8000b28:	d82a      	bhi.n	8000b80 <HAL_GPIO_Init+0xcc>
 8000b2a:	2b12      	cmp	r3, #18
 8000b2c:	d859      	bhi.n	8000be2 <HAL_GPIO_Init+0x12e>
 8000b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8000b34 <HAL_GPIO_Init+0x80>)
 8000b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b34:	08000baf 	.word	0x08000baf
 8000b38:	08000b89 	.word	0x08000b89
 8000b3c:	08000b9b 	.word	0x08000b9b
 8000b40:	08000bdd 	.word	0x08000bdd
 8000b44:	08000be3 	.word	0x08000be3
 8000b48:	08000be3 	.word	0x08000be3
 8000b4c:	08000be3 	.word	0x08000be3
 8000b50:	08000be3 	.word	0x08000be3
 8000b54:	08000be3 	.word	0x08000be3
 8000b58:	08000be3 	.word	0x08000be3
 8000b5c:	08000be3 	.word	0x08000be3
 8000b60:	08000be3 	.word	0x08000be3
 8000b64:	08000be3 	.word	0x08000be3
 8000b68:	08000be3 	.word	0x08000be3
 8000b6c:	08000be3 	.word	0x08000be3
 8000b70:	08000be3 	.word	0x08000be3
 8000b74:	08000be3 	.word	0x08000be3
 8000b78:	08000b91 	.word	0x08000b91
 8000b7c:	08000ba5 	.word	0x08000ba5
 8000b80:	4a79      	ldr	r2, [pc, #484]	@ (8000d68 <HAL_GPIO_Init+0x2b4>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d013      	beq.n	8000bae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b86:	e02c      	b.n	8000be2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	623b      	str	r3, [r7, #32]
          break;
 8000b8e:	e029      	b.n	8000be4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	3304      	adds	r3, #4
 8000b96:	623b      	str	r3, [r7, #32]
          break;
 8000b98:	e024      	b.n	8000be4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	3308      	adds	r3, #8
 8000ba0:	623b      	str	r3, [r7, #32]
          break;
 8000ba2:	e01f      	b.n	8000be4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	330c      	adds	r3, #12
 8000baa:	623b      	str	r3, [r7, #32]
          break;
 8000bac:	e01a      	b.n	8000be4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	689b      	ldr	r3, [r3, #8]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d102      	bne.n	8000bbc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bb6:	2304      	movs	r3, #4
 8000bb8:	623b      	str	r3, [r7, #32]
          break;
 8000bba:	e013      	b.n	8000be4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d105      	bne.n	8000bd0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bc4:	2308      	movs	r3, #8
 8000bc6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	69fa      	ldr	r2, [r7, #28]
 8000bcc:	611a      	str	r2, [r3, #16]
          break;
 8000bce:	e009      	b.n	8000be4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bd0:	2308      	movs	r3, #8
 8000bd2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	69fa      	ldr	r2, [r7, #28]
 8000bd8:	615a      	str	r2, [r3, #20]
          break;
 8000bda:	e003      	b.n	8000be4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	623b      	str	r3, [r7, #32]
          break;
 8000be0:	e000      	b.n	8000be4 <HAL_GPIO_Init+0x130>
          break;
 8000be2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000be4:	69bb      	ldr	r3, [r7, #24]
 8000be6:	2bff      	cmp	r3, #255	@ 0xff
 8000be8:	d801      	bhi.n	8000bee <HAL_GPIO_Init+0x13a>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	e001      	b.n	8000bf2 <HAL_GPIO_Init+0x13e>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	2bff      	cmp	r3, #255	@ 0xff
 8000bf8:	d802      	bhi.n	8000c00 <HAL_GPIO_Init+0x14c>
 8000bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	e002      	b.n	8000c06 <HAL_GPIO_Init+0x152>
 8000c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c02:	3b08      	subs	r3, #8
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	210f      	movs	r1, #15
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	fa01 f303 	lsl.w	r3, r1, r3
 8000c14:	43db      	mvns	r3, r3
 8000c16:	401a      	ands	r2, r3
 8000c18:	6a39      	ldr	r1, [r7, #32]
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c20:	431a      	orrs	r2, r3
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	f000 80b1 	beq.w	8000d96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c34:	4b4d      	ldr	r3, [pc, #308]	@ (8000d6c <HAL_GPIO_Init+0x2b8>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	4a4c      	ldr	r2, [pc, #304]	@ (8000d6c <HAL_GPIO_Init+0x2b8>)
 8000c3a:	f043 0301 	orr.w	r3, r3, #1
 8000c3e:	6193      	str	r3, [r2, #24]
 8000c40:	4b4a      	ldr	r3, [pc, #296]	@ (8000d6c <HAL_GPIO_Init+0x2b8>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	f003 0301 	and.w	r3, r3, #1
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c4c:	4a48      	ldr	r2, [pc, #288]	@ (8000d70 <HAL_GPIO_Init+0x2bc>)
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c50:	089b      	lsrs	r3, r3, #2
 8000c52:	3302      	adds	r3, #2
 8000c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c58:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c5c:	f003 0303 	and.w	r3, r3, #3
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	220f      	movs	r2, #15
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	68fa      	ldr	r2, [r7, #12]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a40      	ldr	r2, [pc, #256]	@ (8000d74 <HAL_GPIO_Init+0x2c0>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d013      	beq.n	8000ca0 <HAL_GPIO_Init+0x1ec>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a3f      	ldr	r2, [pc, #252]	@ (8000d78 <HAL_GPIO_Init+0x2c4>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d00d      	beq.n	8000c9c <HAL_GPIO_Init+0x1e8>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a3e      	ldr	r2, [pc, #248]	@ (8000d7c <HAL_GPIO_Init+0x2c8>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d007      	beq.n	8000c98 <HAL_GPIO_Init+0x1e4>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a3d      	ldr	r2, [pc, #244]	@ (8000d80 <HAL_GPIO_Init+0x2cc>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d101      	bne.n	8000c94 <HAL_GPIO_Init+0x1e0>
 8000c90:	2303      	movs	r3, #3
 8000c92:	e006      	b.n	8000ca2 <HAL_GPIO_Init+0x1ee>
 8000c94:	2304      	movs	r3, #4
 8000c96:	e004      	b.n	8000ca2 <HAL_GPIO_Init+0x1ee>
 8000c98:	2302      	movs	r3, #2
 8000c9a:	e002      	b.n	8000ca2 <HAL_GPIO_Init+0x1ee>
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	e000      	b.n	8000ca2 <HAL_GPIO_Init+0x1ee>
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ca4:	f002 0203 	and.w	r2, r2, #3
 8000ca8:	0092      	lsls	r2, r2, #2
 8000caa:	4093      	lsls	r3, r2
 8000cac:	68fa      	ldr	r2, [r7, #12]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000cb2:	492f      	ldr	r1, [pc, #188]	@ (8000d70 <HAL_GPIO_Init+0x2bc>)
 8000cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cb6:	089b      	lsrs	r3, r3, #2
 8000cb8:	3302      	adds	r3, #2
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d006      	beq.n	8000cda <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ccc:	4b2d      	ldr	r3, [pc, #180]	@ (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000cce:	689a      	ldr	r2, [r3, #8]
 8000cd0:	492c      	ldr	r1, [pc, #176]	@ (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000cd2:	69bb      	ldr	r3, [r7, #24]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	608b      	str	r3, [r1, #8]
 8000cd8:	e006      	b.n	8000ce8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cda:	4b2a      	ldr	r3, [pc, #168]	@ (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000cdc:	689a      	ldr	r2, [r3, #8]
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	4928      	ldr	r1, [pc, #160]	@ (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d006      	beq.n	8000d02 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cf4:	4b23      	ldr	r3, [pc, #140]	@ (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000cf6:	68da      	ldr	r2, [r3, #12]
 8000cf8:	4922      	ldr	r1, [pc, #136]	@ (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000cfa:	69bb      	ldr	r3, [r7, #24]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	60cb      	str	r3, [r1, #12]
 8000d00:	e006      	b.n	8000d10 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d02:	4b20      	ldr	r3, [pc, #128]	@ (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000d04:	68da      	ldr	r2, [r3, #12]
 8000d06:	69bb      	ldr	r3, [r7, #24]
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	491e      	ldr	r1, [pc, #120]	@ (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d006      	beq.n	8000d2a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d1c:	4b19      	ldr	r3, [pc, #100]	@ (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000d1e:	685a      	ldr	r2, [r3, #4]
 8000d20:	4918      	ldr	r1, [pc, #96]	@ (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000d22:	69bb      	ldr	r3, [r7, #24]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	604b      	str	r3, [r1, #4]
 8000d28:	e006      	b.n	8000d38 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d2a:	4b16      	ldr	r3, [pc, #88]	@ (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000d2c:	685a      	ldr	r2, [r3, #4]
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	43db      	mvns	r3, r3
 8000d32:	4914      	ldr	r1, [pc, #80]	@ (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000d34:	4013      	ands	r3, r2
 8000d36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d021      	beq.n	8000d88 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d44:	4b0f      	ldr	r3, [pc, #60]	@ (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	490e      	ldr	r1, [pc, #56]	@ (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	600b      	str	r3, [r1, #0]
 8000d50:	e021      	b.n	8000d96 <HAL_GPIO_Init+0x2e2>
 8000d52:	bf00      	nop
 8000d54:	10320000 	.word	0x10320000
 8000d58:	10310000 	.word	0x10310000
 8000d5c:	10220000 	.word	0x10220000
 8000d60:	10210000 	.word	0x10210000
 8000d64:	10120000 	.word	0x10120000
 8000d68:	10110000 	.word	0x10110000
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	40010000 	.word	0x40010000
 8000d74:	40010800 	.word	0x40010800
 8000d78:	40010c00 	.word	0x40010c00
 8000d7c:	40011000 	.word	0x40011000
 8000d80:	40011400 	.word	0x40011400
 8000d84:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d88:	4b0b      	ldr	r3, [pc, #44]	@ (8000db8 <HAL_GPIO_Init+0x304>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	4909      	ldr	r1, [pc, #36]	@ (8000db8 <HAL_GPIO_Init+0x304>)
 8000d92:	4013      	ands	r3, r2
 8000d94:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d98:	3301      	adds	r3, #1
 8000d9a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000da2:	fa22 f303 	lsr.w	r3, r2, r3
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f47f ae8e 	bne.w	8000ac8 <HAL_GPIO_Init+0x14>
  }
}
 8000dac:	bf00      	nop
 8000dae:	bf00      	nop
 8000db0:	372c      	adds	r7, #44	@ 0x2c
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr
 8000db8:	40010400 	.word	0x40010400

08000dbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	689a      	ldr	r2, [r3, #8]
 8000dcc:	887b      	ldrh	r3, [r7, #2]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d002      	beq.n	8000dda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	73fb      	strb	r3, [r7, #15]
 8000dd8:	e001      	b.n	8000dde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3714      	adds	r7, #20
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc80      	pop	{r7}
 8000de8:	4770      	bx	lr

08000dea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dea:	b480      	push	{r7}
 8000dec:	b083      	sub	sp, #12
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
 8000df2:	460b      	mov	r3, r1
 8000df4:	807b      	strh	r3, [r7, #2]
 8000df6:	4613      	mov	r3, r2
 8000df8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dfa:	787b      	ldrb	r3, [r7, #1]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d003      	beq.n	8000e08 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e00:	887a      	ldrh	r2, [r7, #2]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e06:	e003      	b.n	8000e10 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e08:	887b      	ldrh	r3, [r7, #2]
 8000e0a:	041a      	lsls	r2, r3, #16
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	611a      	str	r2, [r3, #16]
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr
	...

08000e1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d101      	bne.n	8000e2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e12b      	b.n	8001086 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d106      	bne.n	8000e48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff fbba 	bl	80005bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2224      	movs	r2, #36	@ 0x24
 8000e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f022 0201 	bic.w	r2, r2, #1
 8000e5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000e6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000e7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000e80:	f001 f832 	bl	8001ee8 <HAL_RCC_GetPCLK1Freq>
 8000e84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	4a81      	ldr	r2, [pc, #516]	@ (8001090 <HAL_I2C_Init+0x274>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d807      	bhi.n	8000ea0 <HAL_I2C_Init+0x84>
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	4a80      	ldr	r2, [pc, #512]	@ (8001094 <HAL_I2C_Init+0x278>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	bf94      	ite	ls
 8000e98:	2301      	movls	r3, #1
 8000e9a:	2300      	movhi	r3, #0
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	e006      	b.n	8000eae <HAL_I2C_Init+0x92>
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	4a7d      	ldr	r2, [pc, #500]	@ (8001098 <HAL_I2C_Init+0x27c>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	bf94      	ite	ls
 8000ea8:	2301      	movls	r3, #1
 8000eaa:	2300      	movhi	r3, #0
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e0e7      	b.n	8001086 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	4a78      	ldr	r2, [pc, #480]	@ (800109c <HAL_I2C_Init+0x280>)
 8000eba:	fba2 2303 	umull	r2, r3, r2, r3
 8000ebe:	0c9b      	lsrs	r3, r3, #18
 8000ec0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	68ba      	ldr	r2, [r7, #8]
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	6a1b      	ldr	r3, [r3, #32]
 8000edc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	4a6a      	ldr	r2, [pc, #424]	@ (8001090 <HAL_I2C_Init+0x274>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d802      	bhi.n	8000ef0 <HAL_I2C_Init+0xd4>
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	3301      	adds	r3, #1
 8000eee:	e009      	b.n	8000f04 <HAL_I2C_Init+0xe8>
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000ef6:	fb02 f303 	mul.w	r3, r2, r3
 8000efa:	4a69      	ldr	r2, [pc, #420]	@ (80010a0 <HAL_I2C_Init+0x284>)
 8000efc:	fba2 2303 	umull	r2, r3, r2, r3
 8000f00:	099b      	lsrs	r3, r3, #6
 8000f02:	3301      	adds	r3, #1
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	6812      	ldr	r2, [r2, #0]
 8000f08:	430b      	orrs	r3, r1
 8000f0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000f16:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	495c      	ldr	r1, [pc, #368]	@ (8001090 <HAL_I2C_Init+0x274>)
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d819      	bhi.n	8000f58 <HAL_I2C_Init+0x13c>
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	1e59      	subs	r1, r3, #1
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f32:	1c59      	adds	r1, r3, #1
 8000f34:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000f38:	400b      	ands	r3, r1
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d00a      	beq.n	8000f54 <HAL_I2C_Init+0x138>
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	1e59      	subs	r1, r3, #1
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f52:	e051      	b.n	8000ff8 <HAL_I2C_Init+0x1dc>
 8000f54:	2304      	movs	r3, #4
 8000f56:	e04f      	b.n	8000ff8 <HAL_I2C_Init+0x1dc>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d111      	bne.n	8000f84 <HAL_I2C_Init+0x168>
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	1e58      	subs	r0, r3, #1
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6859      	ldr	r1, [r3, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	440b      	add	r3, r1
 8000f6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f72:	3301      	adds	r3, #1
 8000f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	bf0c      	ite	eq
 8000f7c:	2301      	moveq	r3, #1
 8000f7e:	2300      	movne	r3, #0
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	e012      	b.n	8000faa <HAL_I2C_Init+0x18e>
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	1e58      	subs	r0, r3, #1
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6859      	ldr	r1, [r3, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	440b      	add	r3, r1
 8000f92:	0099      	lsls	r1, r3, #2
 8000f94:	440b      	add	r3, r1
 8000f96:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	bf0c      	ite	eq
 8000fa4:	2301      	moveq	r3, #1
 8000fa6:	2300      	movne	r3, #0
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <HAL_I2C_Init+0x196>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e022      	b.n	8000ff8 <HAL_I2C_Init+0x1dc>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d10e      	bne.n	8000fd8 <HAL_I2C_Init+0x1bc>
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	1e58      	subs	r0, r3, #1
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6859      	ldr	r1, [r3, #4]
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	440b      	add	r3, r1
 8000fc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fcc:	3301      	adds	r3, #1
 8000fce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fd6:	e00f      	b.n	8000ff8 <HAL_I2C_Init+0x1dc>
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	1e58      	subs	r0, r3, #1
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6859      	ldr	r1, [r3, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	0099      	lsls	r1, r3, #2
 8000fe8:	440b      	add	r3, r1
 8000fea:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fee:	3301      	adds	r3, #1
 8000ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ff4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ff8:	6879      	ldr	r1, [r7, #4]
 8000ffa:	6809      	ldr	r1, [r1, #0]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69da      	ldr	r2, [r3, #28]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6a1b      	ldr	r3, [r3, #32]
 8001012:	431a      	orrs	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	430a      	orrs	r2, r1
 800101a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001026:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	6911      	ldr	r1, [r2, #16]
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	68d2      	ldr	r2, [r2, #12]
 8001032:	4311      	orrs	r1, r2
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	6812      	ldr	r2, [r2, #0]
 8001038:	430b      	orrs	r3, r1
 800103a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	695a      	ldr	r2, [r3, #20]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	431a      	orrs	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	430a      	orrs	r2, r1
 8001056:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f042 0201 	orr.w	r2, r2, #1
 8001066:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2220      	movs	r2, #32
 8001072:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	000186a0 	.word	0x000186a0
 8001094:	001e847f 	.word	0x001e847f
 8001098:	003d08ff 	.word	0x003d08ff
 800109c:	431bde83 	.word	0x431bde83
 80010a0:	10624dd3 	.word	0x10624dd3

080010a4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af02      	add	r7, sp, #8
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	607a      	str	r2, [r7, #4]
 80010ae:	461a      	mov	r2, r3
 80010b0:	460b      	mov	r3, r1
 80010b2:	817b      	strh	r3, [r7, #10]
 80010b4:	4613      	mov	r3, r2
 80010b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80010b8:	f7ff fbe4 	bl	8000884 <HAL_GetTick>
 80010bc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b20      	cmp	r3, #32
 80010c8:	f040 80e0 	bne.w	800128c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	2319      	movs	r3, #25
 80010d2:	2201      	movs	r2, #1
 80010d4:	4970      	ldr	r1, [pc, #448]	@ (8001298 <HAL_I2C_Master_Transmit+0x1f4>)
 80010d6:	68f8      	ldr	r0, [r7, #12]
 80010d8:	f000 f964 	bl	80013a4 <I2C_WaitOnFlagUntilTimeout>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80010e2:	2302      	movs	r3, #2
 80010e4:	e0d3      	b.n	800128e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d101      	bne.n	80010f4 <HAL_I2C_Master_Transmit+0x50>
 80010f0:	2302      	movs	r3, #2
 80010f2:	e0cc      	b.n	800128e <HAL_I2C_Master_Transmit+0x1ea>
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2201      	movs	r2, #1
 80010f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	2b01      	cmp	r3, #1
 8001108:	d007      	beq.n	800111a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f042 0201 	orr.w	r2, r2, #1
 8001118:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001128:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2221      	movs	r2, #33	@ 0x21
 800112e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2210      	movs	r2, #16
 8001136:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	2200      	movs	r2, #0
 800113e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	893a      	ldrh	r2, [r7, #8]
 800114a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001150:	b29a      	uxth	r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	4a50      	ldr	r2, [pc, #320]	@ (800129c <HAL_I2C_Master_Transmit+0x1f8>)
 800115a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800115c:	8979      	ldrh	r1, [r7, #10]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	6a3a      	ldr	r2, [r7, #32]
 8001162:	68f8      	ldr	r0, [r7, #12]
 8001164:	f000 f89c 	bl	80012a0 <I2C_MasterRequestWrite>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e08d      	b.n	800128e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	695b      	ldr	r3, [r3, #20]
 800117c:	613b      	str	r3, [r7, #16]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	613b      	str	r3, [r7, #16]
 8001186:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001188:	e066      	b.n	8001258 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800118a:	697a      	ldr	r2, [r7, #20]
 800118c:	6a39      	ldr	r1, [r7, #32]
 800118e:	68f8      	ldr	r0, [r7, #12]
 8001190:	f000 fa22 	bl	80015d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d00d      	beq.n	80011b6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119e:	2b04      	cmp	r3, #4
 80011a0:	d107      	bne.n	80011b2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80011b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e06b      	b.n	800128e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ba:	781a      	ldrb	r2, [r3, #0]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011c6:	1c5a      	adds	r2, r3, #1
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	3b01      	subs	r3, #1
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011de:	3b01      	subs	r3, #1
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	695b      	ldr	r3, [r3, #20]
 80011ec:	f003 0304 	and.w	r3, r3, #4
 80011f0:	2b04      	cmp	r3, #4
 80011f2:	d11b      	bne.n	800122c <HAL_I2C_Master_Transmit+0x188>
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d017      	beq.n	800122c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001200:	781a      	ldrb	r2, [r3, #0]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800120c:	1c5a      	adds	r2, r3, #1
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001216:	b29b      	uxth	r3, r3
 8001218:	3b01      	subs	r3, #1
 800121a:	b29a      	uxth	r2, r3
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001224:	3b01      	subs	r3, #1
 8001226:	b29a      	uxth	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	6a39      	ldr	r1, [r7, #32]
 8001230:	68f8      	ldr	r0, [r7, #12]
 8001232:	f000 fa19 	bl	8001668 <I2C_WaitOnBTFFlagUntilTimeout>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d00d      	beq.n	8001258 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001240:	2b04      	cmp	r3, #4
 8001242:	d107      	bne.n	8001254 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001252:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e01a      	b.n	800128e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800125c:	2b00      	cmp	r3, #0
 800125e:	d194      	bne.n	800118a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800126e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2220      	movs	r2, #32
 8001274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2200      	movs	r2, #0
 800127c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2200      	movs	r2, #0
 8001284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001288:	2300      	movs	r3, #0
 800128a:	e000      	b.n	800128e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800128c:	2302      	movs	r3, #2
  }
}
 800128e:	4618      	mov	r0, r3
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	00100002 	.word	0x00100002
 800129c:	ffff0000 	.word	0xffff0000

080012a0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af02      	add	r7, sp, #8
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	607a      	str	r2, [r7, #4]
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	460b      	mov	r3, r1
 80012ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012b4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	2b08      	cmp	r3, #8
 80012ba:	d006      	beq.n	80012ca <I2C_MasterRequestWrite+0x2a>
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d003      	beq.n	80012ca <I2C_MasterRequestWrite+0x2a>
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80012c8:	d108      	bne.n	80012dc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	e00b      	b.n	80012f4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e0:	2b12      	cmp	r3, #18
 80012e2:	d107      	bne.n	80012f4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80012f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001300:	68f8      	ldr	r0, [r7, #12]
 8001302:	f000 f84f 	bl	80013a4 <I2C_WaitOnFlagUntilTimeout>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d00d      	beq.n	8001328 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001316:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800131a:	d103      	bne.n	8001324 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001322:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e035      	b.n	8001394 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001330:	d108      	bne.n	8001344 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001332:	897b      	ldrh	r3, [r7, #10]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	461a      	mov	r2, r3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001340:	611a      	str	r2, [r3, #16]
 8001342:	e01b      	b.n	800137c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001344:	897b      	ldrh	r3, [r7, #10]
 8001346:	11db      	asrs	r3, r3, #7
 8001348:	b2db      	uxtb	r3, r3
 800134a:	f003 0306 	and.w	r3, r3, #6
 800134e:	b2db      	uxtb	r3, r3
 8001350:	f063 030f 	orn	r3, r3, #15
 8001354:	b2da      	uxtb	r2, r3
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	490e      	ldr	r1, [pc, #56]	@ (800139c <I2C_MasterRequestWrite+0xfc>)
 8001362:	68f8      	ldr	r0, [r7, #12]
 8001364:	f000 f898 	bl	8001498 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e010      	b.n	8001394 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001372:	897b      	ldrh	r3, [r7, #10]
 8001374:	b2da      	uxtb	r2, r3
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	4907      	ldr	r1, [pc, #28]	@ (80013a0 <I2C_MasterRequestWrite+0x100>)
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	f000 f888 	bl	8001498 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e000      	b.n	8001394 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	00010008 	.word	0x00010008
 80013a0:	00010002 	.word	0x00010002

080013a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	603b      	str	r3, [r7, #0]
 80013b0:	4613      	mov	r3, r2
 80013b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013b4:	e048      	b.n	8001448 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013bc:	d044      	beq.n	8001448 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013be:	f7ff fa61 	bl	8000884 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d302      	bcc.n	80013d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d139      	bne.n	8001448 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	0c1b      	lsrs	r3, r3, #16
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d10d      	bne.n	80013fa <I2C_WaitOnFlagUntilTimeout+0x56>
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	695b      	ldr	r3, [r3, #20]
 80013e4:	43da      	mvns	r2, r3
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	4013      	ands	r3, r2
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	bf0c      	ite	eq
 80013f0:	2301      	moveq	r3, #1
 80013f2:	2300      	movne	r3, #0
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	461a      	mov	r2, r3
 80013f8:	e00c      	b.n	8001414 <I2C_WaitOnFlagUntilTimeout+0x70>
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	43da      	mvns	r2, r3
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	4013      	ands	r3, r2
 8001406:	b29b      	uxth	r3, r3
 8001408:	2b00      	cmp	r3, #0
 800140a:	bf0c      	ite	eq
 800140c:	2301      	moveq	r3, #1
 800140e:	2300      	movne	r3, #0
 8001410:	b2db      	uxtb	r3, r3
 8001412:	461a      	mov	r2, r3
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	429a      	cmp	r2, r3
 8001418:	d116      	bne.n	8001448 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2200      	movs	r2, #0
 800141e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2220      	movs	r2, #32
 8001424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001434:	f043 0220 	orr.w	r2, r3, #32
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e023      	b.n	8001490 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	0c1b      	lsrs	r3, r3, #16
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b01      	cmp	r3, #1
 8001450:	d10d      	bne.n	800146e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	43da      	mvns	r2, r3
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	4013      	ands	r3, r2
 800145e:	b29b      	uxth	r3, r3
 8001460:	2b00      	cmp	r3, #0
 8001462:	bf0c      	ite	eq
 8001464:	2301      	moveq	r3, #1
 8001466:	2300      	movne	r3, #0
 8001468:	b2db      	uxtb	r3, r3
 800146a:	461a      	mov	r2, r3
 800146c:	e00c      	b.n	8001488 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	43da      	mvns	r2, r3
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	4013      	ands	r3, r2
 800147a:	b29b      	uxth	r3, r3
 800147c:	2b00      	cmp	r3, #0
 800147e:	bf0c      	ite	eq
 8001480:	2301      	moveq	r3, #1
 8001482:	2300      	movne	r3, #0
 8001484:	b2db      	uxtb	r3, r3
 8001486:	461a      	mov	r2, r3
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	429a      	cmp	r2, r3
 800148c:	d093      	beq.n	80013b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
 80014a4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80014a6:	e071      	b.n	800158c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014b6:	d123      	bne.n	8001500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014c6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80014d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2200      	movs	r2, #0
 80014d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2220      	movs	r2, #32
 80014dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ec:	f043 0204 	orr.w	r2, r3, #4
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e067      	b.n	80015d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001506:	d041      	beq.n	800158c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001508:	f7ff f9bc 	bl	8000884 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	429a      	cmp	r2, r3
 8001516:	d302      	bcc.n	800151e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d136      	bne.n	800158c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	0c1b      	lsrs	r3, r3, #16
 8001522:	b2db      	uxtb	r3, r3
 8001524:	2b01      	cmp	r3, #1
 8001526:	d10c      	bne.n	8001542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	43da      	mvns	r2, r3
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	4013      	ands	r3, r2
 8001534:	b29b      	uxth	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	bf14      	ite	ne
 800153a:	2301      	movne	r3, #1
 800153c:	2300      	moveq	r3, #0
 800153e:	b2db      	uxtb	r3, r3
 8001540:	e00b      	b.n	800155a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	43da      	mvns	r2, r3
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	4013      	ands	r3, r2
 800154e:	b29b      	uxth	r3, r3
 8001550:	2b00      	cmp	r3, #0
 8001552:	bf14      	ite	ne
 8001554:	2301      	movne	r3, #1
 8001556:	2300      	moveq	r3, #0
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d016      	beq.n	800158c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2200      	movs	r2, #0
 8001562:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2220      	movs	r2, #32
 8001568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001578:	f043 0220 	orr.w	r2, r3, #32
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e021      	b.n	80015d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	0c1b      	lsrs	r3, r3, #16
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b01      	cmp	r3, #1
 8001594:	d10c      	bne.n	80015b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	695b      	ldr	r3, [r3, #20]
 800159c:	43da      	mvns	r2, r3
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	4013      	ands	r3, r2
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	bf14      	ite	ne
 80015a8:	2301      	movne	r3, #1
 80015aa:	2300      	moveq	r3, #0
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	e00b      	b.n	80015c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	43da      	mvns	r2, r3
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	4013      	ands	r3, r2
 80015bc:	b29b      	uxth	r3, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	bf14      	ite	ne
 80015c2:	2301      	movne	r3, #1
 80015c4:	2300      	moveq	r3, #0
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f47f af6d 	bne.w	80014a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80015e4:	e034      	b.n	8001650 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80015e6:	68f8      	ldr	r0, [r7, #12]
 80015e8:	f000 f886 	bl	80016f8 <I2C_IsAcknowledgeFailed>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e034      	b.n	8001660 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015fc:	d028      	beq.n	8001650 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015fe:	f7ff f941 	bl	8000884 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	68ba      	ldr	r2, [r7, #8]
 800160a:	429a      	cmp	r2, r3
 800160c:	d302      	bcc.n	8001614 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d11d      	bne.n	8001650 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800161e:	2b80      	cmp	r3, #128	@ 0x80
 8001620:	d016      	beq.n	8001650 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2200      	movs	r2, #0
 8001626:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2220      	movs	r2, #32
 800162c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163c:	f043 0220 	orr.w	r2, r3, #32
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e007      	b.n	8001660 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800165a:	2b80      	cmp	r3, #128	@ 0x80
 800165c:	d1c3      	bne.n	80015e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001674:	e034      	b.n	80016e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f000 f83e 	bl	80016f8 <I2C_IsAcknowledgeFailed>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e034      	b.n	80016f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800168c:	d028      	beq.n	80016e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800168e:	f7ff f8f9 	bl	8000884 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	68ba      	ldr	r2, [r7, #8]
 800169a:	429a      	cmp	r2, r3
 800169c:	d302      	bcc.n	80016a4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d11d      	bne.n	80016e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	f003 0304 	and.w	r3, r3, #4
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	d016      	beq.n	80016e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2200      	movs	r2, #0
 80016b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2220      	movs	r2, #32
 80016bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016cc:	f043 0220 	orr.w	r2, r3, #32
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e007      	b.n	80016f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	d1c3      	bne.n	8001676 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800170a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800170e:	d11b      	bne.n	8001748 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001718:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2220      	movs	r2, #32
 8001724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001734:	f043 0204 	orr.w	r2, r3, #4
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e000      	b.n	800174a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr

08001754 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e272      	b.n	8001c4c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	2b00      	cmp	r3, #0
 8001770:	f000 8087 	beq.w	8001882 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001774:	4b92      	ldr	r3, [pc, #584]	@ (80019c0 <HAL_RCC_OscConfig+0x26c>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 030c 	and.w	r3, r3, #12
 800177c:	2b04      	cmp	r3, #4
 800177e:	d00c      	beq.n	800179a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001780:	4b8f      	ldr	r3, [pc, #572]	@ (80019c0 <HAL_RCC_OscConfig+0x26c>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 030c 	and.w	r3, r3, #12
 8001788:	2b08      	cmp	r3, #8
 800178a:	d112      	bne.n	80017b2 <HAL_RCC_OscConfig+0x5e>
 800178c:	4b8c      	ldr	r3, [pc, #560]	@ (80019c0 <HAL_RCC_OscConfig+0x26c>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001794:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001798:	d10b      	bne.n	80017b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800179a:	4b89      	ldr	r3, [pc, #548]	@ (80019c0 <HAL_RCC_OscConfig+0x26c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d06c      	beq.n	8001880 <HAL_RCC_OscConfig+0x12c>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d168      	bne.n	8001880 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e24c      	b.n	8001c4c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017ba:	d106      	bne.n	80017ca <HAL_RCC_OscConfig+0x76>
 80017bc:	4b80      	ldr	r3, [pc, #512]	@ (80019c0 <HAL_RCC_OscConfig+0x26c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a7f      	ldr	r2, [pc, #508]	@ (80019c0 <HAL_RCC_OscConfig+0x26c>)
 80017c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017c6:	6013      	str	r3, [r2, #0]
 80017c8:	e02e      	b.n	8001828 <HAL_RCC_OscConfig+0xd4>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10c      	bne.n	80017ec <HAL_RCC_OscConfig+0x98>
 80017d2:	4b7b      	ldr	r3, [pc, #492]	@ (80019c0 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a7a      	ldr	r2, [pc, #488]	@ (80019c0 <HAL_RCC_OscConfig+0x26c>)
 80017d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017dc:	6013      	str	r3, [r2, #0]
 80017de:	4b78      	ldr	r3, [pc, #480]	@ (80019c0 <HAL_RCC_OscConfig+0x26c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a77      	ldr	r2, [pc, #476]	@ (80019c0 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	e01d      	b.n	8001828 <HAL_RCC_OscConfig+0xd4>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017f4:	d10c      	bne.n	8001810 <HAL_RCC_OscConfig+0xbc>
 80017f6:	4b72      	ldr	r3, [pc, #456]	@ (80019c0 <HAL_RCC_OscConfig+0x26c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a71      	ldr	r2, [pc, #452]	@ (80019c0 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001800:	6013      	str	r3, [r2, #0]
 8001802:	4b6f      	ldr	r3, [pc, #444]	@ (80019c0 <HAL_RCC_OscConfig+0x26c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a6e      	ldr	r2, [pc, #440]	@ (80019c0 <HAL_RCC_OscConfig+0x26c>)
 8001808:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	e00b      	b.n	8001828 <HAL_RCC_OscConfig+0xd4>
 8001810:	4b6b      	ldr	r3, [pc, #428]	@ (80019c0 <HAL_RCC_OscConfig+0x26c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a6a      	ldr	r2, [pc, #424]	@ (80019c0 <HAL_RCC_OscConfig+0x26c>)
 8001816:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800181a:	6013      	str	r3, [r2, #0]
 800181c:	4b68      	ldr	r3, [pc, #416]	@ (80019c0 <HAL_RCC_OscConfig+0x26c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a67      	ldr	r2, [pc, #412]	@ (80019c0 <HAL_RCC_OscConfig+0x26c>)
 8001822:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001826:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d013      	beq.n	8001858 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001830:	f7ff f828 	bl	8000884 <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001838:	f7ff f824 	bl	8000884 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b64      	cmp	r3, #100	@ 0x64
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e200      	b.n	8001c4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184a:	4b5d      	ldr	r3, [pc, #372]	@ (80019c0 <HAL_RCC_OscConfig+0x26c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0f0      	beq.n	8001838 <HAL_RCC_OscConfig+0xe4>
 8001856:	e014      	b.n	8001882 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001858:	f7ff f814 	bl	8000884 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001860:	f7ff f810 	bl	8000884 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b64      	cmp	r3, #100	@ 0x64
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e1ec      	b.n	8001c4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001872:	4b53      	ldr	r3, [pc, #332]	@ (80019c0 <HAL_RCC_OscConfig+0x26c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f0      	bne.n	8001860 <HAL_RCC_OscConfig+0x10c>
 800187e:	e000      	b.n	8001882 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001880:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d063      	beq.n	8001956 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800188e:	4b4c      	ldr	r3, [pc, #304]	@ (80019c0 <HAL_RCC_OscConfig+0x26c>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f003 030c 	and.w	r3, r3, #12
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00b      	beq.n	80018b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800189a:	4b49      	ldr	r3, [pc, #292]	@ (80019c0 <HAL_RCC_OscConfig+0x26c>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f003 030c 	and.w	r3, r3, #12
 80018a2:	2b08      	cmp	r3, #8
 80018a4:	d11c      	bne.n	80018e0 <HAL_RCC_OscConfig+0x18c>
 80018a6:	4b46      	ldr	r3, [pc, #280]	@ (80019c0 <HAL_RCC_OscConfig+0x26c>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d116      	bne.n	80018e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018b2:	4b43      	ldr	r3, [pc, #268]	@ (80019c0 <HAL_RCC_OscConfig+0x26c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d005      	beq.n	80018ca <HAL_RCC_OscConfig+0x176>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d001      	beq.n	80018ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e1c0      	b.n	8001c4c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ca:	4b3d      	ldr	r3, [pc, #244]	@ (80019c0 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	4939      	ldr	r1, [pc, #228]	@ (80019c0 <HAL_RCC_OscConfig+0x26c>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018de:	e03a      	b.n	8001956 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d020      	beq.n	800192a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018e8:	4b36      	ldr	r3, [pc, #216]	@ (80019c4 <HAL_RCC_OscConfig+0x270>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ee:	f7fe ffc9 	bl	8000884 <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f4:	e008      	b.n	8001908 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f6:	f7fe ffc5 	bl	8000884 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e1a1      	b.n	8001c4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001908:	4b2d      	ldr	r3, [pc, #180]	@ (80019c0 <HAL_RCC_OscConfig+0x26c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0f0      	beq.n	80018f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001914:	4b2a      	ldr	r3, [pc, #168]	@ (80019c0 <HAL_RCC_OscConfig+0x26c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	4927      	ldr	r1, [pc, #156]	@ (80019c0 <HAL_RCC_OscConfig+0x26c>)
 8001924:	4313      	orrs	r3, r2
 8001926:	600b      	str	r3, [r1, #0]
 8001928:	e015      	b.n	8001956 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800192a:	4b26      	ldr	r3, [pc, #152]	@ (80019c4 <HAL_RCC_OscConfig+0x270>)
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001930:	f7fe ffa8 	bl	8000884 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001938:	f7fe ffa4 	bl	8000884 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e180      	b.n	8001c4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800194a:	4b1d      	ldr	r3, [pc, #116]	@ (80019c0 <HAL_RCC_OscConfig+0x26c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1f0      	bne.n	8001938 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0308 	and.w	r3, r3, #8
 800195e:	2b00      	cmp	r3, #0
 8001960:	d03a      	beq.n	80019d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d019      	beq.n	800199e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800196a:	4b17      	ldr	r3, [pc, #92]	@ (80019c8 <HAL_RCC_OscConfig+0x274>)
 800196c:	2201      	movs	r2, #1
 800196e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001970:	f7fe ff88 	bl	8000884 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001978:	f7fe ff84 	bl	8000884 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e160      	b.n	8001c4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800198a:	4b0d      	ldr	r3, [pc, #52]	@ (80019c0 <HAL_RCC_OscConfig+0x26c>)
 800198c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0f0      	beq.n	8001978 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001996:	2001      	movs	r0, #1
 8001998:	f000 faba 	bl	8001f10 <RCC_Delay>
 800199c:	e01c      	b.n	80019d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800199e:	4b0a      	ldr	r3, [pc, #40]	@ (80019c8 <HAL_RCC_OscConfig+0x274>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a4:	f7fe ff6e 	bl	8000884 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019aa:	e00f      	b.n	80019cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ac:	f7fe ff6a 	bl	8000884 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d908      	bls.n	80019cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e146      	b.n	8001c4c <HAL_RCC_OscConfig+0x4f8>
 80019be:	bf00      	nop
 80019c0:	40021000 	.word	0x40021000
 80019c4:	42420000 	.word	0x42420000
 80019c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019cc:	4b92      	ldr	r3, [pc, #584]	@ (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 80019ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1e9      	bne.n	80019ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0304 	and.w	r3, r3, #4
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f000 80a6 	beq.w	8001b32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019e6:	2300      	movs	r3, #0
 80019e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ea:	4b8b      	ldr	r3, [pc, #556]	@ (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10d      	bne.n	8001a12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019f6:	4b88      	ldr	r3, [pc, #544]	@ (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	4a87      	ldr	r2, [pc, #540]	@ (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 80019fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a00:	61d3      	str	r3, [r2, #28]
 8001a02:	4b85      	ldr	r3, [pc, #532]	@ (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a12:	4b82      	ldr	r3, [pc, #520]	@ (8001c1c <HAL_RCC_OscConfig+0x4c8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d118      	bne.n	8001a50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a1e:	4b7f      	ldr	r3, [pc, #508]	@ (8001c1c <HAL_RCC_OscConfig+0x4c8>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a7e      	ldr	r2, [pc, #504]	@ (8001c1c <HAL_RCC_OscConfig+0x4c8>)
 8001a24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a2a:	f7fe ff2b 	bl	8000884 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a32:	f7fe ff27 	bl	8000884 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b64      	cmp	r3, #100	@ 0x64
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e103      	b.n	8001c4c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a44:	4b75      	ldr	r3, [pc, #468]	@ (8001c1c <HAL_RCC_OscConfig+0x4c8>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0f0      	beq.n	8001a32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d106      	bne.n	8001a66 <HAL_RCC_OscConfig+0x312>
 8001a58:	4b6f      	ldr	r3, [pc, #444]	@ (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	4a6e      	ldr	r2, [pc, #440]	@ (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001a5e:	f043 0301 	orr.w	r3, r3, #1
 8001a62:	6213      	str	r3, [r2, #32]
 8001a64:	e02d      	b.n	8001ac2 <HAL_RCC_OscConfig+0x36e>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10c      	bne.n	8001a88 <HAL_RCC_OscConfig+0x334>
 8001a6e:	4b6a      	ldr	r3, [pc, #424]	@ (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	4a69      	ldr	r2, [pc, #420]	@ (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001a74:	f023 0301 	bic.w	r3, r3, #1
 8001a78:	6213      	str	r3, [r2, #32]
 8001a7a:	4b67      	ldr	r3, [pc, #412]	@ (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
 8001a7e:	4a66      	ldr	r2, [pc, #408]	@ (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001a80:	f023 0304 	bic.w	r3, r3, #4
 8001a84:	6213      	str	r3, [r2, #32]
 8001a86:	e01c      	b.n	8001ac2 <HAL_RCC_OscConfig+0x36e>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	2b05      	cmp	r3, #5
 8001a8e:	d10c      	bne.n	8001aaa <HAL_RCC_OscConfig+0x356>
 8001a90:	4b61      	ldr	r3, [pc, #388]	@ (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	4a60      	ldr	r2, [pc, #384]	@ (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001a96:	f043 0304 	orr.w	r3, r3, #4
 8001a9a:	6213      	str	r3, [r2, #32]
 8001a9c:	4b5e      	ldr	r3, [pc, #376]	@ (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	4a5d      	ldr	r2, [pc, #372]	@ (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	6213      	str	r3, [r2, #32]
 8001aa8:	e00b      	b.n	8001ac2 <HAL_RCC_OscConfig+0x36e>
 8001aaa:	4b5b      	ldr	r3, [pc, #364]	@ (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	4a5a      	ldr	r2, [pc, #360]	@ (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001ab0:	f023 0301 	bic.w	r3, r3, #1
 8001ab4:	6213      	str	r3, [r2, #32]
 8001ab6:	4b58      	ldr	r3, [pc, #352]	@ (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001ab8:	6a1b      	ldr	r3, [r3, #32]
 8001aba:	4a57      	ldr	r2, [pc, #348]	@ (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001abc:	f023 0304 	bic.w	r3, r3, #4
 8001ac0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d015      	beq.n	8001af6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aca:	f7fe fedb 	bl	8000884 <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad0:	e00a      	b.n	8001ae8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad2:	f7fe fed7 	bl	8000884 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e0b1      	b.n	8001c4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae8:	4b4b      	ldr	r3, [pc, #300]	@ (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0ee      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x37e>
 8001af4:	e014      	b.n	8001b20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af6:	f7fe fec5 	bl	8000884 <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001afc:	e00a      	b.n	8001b14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001afe:	f7fe fec1 	bl	8000884 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e09b      	b.n	8001c4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b14:	4b40      	ldr	r3, [pc, #256]	@ (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1ee      	bne.n	8001afe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b20:	7dfb      	ldrb	r3, [r7, #23]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d105      	bne.n	8001b32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b26:	4b3c      	ldr	r3, [pc, #240]	@ (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	4a3b      	ldr	r2, [pc, #236]	@ (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001b2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 8087 	beq.w	8001c4a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b3c:	4b36      	ldr	r3, [pc, #216]	@ (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 030c 	and.w	r3, r3, #12
 8001b44:	2b08      	cmp	r3, #8
 8001b46:	d061      	beq.n	8001c0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d146      	bne.n	8001bde <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b50:	4b33      	ldr	r3, [pc, #204]	@ (8001c20 <HAL_RCC_OscConfig+0x4cc>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b56:	f7fe fe95 	bl	8000884 <HAL_GetTick>
 8001b5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b5c:	e008      	b.n	8001b70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b5e:	f7fe fe91 	bl	8000884 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e06d      	b.n	8001c4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b70:	4b29      	ldr	r3, [pc, #164]	@ (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1f0      	bne.n	8001b5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b84:	d108      	bne.n	8001b98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b86:	4b24      	ldr	r3, [pc, #144]	@ (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	4921      	ldr	r1, [pc, #132]	@ (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b98:	4b1f      	ldr	r3, [pc, #124]	@ (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a19      	ldr	r1, [r3, #32]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba8:	430b      	orrs	r3, r1
 8001baa:	491b      	ldr	r1, [pc, #108]	@ (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c20 <HAL_RCC_OscConfig+0x4cc>)
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb6:	f7fe fe65 	bl	8000884 <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bbe:	f7fe fe61 	bl	8000884 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e03d      	b.n	8001c4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bd0:	4b11      	ldr	r3, [pc, #68]	@ (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0f0      	beq.n	8001bbe <HAL_RCC_OscConfig+0x46a>
 8001bdc:	e035      	b.n	8001c4a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bde:	4b10      	ldr	r3, [pc, #64]	@ (8001c20 <HAL_RCC_OscConfig+0x4cc>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be4:	f7fe fe4e 	bl	8000884 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bec:	f7fe fe4a 	bl	8000884 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e026      	b.n	8001c4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bfe:	4b06      	ldr	r3, [pc, #24]	@ (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f0      	bne.n	8001bec <HAL_RCC_OscConfig+0x498>
 8001c0a:	e01e      	b.n	8001c4a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	69db      	ldr	r3, [r3, #28]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d107      	bne.n	8001c24 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e019      	b.n	8001c4c <HAL_RCC_OscConfig+0x4f8>
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40007000 	.word	0x40007000
 8001c20:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c24:	4b0b      	ldr	r3, [pc, #44]	@ (8001c54 <HAL_RCC_OscConfig+0x500>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d106      	bne.n	8001c46 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d001      	beq.n	8001c4a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e000      	b.n	8001c4c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40021000 	.word	0x40021000

08001c58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e0d0      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c6c:	4b6a      	ldr	r3, [pc, #424]	@ (8001e18 <HAL_RCC_ClockConfig+0x1c0>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d910      	bls.n	8001c9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7a:	4b67      	ldr	r3, [pc, #412]	@ (8001e18 <HAL_RCC_ClockConfig+0x1c0>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f023 0207 	bic.w	r2, r3, #7
 8001c82:	4965      	ldr	r1, [pc, #404]	@ (8001e18 <HAL_RCC_ClockConfig+0x1c0>)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8a:	4b63      	ldr	r3, [pc, #396]	@ (8001e18 <HAL_RCC_ClockConfig+0x1c0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d001      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e0b8      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d020      	beq.n	8001cea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d005      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cb4:	4b59      	ldr	r3, [pc, #356]	@ (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	4a58      	ldr	r2, [pc, #352]	@ (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001cba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001cbe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0308 	and.w	r3, r3, #8
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d005      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ccc:	4b53      	ldr	r3, [pc, #332]	@ (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	4a52      	ldr	r2, [pc, #328]	@ (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001cd2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001cd6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd8:	4b50      	ldr	r3, [pc, #320]	@ (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	494d      	ldr	r1, [pc, #308]	@ (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d040      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d107      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfe:	4b47      	ldr	r3, [pc, #284]	@ (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d115      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e07f      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d107      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d16:	4b41      	ldr	r3, [pc, #260]	@ (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d109      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e073      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d26:	4b3d      	ldr	r3, [pc, #244]	@ (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e06b      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d36:	4b39      	ldr	r3, [pc, #228]	@ (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f023 0203 	bic.w	r2, r3, #3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	4936      	ldr	r1, [pc, #216]	@ (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d48:	f7fe fd9c 	bl	8000884 <HAL_GetTick>
 8001d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4e:	e00a      	b.n	8001d66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d50:	f7fe fd98 	bl	8000884 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e053      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d66:	4b2d      	ldr	r3, [pc, #180]	@ (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 020c 	and.w	r2, r3, #12
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d1eb      	bne.n	8001d50 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d78:	4b27      	ldr	r3, [pc, #156]	@ (8001e18 <HAL_RCC_ClockConfig+0x1c0>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d210      	bcs.n	8001da8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d86:	4b24      	ldr	r3, [pc, #144]	@ (8001e18 <HAL_RCC_ClockConfig+0x1c0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f023 0207 	bic.w	r2, r3, #7
 8001d8e:	4922      	ldr	r1, [pc, #136]	@ (8001e18 <HAL_RCC_ClockConfig+0x1c0>)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d96:	4b20      	ldr	r3, [pc, #128]	@ (8001e18 <HAL_RCC_ClockConfig+0x1c0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d001      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e032      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d008      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001db4:	4b19      	ldr	r3, [pc, #100]	@ (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	4916      	ldr	r1, [pc, #88]	@ (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0308 	and.w	r3, r3, #8
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d009      	beq.n	8001de6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dd2:	4b12      	ldr	r3, [pc, #72]	@ (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	490e      	ldr	r1, [pc, #56]	@ (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001de6:	f000 f821 	bl	8001e2c <HAL_RCC_GetSysClockFreq>
 8001dea:	4602      	mov	r2, r0
 8001dec:	4b0b      	ldr	r3, [pc, #44]	@ (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	091b      	lsrs	r3, r3, #4
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	490a      	ldr	r1, [pc, #40]	@ (8001e20 <HAL_RCC_ClockConfig+0x1c8>)
 8001df8:	5ccb      	ldrb	r3, [r1, r3]
 8001dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8001dfe:	4a09      	ldr	r2, [pc, #36]	@ (8001e24 <HAL_RCC_ClockConfig+0x1cc>)
 8001e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e02:	4b09      	ldr	r3, [pc, #36]	@ (8001e28 <HAL_RCC_ClockConfig+0x1d0>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe fcfa 	bl	8000800 <HAL_InitTick>

  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40022000 	.word	0x40022000
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	08004f30 	.word	0x08004f30
 8001e24:	20000000 	.word	0x20000000
 8001e28:	20000004 	.word	0x20000004

08001e2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b087      	sub	sp, #28
 8001e30:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	2300      	movs	r3, #0
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	2300      	movs	r3, #0
 8001e40:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e46:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	d002      	beq.n	8001e5c <HAL_RCC_GetSysClockFreq+0x30>
 8001e56:	2b08      	cmp	r3, #8
 8001e58:	d003      	beq.n	8001e62 <HAL_RCC_GetSysClockFreq+0x36>
 8001e5a:	e027      	b.n	8001eac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e5c:	4b19      	ldr	r3, [pc, #100]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e5e:	613b      	str	r3, [r7, #16]
      break;
 8001e60:	e027      	b.n	8001eb2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	0c9b      	lsrs	r3, r3, #18
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	4a17      	ldr	r2, [pc, #92]	@ (8001ec8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e6c:	5cd3      	ldrb	r3, [r2, r3]
 8001e6e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d010      	beq.n	8001e9c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e7a:	4b11      	ldr	r3, [pc, #68]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	0c5b      	lsrs	r3, r3, #17
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	4a11      	ldr	r2, [pc, #68]	@ (8001ecc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e86:	5cd3      	ldrb	r3, [r2, r3]
 8001e88:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e8e:	fb03 f202 	mul.w	r2, r3, r2
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e98:	617b      	str	r3, [r7, #20]
 8001e9a:	e004      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a0c      	ldr	r2, [pc, #48]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ea0:	fb02 f303 	mul.w	r3, r2, r3
 8001ea4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	613b      	str	r3, [r7, #16]
      break;
 8001eaa:	e002      	b.n	8001eb2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001eac:	4b05      	ldr	r3, [pc, #20]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001eae:	613b      	str	r3, [r7, #16]
      break;
 8001eb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eb2:	693b      	ldr	r3, [r7, #16]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	371c      	adds	r7, #28
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	007a1200 	.word	0x007a1200
 8001ec8:	08004f48 	.word	0x08004f48
 8001ecc:	08004f58 	.word	0x08004f58
 8001ed0:	003d0900 	.word	0x003d0900

08001ed4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ed8:	4b02      	ldr	r3, [pc, #8]	@ (8001ee4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001eda:	681b      	ldr	r3, [r3, #0]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr
 8001ee4:	20000000 	.word	0x20000000

08001ee8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001eec:	f7ff fff2 	bl	8001ed4 <HAL_RCC_GetHCLKFreq>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	4b05      	ldr	r3, [pc, #20]	@ (8001f08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	0a1b      	lsrs	r3, r3, #8
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	4903      	ldr	r1, [pc, #12]	@ (8001f0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001efe:	5ccb      	ldrb	r3, [r1, r3]
 8001f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	08004f40 	.word	0x08004f40

08001f10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f18:	4b0a      	ldr	r3, [pc, #40]	@ (8001f44 <RCC_Delay+0x34>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a0a      	ldr	r2, [pc, #40]	@ (8001f48 <RCC_Delay+0x38>)
 8001f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f22:	0a5b      	lsrs	r3, r3, #9
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	fb02 f303 	mul.w	r3, r2, r3
 8001f2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f2c:	bf00      	nop
  }
  while (Delay --);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	1e5a      	subs	r2, r3, #1
 8001f32:	60fa      	str	r2, [r7, #12]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1f9      	bne.n	8001f2c <RCC_Delay+0x1c>
}
 8001f38:	bf00      	nop
 8001f3a:	bf00      	nop
 8001f3c:	3714      	adds	r7, #20
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr
 8001f44:	20000000 	.word	0x20000000
 8001f48:	10624dd3 	.word	0x10624dd3

08001f4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e041      	b.n	8001fe2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d106      	bne.n	8001f78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7fe fb60 	bl	8000638 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3304      	adds	r3, #4
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	f000 fb76 	bl	800267c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
	...

08001fec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d001      	beq.n	8002004 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e03a      	b.n	800207a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2202      	movs	r2, #2
 8002008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0201 	orr.w	r2, r2, #1
 800201a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a18      	ldr	r2, [pc, #96]	@ (8002084 <HAL_TIM_Base_Start_IT+0x98>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d00e      	beq.n	8002044 <HAL_TIM_Base_Start_IT+0x58>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800202e:	d009      	beq.n	8002044 <HAL_TIM_Base_Start_IT+0x58>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a14      	ldr	r2, [pc, #80]	@ (8002088 <HAL_TIM_Base_Start_IT+0x9c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d004      	beq.n	8002044 <HAL_TIM_Base_Start_IT+0x58>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a13      	ldr	r2, [pc, #76]	@ (800208c <HAL_TIM_Base_Start_IT+0xa0>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d111      	bne.n	8002068 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2b06      	cmp	r3, #6
 8002054:	d010      	beq.n	8002078 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f042 0201 	orr.w	r2, r2, #1
 8002064:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002066:	e007      	b.n	8002078 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 0201 	orr.w	r2, r2, #1
 8002076:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3714      	adds	r7, #20
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr
 8002084:	40012c00 	.word	0x40012c00
 8002088:	40000400 	.word	0x40000400
 800208c:	40000800 	.word	0x40000800

08002090 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e041      	b.n	8002126 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d106      	bne.n	80020bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f839 	bl	800212e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2202      	movs	r2, #2
 80020c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3304      	adds	r3, #4
 80020cc:	4619      	mov	r1, r3
 80020ce:	4610      	mov	r0, r2
 80020d0:	f000 fad4 	bl	800267c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr

08002140 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d020      	beq.n	80021a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d01b      	beq.n	80021a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f06f 0202 	mvn.w	r2, #2
 8002174:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 fa5a 	bl	8002644 <HAL_TIM_IC_CaptureCallback>
 8002190:	e005      	b.n	800219e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 fa4d 	bl	8002632 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 fa5c 	bl	8002656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	f003 0304 	and.w	r3, r3, #4
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d020      	beq.n	80021f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d01b      	beq.n	80021f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f06f 0204 	mvn.w	r2, #4
 80021c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2202      	movs	r2, #2
 80021c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 fa34 	bl	8002644 <HAL_TIM_IC_CaptureCallback>
 80021dc:	e005      	b.n	80021ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 fa27 	bl	8002632 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 fa36 	bl	8002656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	f003 0308 	and.w	r3, r3, #8
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d020      	beq.n	800223c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f003 0308 	and.w	r3, r3, #8
 8002200:	2b00      	cmp	r3, #0
 8002202:	d01b      	beq.n	800223c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f06f 0208 	mvn.w	r2, #8
 800220c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2204      	movs	r2, #4
 8002212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	f003 0303 	and.w	r3, r3, #3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 fa0e 	bl	8002644 <HAL_TIM_IC_CaptureCallback>
 8002228:	e005      	b.n	8002236 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 fa01 	bl	8002632 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 fa10 	bl	8002656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	f003 0310 	and.w	r3, r3, #16
 8002242:	2b00      	cmp	r3, #0
 8002244:	d020      	beq.n	8002288 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f003 0310 	and.w	r3, r3, #16
 800224c:	2b00      	cmp	r3, #0
 800224e:	d01b      	beq.n	8002288 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f06f 0210 	mvn.w	r2, #16
 8002258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2208      	movs	r2, #8
 800225e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f9e8 	bl	8002644 <HAL_TIM_IC_CaptureCallback>
 8002274:	e005      	b.n	8002282 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 f9db 	bl	8002632 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 f9ea 	bl	8002656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00c      	beq.n	80022ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	2b00      	cmp	r3, #0
 800229a:	d007      	beq.n	80022ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f06f 0201 	mvn.w	r2, #1
 80022a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7fd ff50 	bl	800014c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00c      	beq.n	80022d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d007      	beq.n	80022d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80022c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 fcc9 	bl	8002c62 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00c      	beq.n	80022f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d007      	beq.n	80022f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80022ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f9ba 	bl	8002668 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	f003 0320 	and.w	r3, r3, #32
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00c      	beq.n	8002318 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f003 0320 	and.w	r3, r3, #32
 8002304:	2b00      	cmp	r3, #0
 8002306:	d007      	beq.n	8002318 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f06f 0220 	mvn.w	r2, #32
 8002310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 fc9c 	bl	8002c50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002318:	bf00      	nop
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800232c:	2300      	movs	r3, #0
 800232e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002336:	2b01      	cmp	r3, #1
 8002338:	d101      	bne.n	800233e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800233a:	2302      	movs	r3, #2
 800233c:	e0ae      	b.n	800249c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b0c      	cmp	r3, #12
 800234a:	f200 809f 	bhi.w	800248c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800234e:	a201      	add	r2, pc, #4	@ (adr r2, 8002354 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002354:	08002389 	.word	0x08002389
 8002358:	0800248d 	.word	0x0800248d
 800235c:	0800248d 	.word	0x0800248d
 8002360:	0800248d 	.word	0x0800248d
 8002364:	080023c9 	.word	0x080023c9
 8002368:	0800248d 	.word	0x0800248d
 800236c:	0800248d 	.word	0x0800248d
 8002370:	0800248d 	.word	0x0800248d
 8002374:	0800240b 	.word	0x0800240b
 8002378:	0800248d 	.word	0x0800248d
 800237c:	0800248d 	.word	0x0800248d
 8002380:	0800248d 	.word	0x0800248d
 8002384:	0800244b 	.word	0x0800244b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68b9      	ldr	r1, [r7, #8]
 800238e:	4618      	mov	r0, r3
 8002390:	f000 f9e2 	bl	8002758 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	699a      	ldr	r2, [r3, #24]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 0208 	orr.w	r2, r2, #8
 80023a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	699a      	ldr	r2, [r3, #24]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0204 	bic.w	r2, r2, #4
 80023b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6999      	ldr	r1, [r3, #24]
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	691a      	ldr	r2, [r3, #16]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	619a      	str	r2, [r3, #24]
      break;
 80023c6:	e064      	b.n	8002492 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68b9      	ldr	r1, [r7, #8]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f000 fa28 	bl	8002824 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	699a      	ldr	r2, [r3, #24]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	699a      	ldr	r2, [r3, #24]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6999      	ldr	r1, [r3, #24]
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	021a      	lsls	r2, r3, #8
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	430a      	orrs	r2, r1
 8002406:	619a      	str	r2, [r3, #24]
      break;
 8002408:	e043      	b.n	8002492 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68b9      	ldr	r1, [r7, #8]
 8002410:	4618      	mov	r0, r3
 8002412:	f000 fa71 	bl	80028f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	69da      	ldr	r2, [r3, #28]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f042 0208 	orr.w	r2, r2, #8
 8002424:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	69da      	ldr	r2, [r3, #28]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0204 	bic.w	r2, r2, #4
 8002434:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	69d9      	ldr	r1, [r3, #28]
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	691a      	ldr	r2, [r3, #16]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	430a      	orrs	r2, r1
 8002446:	61da      	str	r2, [r3, #28]
      break;
 8002448:	e023      	b.n	8002492 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68b9      	ldr	r1, [r7, #8]
 8002450:	4618      	mov	r0, r3
 8002452:	f000 fabb 	bl	80029cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	69da      	ldr	r2, [r3, #28]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002464:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	69da      	ldr	r2, [r3, #28]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002474:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	69d9      	ldr	r1, [r3, #28]
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	021a      	lsls	r2, r3, #8
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	430a      	orrs	r2, r1
 8002488:	61da      	str	r2, [r3, #28]
      break;
 800248a:	e002      	b.n	8002492 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	75fb      	strb	r3, [r7, #23]
      break;
 8002490:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800249a:	7dfb      	ldrb	r3, [r7, #23]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024ae:	2300      	movs	r3, #0
 80024b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d101      	bne.n	80024c0 <HAL_TIM_ConfigClockSource+0x1c>
 80024bc:	2302      	movs	r3, #2
 80024be:	e0b4      	b.n	800262a <HAL_TIM_ConfigClockSource+0x186>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2202      	movs	r2, #2
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80024de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80024e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68ba      	ldr	r2, [r7, #8]
 80024ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024f8:	d03e      	beq.n	8002578 <HAL_TIM_ConfigClockSource+0xd4>
 80024fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024fe:	f200 8087 	bhi.w	8002610 <HAL_TIM_ConfigClockSource+0x16c>
 8002502:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002506:	f000 8086 	beq.w	8002616 <HAL_TIM_ConfigClockSource+0x172>
 800250a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800250e:	d87f      	bhi.n	8002610 <HAL_TIM_ConfigClockSource+0x16c>
 8002510:	2b70      	cmp	r3, #112	@ 0x70
 8002512:	d01a      	beq.n	800254a <HAL_TIM_ConfigClockSource+0xa6>
 8002514:	2b70      	cmp	r3, #112	@ 0x70
 8002516:	d87b      	bhi.n	8002610 <HAL_TIM_ConfigClockSource+0x16c>
 8002518:	2b60      	cmp	r3, #96	@ 0x60
 800251a:	d050      	beq.n	80025be <HAL_TIM_ConfigClockSource+0x11a>
 800251c:	2b60      	cmp	r3, #96	@ 0x60
 800251e:	d877      	bhi.n	8002610 <HAL_TIM_ConfigClockSource+0x16c>
 8002520:	2b50      	cmp	r3, #80	@ 0x50
 8002522:	d03c      	beq.n	800259e <HAL_TIM_ConfigClockSource+0xfa>
 8002524:	2b50      	cmp	r3, #80	@ 0x50
 8002526:	d873      	bhi.n	8002610 <HAL_TIM_ConfigClockSource+0x16c>
 8002528:	2b40      	cmp	r3, #64	@ 0x40
 800252a:	d058      	beq.n	80025de <HAL_TIM_ConfigClockSource+0x13a>
 800252c:	2b40      	cmp	r3, #64	@ 0x40
 800252e:	d86f      	bhi.n	8002610 <HAL_TIM_ConfigClockSource+0x16c>
 8002530:	2b30      	cmp	r3, #48	@ 0x30
 8002532:	d064      	beq.n	80025fe <HAL_TIM_ConfigClockSource+0x15a>
 8002534:	2b30      	cmp	r3, #48	@ 0x30
 8002536:	d86b      	bhi.n	8002610 <HAL_TIM_ConfigClockSource+0x16c>
 8002538:	2b20      	cmp	r3, #32
 800253a:	d060      	beq.n	80025fe <HAL_TIM_ConfigClockSource+0x15a>
 800253c:	2b20      	cmp	r3, #32
 800253e:	d867      	bhi.n	8002610 <HAL_TIM_ConfigClockSource+0x16c>
 8002540:	2b00      	cmp	r3, #0
 8002542:	d05c      	beq.n	80025fe <HAL_TIM_ConfigClockSource+0x15a>
 8002544:	2b10      	cmp	r3, #16
 8002546:	d05a      	beq.n	80025fe <HAL_TIM_ConfigClockSource+0x15a>
 8002548:	e062      	b.n	8002610 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800255a:	f000 fafc 	bl	8002b56 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800256c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	609a      	str	r2, [r3, #8]
      break;
 8002576:	e04f      	b.n	8002618 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002588:	f000 fae5 	bl	8002b56 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800259a:	609a      	str	r2, [r3, #8]
      break;
 800259c:	e03c      	b.n	8002618 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025aa:	461a      	mov	r2, r3
 80025ac:	f000 fa5c 	bl	8002a68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2150      	movs	r1, #80	@ 0x50
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 fab3 	bl	8002b22 <TIM_ITRx_SetConfig>
      break;
 80025bc:	e02c      	b.n	8002618 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025ca:	461a      	mov	r2, r3
 80025cc:	f000 fa7a 	bl	8002ac4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2160      	movs	r1, #96	@ 0x60
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 faa3 	bl	8002b22 <TIM_ITRx_SetConfig>
      break;
 80025dc:	e01c      	b.n	8002618 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025ea:	461a      	mov	r2, r3
 80025ec:	f000 fa3c 	bl	8002a68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2140      	movs	r1, #64	@ 0x40
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 fa93 	bl	8002b22 <TIM_ITRx_SetConfig>
      break;
 80025fc:	e00c      	b.n	8002618 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4619      	mov	r1, r3
 8002608:	4610      	mov	r0, r2
 800260a:	f000 fa8a 	bl	8002b22 <TIM_ITRx_SetConfig>
      break;
 800260e:	e003      	b.n	8002618 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	73fb      	strb	r3, [r7, #15]
      break;
 8002614:	e000      	b.n	8002618 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002616:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002628:	7bfb      	ldrb	r3, [r7, #15]
}
 800262a:	4618      	mov	r0, r3
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002632:	b480      	push	{r7}
 8002634:	b083      	sub	sp, #12
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr

08002644 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr

08002656 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	bc80      	pop	{r7}
 8002666:	4770      	bx	lr

08002668 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr
	...

0800267c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a2f      	ldr	r2, [pc, #188]	@ (800274c <TIM_Base_SetConfig+0xd0>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d00b      	beq.n	80026ac <TIM_Base_SetConfig+0x30>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800269a:	d007      	beq.n	80026ac <TIM_Base_SetConfig+0x30>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a2c      	ldr	r2, [pc, #176]	@ (8002750 <TIM_Base_SetConfig+0xd4>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d003      	beq.n	80026ac <TIM_Base_SetConfig+0x30>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a2b      	ldr	r2, [pc, #172]	@ (8002754 <TIM_Base_SetConfig+0xd8>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d108      	bne.n	80026be <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a22      	ldr	r2, [pc, #136]	@ (800274c <TIM_Base_SetConfig+0xd0>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d00b      	beq.n	80026de <TIM_Base_SetConfig+0x62>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026cc:	d007      	beq.n	80026de <TIM_Base_SetConfig+0x62>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a1f      	ldr	r2, [pc, #124]	@ (8002750 <TIM_Base_SetConfig+0xd4>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d003      	beq.n	80026de <TIM_Base_SetConfig+0x62>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a1e      	ldr	r2, [pc, #120]	@ (8002754 <TIM_Base_SetConfig+0xd8>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d108      	bne.n	80026f0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a0d      	ldr	r2, [pc, #52]	@ (800274c <TIM_Base_SetConfig+0xd0>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d103      	bne.n	8002724 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	691a      	ldr	r2, [r3, #16]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d005      	beq.n	8002742 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	f023 0201 	bic.w	r2, r3, #1
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	611a      	str	r2, [r3, #16]
  }
}
 8002742:	bf00      	nop
 8002744:	3714      	adds	r7, #20
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr
 800274c:	40012c00 	.word	0x40012c00
 8002750:	40000400 	.word	0x40000400
 8002754:	40000800 	.word	0x40000800

08002758 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002758:	b480      	push	{r7}
 800275a:	b087      	sub	sp, #28
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	f023 0201 	bic.w	r2, r3, #1
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f023 0303 	bic.w	r3, r3, #3
 800278e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	4313      	orrs	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f023 0302 	bic.w	r3, r3, #2
 80027a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a1c      	ldr	r2, [pc, #112]	@ (8002820 <TIM_OC1_SetConfig+0xc8>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d10c      	bne.n	80027ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	f023 0308 	bic.w	r3, r3, #8
 80027ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f023 0304 	bic.w	r3, r3, #4
 80027cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a13      	ldr	r2, [pc, #76]	@ (8002820 <TIM_OC1_SetConfig+0xc8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d111      	bne.n	80027fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80027e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	621a      	str	r2, [r3, #32]
}
 8002814:	bf00      	nop
 8002816:	371c      	adds	r7, #28
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40012c00 	.word	0x40012c00

08002824 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002824:	b480      	push	{r7}
 8002826:	b087      	sub	sp, #28
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	f023 0210 	bic.w	r2, r3, #16
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800285a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	021b      	lsls	r3, r3, #8
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	4313      	orrs	r3, r2
 8002866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	f023 0320 	bic.w	r3, r3, #32
 800286e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	011b      	lsls	r3, r3, #4
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	4313      	orrs	r3, r2
 800287a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a1d      	ldr	r2, [pc, #116]	@ (80028f4 <TIM_OC2_SetConfig+0xd0>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d10d      	bne.n	80028a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800288a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	011b      	lsls	r3, r3, #4
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	4313      	orrs	r3, r2
 8002896:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800289e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a14      	ldr	r2, [pc, #80]	@ (80028f4 <TIM_OC2_SetConfig+0xd0>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d113      	bne.n	80028d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80028ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80028b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	621a      	str	r2, [r3, #32]
}
 80028ea:	bf00      	nop
 80028ec:	371c      	adds	r7, #28
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr
 80028f4:	40012c00 	.word	0x40012c00

080028f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b087      	sub	sp, #28
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f023 0303 	bic.w	r3, r3, #3
 800292e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	4313      	orrs	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002940:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	021b      	lsls	r3, r3, #8
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	4313      	orrs	r3, r2
 800294c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a1d      	ldr	r2, [pc, #116]	@ (80029c8 <TIM_OC3_SetConfig+0xd0>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d10d      	bne.n	8002972 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800295c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	021b      	lsls	r3, r3, #8
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	4313      	orrs	r3, r2
 8002968:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002970:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a14      	ldr	r2, [pc, #80]	@ (80029c8 <TIM_OC3_SetConfig+0xd0>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d113      	bne.n	80029a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002980:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002988:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	011b      	lsls	r3, r3, #4
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	4313      	orrs	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	4313      	orrs	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	621a      	str	r2, [r3, #32]
}
 80029bc:	bf00      	nop
 80029be:	371c      	adds	r7, #28
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc80      	pop	{r7}
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40012c00 	.word	0x40012c00

080029cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b087      	sub	sp, #28
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80029fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	021b      	lsls	r3, r3, #8
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002a16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	031b      	lsls	r3, r3, #12
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a0f      	ldr	r2, [pc, #60]	@ (8002a64 <TIM_OC4_SetConfig+0x98>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d109      	bne.n	8002a40 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	019b      	lsls	r3, r3, #6
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	621a      	str	r2, [r3, #32]
}
 8002a5a:	bf00      	nop
 8002a5c:	371c      	adds	r7, #28
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr
 8002a64:	40012c00 	.word	0x40012c00

08002a68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b087      	sub	sp, #28
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	f023 0201 	bic.w	r2, r3, #1
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	f023 030a 	bic.w	r3, r3, #10
 8002aa4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	621a      	str	r2, [r3, #32]
}
 8002aba:	bf00      	nop
 8002abc:	371c      	adds	r7, #28
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b087      	sub	sp, #28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	f023 0210 	bic.w	r2, r3, #16
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002aee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	031b      	lsls	r3, r3, #12
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002b00:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	011b      	lsls	r3, r3, #4
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	621a      	str	r2, [r3, #32]
}
 8002b18:	bf00      	nop
 8002b1a:	371c      	adds	r7, #28
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc80      	pop	{r7}
 8002b20:	4770      	bx	lr

08002b22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b085      	sub	sp, #20
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
 8002b2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	f043 0307 	orr.w	r3, r3, #7
 8002b44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	609a      	str	r2, [r3, #8]
}
 8002b4c:	bf00      	nop
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr

08002b56 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b087      	sub	sp, #28
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	60f8      	str	r0, [r7, #12]
 8002b5e:	60b9      	str	r1, [r7, #8]
 8002b60:	607a      	str	r2, [r7, #4]
 8002b62:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b70:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	021a      	lsls	r2, r3, #8
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	609a      	str	r2, [r3, #8]
}
 8002b8a:	bf00      	nop
 8002b8c:	371c      	adds	r7, #28
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr

08002b94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d101      	bne.n	8002bac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ba8:	2302      	movs	r3, #2
 8002baa:	e046      	b.n	8002c3a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a16      	ldr	r2, [pc, #88]	@ (8002c44 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d00e      	beq.n	8002c0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bf8:	d009      	beq.n	8002c0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a12      	ldr	r2, [pc, #72]	@ (8002c48 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d004      	beq.n	8002c0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a10      	ldr	r2, [pc, #64]	@ (8002c4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d10c      	bne.n	8002c28 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3714      	adds	r7, #20
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr
 8002c44:	40012c00 	.word	0x40012c00
 8002c48:	40000400 	.word	0x40000400
 8002c4c:	40000800 	.word	0x40000800

08002c50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr

08002c62 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr

08002c74 <AlarmStateAction>:
		}
	}
	return alarmon;
}

void AlarmStateAction(volatile stAlarm *AlarmData, uint8_t *NumOfIcon) {
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
	DispAlarmLine(AlarmData, &Alarmline, &AlarmPos);
 8002c7e:	4a1d      	ldr	r2, [pc, #116]	@ (8002cf4 <AlarmStateAction+0x80>)
 8002c80:	491d      	ldr	r1, [pc, #116]	@ (8002cf8 <AlarmStateAction+0x84>)
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 feaa 	bl	80039dc <DispAlarmLine>

	uint8_t ii = 0, on = 0;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	73fb      	strb	r3, [r7, #15]
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	73bb      	strb	r3, [r7, #14]
	for (ii = 0; ii< 4; ii++)
 8002c90:	2300      	movs	r3, #0
 8002c92:	73fb      	strb	r3, [r7, #15]
 8002c94:	e011      	b.n	8002cba <AlarmStateAction+0x46>
	{
	  if ((AlarmData+ii)->enable) on++;
 8002c96:	7bfa      	ldrb	r2, [r7, #15]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	4413      	add	r3, r2
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	795b      	ldrb	r3, [r3, #5]
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <AlarmStateAction+0x40>
 8002cae:	7bbb      	ldrb	r3, [r7, #14]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	73bb      	strb	r3, [r7, #14]
	for (ii = 0; ii< 4; ii++)
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	73fb      	strb	r3, [r7, #15]
 8002cba:	7bfb      	ldrb	r3, [r7, #15]
 8002cbc:	2b03      	cmp	r3, #3
 8002cbe:	d9ea      	bls.n	8002c96 <AlarmStateAction+0x22>
	}
	if (on) *NumOfIcon |= IAlarm;
 8002cc0:	7bbb      	ldrb	r3, [r7, #14]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d007      	beq.n	8002cd6 <AlarmStateAction+0x62>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	f043 0304 	orr.w	r3, r3, #4
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	701a      	strb	r2, [r3, #0]
 8002cd4:	e006      	b.n	8002ce4 <AlarmStateAction+0x70>
	else *NumOfIcon &=~ IAlarm;
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	f023 0304 	bic.w	r3, r3, #4
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	701a      	strb	r2, [r3, #0]

	DispTopRightIcon(NumOfIcon);
 8002ce4:	6838      	ldr	r0, [r7, #0]
 8002ce6:	f001 f89f 	bl	8003e28 <DispTopRightIcon>
}
 8002cea:	bf00      	nop
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20000124 	.word	0x20000124
 8002cf8:	20000009 	.word	0x20000009

08002cfc <AlarmState>:

uint8_t AlarmState(volatile stAlarm astAlarm[5], stButton *btnPush, stButton *btnUp, stButton *btnDown) {
 8002cfc:	b480      	push	{r7}
 8002cfe:	b087      	sub	sp, #28
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
 8002d08:	603b      	str	r3, [r7, #0]
	switch (AlarmPos) {
 8002d0a:	4baa      	ldr	r3, [pc, #680]	@ (8002fb4 <AlarmState+0x2b8>)
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	2b0b      	cmp	r3, #11
 8002d10:	f200 82fd 	bhi.w	800330e <AlarmState+0x612>
 8002d14:	a201      	add	r2, pc, #4	@ (adr r2, 8002d1c <AlarmState+0x20>)
 8002d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1a:	bf00      	nop
 8002d1c:	08002d4d 	.word	0x08002d4d
 8002d20:	08002db5 	.word	0x08002db5
 8002d24:	08002e0b 	.word	0x08002e0b
 8002d28:	08002eed 	.word	0x08002eed
 8002d2c:	08002fc1 	.word	0x08002fc1
 8002d30:	08003087 	.word	0x08003087
 8002d34:	080030dd 	.word	0x080030dd
 8002d38:	08003133 	.word	0x08003133
 8002d3c:	08003189 	.word	0x08003189
 8002d40:	080031df 	.word	0x080031df
 8002d44:	0800323d 	.word	0x0800323d
 8002d48:	08003291 	.word	0x08003291
		case APNull:
			if (btnDown->rising) {
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	785b      	ldrb	r3, [r3, #1]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00c      	beq.n	8002d6e <AlarmState+0x72>
				Alarmline++;
 8002d54:	4b98      	ldr	r3, [pc, #608]	@ (8002fb8 <AlarmState+0x2bc>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	4b96      	ldr	r3, [pc, #600]	@ (8002fb8 <AlarmState+0x2bc>)
 8002d5e:	701a      	strb	r2, [r3, #0]
				if (Alarmline > AlarmBack)	Alarmline = AlarmLine1;
 8002d60:	4b95      	ldr	r3, [pc, #596]	@ (8002fb8 <AlarmState+0x2bc>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b06      	cmp	r3, #6
 8002d66:	d902      	bls.n	8002d6e <AlarmState+0x72>
 8002d68:	4b93      	ldr	r3, [pc, #588]	@ (8002fb8 <AlarmState+0x2bc>)
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	701a      	strb	r2, [r3, #0]
			}
			if (btnUp->rising) {
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	785b      	ldrb	r3, [r3, #1]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00c      	beq.n	8002d90 <AlarmState+0x94>
		        Alarmline--;
 8002d76:	4b90      	ldr	r3, [pc, #576]	@ (8002fb8 <AlarmState+0x2bc>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	4b8e      	ldr	r3, [pc, #568]	@ (8002fb8 <AlarmState+0x2bc>)
 8002d80:	701a      	strb	r2, [r3, #0]
				if (Alarmline < AlarmLine1)	Alarmline = AlarmBack;
 8002d82:	4b8d      	ldr	r3, [pc, #564]	@ (8002fb8 <AlarmState+0x2bc>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d102      	bne.n	8002d90 <AlarmState+0x94>
 8002d8a:	4b8b      	ldr	r3, [pc, #556]	@ (8002fb8 <AlarmState+0x2bc>)
 8002d8c:	2206      	movs	r2, #6
 8002d8e:	701a      	strb	r2, [r3, #0]
			}
			if (btnPush->rising) {
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	785b      	ldrb	r3, [r3, #1]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 82a5 	beq.w	80032e4 <AlarmState+0x5e8>
				if (Alarmline == AlarmBack) {
 8002d9a:	4b87      	ldr	r3, [pc, #540]	@ (8002fb8 <AlarmState+0x2bc>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	2b06      	cmp	r3, #6
 8002da0:	d104      	bne.n	8002dac <AlarmState+0xb0>
					Alarmline = AlarmLine1;
 8002da2:	4b85      	ldr	r3, [pc, #532]	@ (8002fb8 <AlarmState+0x2bc>)
 8002da4:	2201      	movs	r2, #1
 8002da6:	701a      	strb	r2, [r3, #0]
					return BackToMenu;
 8002da8:	2300      	movs	r3, #0
 8002daa:	e2b1      	b.n	8003310 <AlarmState+0x614>
				}
				else AlarmPos = APEnable;
 8002dac:	4b81      	ldr	r3, [pc, #516]	@ (8002fb4 <AlarmState+0x2b8>)
 8002dae:	2201      	movs	r2, #1
 8002db0:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002db2:	e297      	b.n	80032e4 <AlarmState+0x5e8>

		case APEnable:
			if (btnUp->rising || btnDown->rising) astAlarm[Alarmline-1].enable ^= 0x01;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	785b      	ldrb	r3, [r3, #1]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d103      	bne.n	8002dc4 <AlarmState+0xc8>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	785b      	ldrb	r3, [r3, #1]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d019      	beq.n	8002df8 <AlarmState+0xfc>
 8002dc4:	4b7c      	ldr	r3, [pc, #496]	@ (8002fb8 <AlarmState+0x2bc>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	4613      	mov	r3, r2
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	4413      	add	r3, r2
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	3b06      	subs	r3, #6
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	795b      	ldrb	r3, [r3, #5]
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	4b76      	ldr	r3, [pc, #472]	@ (8002fb8 <AlarmState+0x2bc>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	4619      	mov	r1, r3
 8002de2:	460b      	mov	r3, r1
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	440b      	add	r3, r1
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	3b06      	subs	r3, #6
 8002dec:	68f9      	ldr	r1, [r7, #12]
 8002dee:	440b      	add	r3, r1
 8002df0:	f082 0201 	eor.w	r2, r2, #1
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	715a      	strb	r2, [r3, #5]
			if (btnPush->rising) AlarmPos = APHour;
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	785b      	ldrb	r3, [r3, #1]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f000 8273 	beq.w	80032e8 <AlarmState+0x5ec>
 8002e02:	4b6c      	ldr	r3, [pc, #432]	@ (8002fb4 <AlarmState+0x2b8>)
 8002e04:	2202      	movs	r2, #2
 8002e06:	701a      	strb	r2, [r3, #0]
		    break;
 8002e08:	e26e      	b.n	80032e8 <AlarmState+0x5ec>

		case APHour:
			uint8_t AlarmHour = astAlarm[Alarmline-1].hour10 * 10 + astAlarm[Alarmline-1].hour;
 8002e0a:	4b6b      	ldr	r3, [pc, #428]	@ (8002fb8 <AlarmState+0x2bc>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	4613      	mov	r3, r2
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	4413      	add	r3, r2
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	3b06      	subs	r3, #6
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	461a      	mov	r2, r3
 8002e24:	0092      	lsls	r2, r2, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	4b62      	ldr	r3, [pc, #392]	@ (8002fb8 <AlarmState+0x2bc>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	4619      	mov	r1, r3
 8002e32:	460b      	mov	r3, r1
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	440b      	add	r3, r1
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	3b06      	subs	r3, #6
 8002e3c:	68f9      	ldr	r1, [r7, #12]
 8002e3e:	440b      	add	r3, r1
 8002e40:	785b      	ldrb	r3, [r3, #1]
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	4413      	add	r3, r2
 8002e46:	75fb      	strb	r3, [r7, #23]
			if (btnUp->rising) 		AlarmHour ++;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	785b      	ldrb	r3, [r3, #1]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d002      	beq.n	8002e56 <AlarmState+0x15a>
 8002e50:	7dfb      	ldrb	r3, [r7, #23]
 8002e52:	3301      	adds	r3, #1
 8002e54:	75fb      	strb	r3, [r7, #23]
			if (btnDown->rising) 	AlarmHour --;
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	785b      	ldrb	r3, [r3, #1]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <AlarmState+0x168>
 8002e5e:	7dfb      	ldrb	r3, [r7, #23]
 8002e60:	3b01      	subs	r3, #1
 8002e62:	75fb      	strb	r3, [r7, #23]
			if (AlarmHour > 23) 	AlarmHour = 0;
 8002e64:	7dfb      	ldrb	r3, [r7, #23]
 8002e66:	2b17      	cmp	r3, #23
 8002e68:	d901      	bls.n	8002e6e <AlarmState+0x172>
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	75fb      	strb	r3, [r7, #23]
			if (AlarmHour == 0xFF) 	AlarmHour = 23;
 8002e6e:	7dfb      	ldrb	r3, [r7, #23]
 8002e70:	2bff      	cmp	r3, #255	@ 0xff
 8002e72:	d101      	bne.n	8002e78 <AlarmState+0x17c>
 8002e74:	2317      	movs	r3, #23
 8002e76:	75fb      	strb	r3, [r7, #23]
			if (btnPush->rising) 	AlarmPos = APMin10;
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	785b      	ldrb	r3, [r3, #1]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d002      	beq.n	8002e86 <AlarmState+0x18a>
 8002e80:	4b4c      	ldr	r3, [pc, #304]	@ (8002fb4 <AlarmState+0x2b8>)
 8002e82:	2203      	movs	r2, #3
 8002e84:	701a      	strb	r2, [r3, #0]
			astAlarm[Alarmline-1].hour10 = AlarmHour/10;
 8002e86:	4b4c      	ldr	r3, [pc, #304]	@ (8002fb8 <AlarmState+0x2bc>)
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	4413      	add	r3, r2
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	3b06      	subs	r3, #6
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	4413      	add	r3, r2
 8002e9a:	7dfa      	ldrb	r2, [r7, #23]
 8002e9c:	4947      	ldr	r1, [pc, #284]	@ (8002fbc <AlarmState+0x2c0>)
 8002e9e:	fba1 1202 	umull	r1, r2, r1, r2
 8002ea2:	08d2      	lsrs	r2, r2, #3
 8002ea4:	b2d2      	uxtb	r2, r2
 8002ea6:	701a      	strb	r2, [r3, #0]
			astAlarm[Alarmline-1].hour = AlarmHour - astAlarm[Alarmline-1].hour10*10;
 8002ea8:	4b43      	ldr	r3, [pc, #268]	@ (8002fb8 <AlarmState+0x2bc>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	461a      	mov	r2, r3
 8002eae:	4613      	mov	r3, r2
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	4413      	add	r3, r2
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	3b06      	subs	r3, #6
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	4413      	add	r3, r2
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	0152      	lsls	r2, r2, #5
 8002ec4:	1ad2      	subs	r2, r2, r3
 8002ec6:	0092      	lsls	r2, r2, #2
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	b2d9      	uxtb	r1, r3
 8002ece:	4b3a      	ldr	r3, [pc, #232]	@ (8002fb8 <AlarmState+0x2bc>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	4413      	add	r3, r2
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	3b06      	subs	r3, #6
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	7dfa      	ldrb	r2, [r7, #23]
 8002ee4:	440a      	add	r2, r1
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	705a      	strb	r2, [r3, #1]
			break;
 8002eea:	e210      	b.n	800330e <AlarmState+0x612>

		case APMin10:
			if (btnUp->rising) 					astAlarm[Alarmline-1].min10 ++;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	785b      	ldrb	r3, [r3, #1]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00e      	beq.n	8002f12 <AlarmState+0x216>
 8002ef4:	4b30      	ldr	r3, [pc, #192]	@ (8002fb8 <AlarmState+0x2bc>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	461a      	mov	r2, r3
 8002efa:	4613      	mov	r3, r2
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	4413      	add	r3, r2
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	3b06      	subs	r3, #6
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	4413      	add	r3, r2
 8002f08:	789a      	ldrb	r2, [r3, #2]
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	3201      	adds	r2, #1
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	709a      	strb	r2, [r3, #2]
			if (btnDown->rising)				astAlarm[Alarmline-1].min10 --;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	785b      	ldrb	r3, [r3, #1]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00e      	beq.n	8002f38 <AlarmState+0x23c>
 8002f1a:	4b27      	ldr	r3, [pc, #156]	@ (8002fb8 <AlarmState+0x2bc>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	4613      	mov	r3, r2
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	4413      	add	r3, r2
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	3b06      	subs	r3, #6
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	789a      	ldrb	r2, [r3, #2]
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	3a01      	subs	r2, #1
 8002f34:	b2d2      	uxtb	r2, r2
 8002f36:	709a      	strb	r2, [r3, #2]
			if (astAlarm[Alarmline-1].min10 > 5) astAlarm[Alarmline-1].min10 = 0;
 8002f38:	4b1f      	ldr	r3, [pc, #124]	@ (8002fb8 <AlarmState+0x2bc>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4613      	mov	r3, r2
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	4413      	add	r3, r2
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	3b06      	subs	r3, #6
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	789b      	ldrb	r3, [r3, #2]
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b05      	cmp	r3, #5
 8002f52:	d90b      	bls.n	8002f6c <AlarmState+0x270>
 8002f54:	4b18      	ldr	r3, [pc, #96]	@ (8002fb8 <AlarmState+0x2bc>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	4413      	add	r3, r2
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	3b06      	subs	r3, #6
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	4413      	add	r3, r2
 8002f68:	2200      	movs	r2, #0
 8002f6a:	709a      	strb	r2, [r3, #2]
			if (astAlarm[Alarmline-1].min10 == 0xFF) astAlarm[Alarmline-1].min10 = 5;
 8002f6c:	4b12      	ldr	r3, [pc, #72]	@ (8002fb8 <AlarmState+0x2bc>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	461a      	mov	r2, r3
 8002f72:	4613      	mov	r3, r2
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	4413      	add	r3, r2
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	3b06      	subs	r3, #6
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	4413      	add	r3, r2
 8002f80:	789b      	ldrb	r3, [r3, #2]
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2bff      	cmp	r3, #255	@ 0xff
 8002f86:	d10b      	bne.n	8002fa0 <AlarmState+0x2a4>
 8002f88:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb8 <AlarmState+0x2bc>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	4613      	mov	r3, r2
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	4413      	add	r3, r2
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	3b06      	subs	r3, #6
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	2205      	movs	r2, #5
 8002f9e:	709a      	strb	r2, [r3, #2]
			if (btnPush->rising) AlarmPos = APMin;
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	785b      	ldrb	r3, [r3, #1]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 81a1 	beq.w	80032ec <AlarmState+0x5f0>
 8002faa:	4b02      	ldr	r3, [pc, #8]	@ (8002fb4 <AlarmState+0x2b8>)
 8002fac:	2204      	movs	r2, #4
 8002fae:	701a      	strb	r2, [r3, #0]
			break;
 8002fb0:	e19c      	b.n	80032ec <AlarmState+0x5f0>
 8002fb2:	bf00      	nop
 8002fb4:	20000124 	.word	0x20000124
 8002fb8:	20000009 	.word	0x20000009
 8002fbc:	cccccccd 	.word	0xcccccccd

		case APMin:
			if (btnUp->rising)					astAlarm[Alarmline-1].min ++;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	785b      	ldrb	r3, [r3, #1]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00e      	beq.n	8002fe6 <AlarmState+0x2ea>
 8002fc8:	4b9a      	ldr	r3, [pc, #616]	@ (8003234 <AlarmState+0x538>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	461a      	mov	r2, r3
 8002fce:	4613      	mov	r3, r2
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	4413      	add	r3, r2
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	3b06      	subs	r3, #6
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	4413      	add	r3, r2
 8002fdc:	78da      	ldrb	r2, [r3, #3]
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	3201      	adds	r2, #1
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	70da      	strb	r2, [r3, #3]
			if (btnDown->rising)				astAlarm[Alarmline-1].min --;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	785b      	ldrb	r3, [r3, #1]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00e      	beq.n	800300c <AlarmState+0x310>
 8002fee:	4b91      	ldr	r3, [pc, #580]	@ (8003234 <AlarmState+0x538>)
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	4413      	add	r3, r2
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	3b06      	subs	r3, #6
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	4413      	add	r3, r2
 8003002:	78da      	ldrb	r2, [r3, #3]
 8003004:	b2d2      	uxtb	r2, r2
 8003006:	3a01      	subs	r2, #1
 8003008:	b2d2      	uxtb	r2, r2
 800300a:	70da      	strb	r2, [r3, #3]
			if (astAlarm[Alarmline-1].min > 9) 	astAlarm[Alarmline-1].min = 0;
 800300c:	4b89      	ldr	r3, [pc, #548]	@ (8003234 <AlarmState+0x538>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	461a      	mov	r2, r3
 8003012:	4613      	mov	r3, r2
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	4413      	add	r3, r2
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	3b06      	subs	r3, #6
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	4413      	add	r3, r2
 8003020:	78db      	ldrb	r3, [r3, #3]
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b09      	cmp	r3, #9
 8003026:	d90b      	bls.n	8003040 <AlarmState+0x344>
 8003028:	4b82      	ldr	r3, [pc, #520]	@ (8003234 <AlarmState+0x538>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	461a      	mov	r2, r3
 800302e:	4613      	mov	r3, r2
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	4413      	add	r3, r2
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	3b06      	subs	r3, #6
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	4413      	add	r3, r2
 800303c:	2200      	movs	r2, #0
 800303e:	70da      	strb	r2, [r3, #3]
			if (astAlarm[Alarmline-1].min == 0xFF) astAlarm[Alarmline-1].min = 9;
 8003040:	4b7c      	ldr	r3, [pc, #496]	@ (8003234 <AlarmState+0x538>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	461a      	mov	r2, r3
 8003046:	4613      	mov	r3, r2
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	4413      	add	r3, r2
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	3b06      	subs	r3, #6
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	4413      	add	r3, r2
 8003054:	78db      	ldrb	r3, [r3, #3]
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2bff      	cmp	r3, #255	@ 0xff
 800305a:	d10b      	bne.n	8003074 <AlarmState+0x378>
 800305c:	4b75      	ldr	r3, [pc, #468]	@ (8003234 <AlarmState+0x538>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	461a      	mov	r2, r3
 8003062:	4613      	mov	r3, r2
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	4413      	add	r3, r2
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	3b06      	subs	r3, #6
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	4413      	add	r3, r2
 8003070:	2209      	movs	r2, #9
 8003072:	70da      	strb	r2, [r3, #3]
			if (btnPush->rising) AlarmPos = APMon;
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	785b      	ldrb	r3, [r3, #1]
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 8139 	beq.w	80032f0 <AlarmState+0x5f4>
 800307e:	4b6e      	ldr	r3, [pc, #440]	@ (8003238 <AlarmState+0x53c>)
 8003080:	2205      	movs	r2, #5
 8003082:	701a      	strb	r2, [r3, #0]
			break;
 8003084:	e134      	b.n	80032f0 <AlarmState+0x5f4>

		case APMon:
			if (btnUp->rising || btnDown->rising)	astAlarm[Alarmline-1].date ^= Monday;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	785b      	ldrb	r3, [r3, #1]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d103      	bne.n	8003096 <AlarmState+0x39a>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	785b      	ldrb	r3, [r3, #1]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d019      	beq.n	80030ca <AlarmState+0x3ce>
 8003096:	4b67      	ldr	r3, [pc, #412]	@ (8003234 <AlarmState+0x538>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	461a      	mov	r2, r3
 800309c:	4613      	mov	r3, r2
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	4413      	add	r3, r2
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	3b06      	subs	r3, #6
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	4413      	add	r3, r2
 80030aa:	791b      	ldrb	r3, [r3, #4]
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	4b61      	ldr	r3, [pc, #388]	@ (8003234 <AlarmState+0x538>)
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	4619      	mov	r1, r3
 80030b4:	460b      	mov	r3, r1
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	440b      	add	r3, r1
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	3b06      	subs	r3, #6
 80030be:	68f9      	ldr	r1, [r7, #12]
 80030c0:	440b      	add	r3, r1
 80030c2:	f082 0240 	eor.w	r2, r2, #64	@ 0x40
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	711a      	strb	r2, [r3, #4]
			if (btnPush->rising) AlarmPos = APTue;
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	785b      	ldrb	r3, [r3, #1]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 8110 	beq.w	80032f4 <AlarmState+0x5f8>
 80030d4:	4b58      	ldr	r3, [pc, #352]	@ (8003238 <AlarmState+0x53c>)
 80030d6:	2206      	movs	r2, #6
 80030d8:	701a      	strb	r2, [r3, #0]
			break;
 80030da:	e10b      	b.n	80032f4 <AlarmState+0x5f8>

		case APTue:
			if (btnUp->rising || btnDown->rising)	astAlarm[Alarmline-1].date ^= Tuesday;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	785b      	ldrb	r3, [r3, #1]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d103      	bne.n	80030ec <AlarmState+0x3f0>
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	785b      	ldrb	r3, [r3, #1]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d019      	beq.n	8003120 <AlarmState+0x424>
 80030ec:	4b51      	ldr	r3, [pc, #324]	@ (8003234 <AlarmState+0x538>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	461a      	mov	r2, r3
 80030f2:	4613      	mov	r3, r2
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	4413      	add	r3, r2
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	3b06      	subs	r3, #6
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	4413      	add	r3, r2
 8003100:	791b      	ldrb	r3, [r3, #4]
 8003102:	b2da      	uxtb	r2, r3
 8003104:	4b4b      	ldr	r3, [pc, #300]	@ (8003234 <AlarmState+0x538>)
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	4619      	mov	r1, r3
 800310a:	460b      	mov	r3, r1
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	440b      	add	r3, r1
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	3b06      	subs	r3, #6
 8003114:	68f9      	ldr	r1, [r7, #12]
 8003116:	440b      	add	r3, r1
 8003118:	f082 0220 	eor.w	r2, r2, #32
 800311c:	b2d2      	uxtb	r2, r2
 800311e:	711a      	strb	r2, [r3, #4]
			if (btnPush->rising) AlarmPos = APWed;
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	785b      	ldrb	r3, [r3, #1]
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 80e7 	beq.w	80032f8 <AlarmState+0x5fc>
 800312a:	4b43      	ldr	r3, [pc, #268]	@ (8003238 <AlarmState+0x53c>)
 800312c:	2207      	movs	r2, #7
 800312e:	701a      	strb	r2, [r3, #0]
			break;
 8003130:	e0e2      	b.n	80032f8 <AlarmState+0x5fc>

		case APWed:
			if (btnUp->rising || btnDown->rising)	astAlarm[Alarmline-1].date ^= Wednesday;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	785b      	ldrb	r3, [r3, #1]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d103      	bne.n	8003142 <AlarmState+0x446>
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	785b      	ldrb	r3, [r3, #1]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d019      	beq.n	8003176 <AlarmState+0x47a>
 8003142:	4b3c      	ldr	r3, [pc, #240]	@ (8003234 <AlarmState+0x538>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	461a      	mov	r2, r3
 8003148:	4613      	mov	r3, r2
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	4413      	add	r3, r2
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	3b06      	subs	r3, #6
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	4413      	add	r3, r2
 8003156:	791b      	ldrb	r3, [r3, #4]
 8003158:	b2da      	uxtb	r2, r3
 800315a:	4b36      	ldr	r3, [pc, #216]	@ (8003234 <AlarmState+0x538>)
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	4619      	mov	r1, r3
 8003160:	460b      	mov	r3, r1
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	440b      	add	r3, r1
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	3b06      	subs	r3, #6
 800316a:	68f9      	ldr	r1, [r7, #12]
 800316c:	440b      	add	r3, r1
 800316e:	f082 0210 	eor.w	r2, r2, #16
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	711a      	strb	r2, [r3, #4]
			if (btnPush->rising) AlarmPos = APThu;
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	785b      	ldrb	r3, [r3, #1]
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 80be 	beq.w	80032fc <AlarmState+0x600>
 8003180:	4b2d      	ldr	r3, [pc, #180]	@ (8003238 <AlarmState+0x53c>)
 8003182:	2208      	movs	r2, #8
 8003184:	701a      	strb	r2, [r3, #0]
			break;
 8003186:	e0b9      	b.n	80032fc <AlarmState+0x600>

		case APThu:
			if (btnUp->rising || btnDown->rising)	astAlarm[Alarmline-1].date ^= Thursday;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	785b      	ldrb	r3, [r3, #1]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d103      	bne.n	8003198 <AlarmState+0x49c>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	785b      	ldrb	r3, [r3, #1]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d019      	beq.n	80031cc <AlarmState+0x4d0>
 8003198:	4b26      	ldr	r3, [pc, #152]	@ (8003234 <AlarmState+0x538>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	461a      	mov	r2, r3
 800319e:	4613      	mov	r3, r2
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	4413      	add	r3, r2
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	3b06      	subs	r3, #6
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	4413      	add	r3, r2
 80031ac:	791b      	ldrb	r3, [r3, #4]
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	4b20      	ldr	r3, [pc, #128]	@ (8003234 <AlarmState+0x538>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	4619      	mov	r1, r3
 80031b6:	460b      	mov	r3, r1
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	440b      	add	r3, r1
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	3b06      	subs	r3, #6
 80031c0:	68f9      	ldr	r1, [r7, #12]
 80031c2:	440b      	add	r3, r1
 80031c4:	f082 0208 	eor.w	r2, r2, #8
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	711a      	strb	r2, [r3, #4]
			if (btnPush->rising) AlarmPos = APFri;
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	785b      	ldrb	r3, [r3, #1]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 8095 	beq.w	8003300 <AlarmState+0x604>
 80031d6:	4b18      	ldr	r3, [pc, #96]	@ (8003238 <AlarmState+0x53c>)
 80031d8:	2209      	movs	r2, #9
 80031da:	701a      	strb	r2, [r3, #0]
			break;
 80031dc:	e090      	b.n	8003300 <AlarmState+0x604>

		case APFri:
			if (btnUp->rising || btnDown->rising)	astAlarm[Alarmline-1].date ^= Friday;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	785b      	ldrb	r3, [r3, #1]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d103      	bne.n	80031ee <AlarmState+0x4f2>
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	785b      	ldrb	r3, [r3, #1]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d019      	beq.n	8003222 <AlarmState+0x526>
 80031ee:	4b11      	ldr	r3, [pc, #68]	@ (8003234 <AlarmState+0x538>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	461a      	mov	r2, r3
 80031f4:	4613      	mov	r3, r2
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	4413      	add	r3, r2
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	3b06      	subs	r3, #6
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	4413      	add	r3, r2
 8003202:	791b      	ldrb	r3, [r3, #4]
 8003204:	b2da      	uxtb	r2, r3
 8003206:	4b0b      	ldr	r3, [pc, #44]	@ (8003234 <AlarmState+0x538>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	4619      	mov	r1, r3
 800320c:	460b      	mov	r3, r1
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	440b      	add	r3, r1
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	3b06      	subs	r3, #6
 8003216:	68f9      	ldr	r1, [r7, #12]
 8003218:	440b      	add	r3, r1
 800321a:	f082 0204 	eor.w	r2, r2, #4
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	711a      	strb	r2, [r3, #4]
			if (btnPush->rising) AlarmPos = APSat;
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	785b      	ldrb	r3, [r3, #1]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d06c      	beq.n	8003304 <AlarmState+0x608>
 800322a:	4b03      	ldr	r3, [pc, #12]	@ (8003238 <AlarmState+0x53c>)
 800322c:	220a      	movs	r2, #10
 800322e:	701a      	strb	r2, [r3, #0]
			break;
 8003230:	e068      	b.n	8003304 <AlarmState+0x608>
 8003232:	bf00      	nop
 8003234:	20000009 	.word	0x20000009
 8003238:	20000124 	.word	0x20000124

		case APSat:
			if (btnUp->rising || btnDown->rising)	astAlarm[Alarmline-1].date ^= Saturday;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	785b      	ldrb	r3, [r3, #1]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d103      	bne.n	800324c <AlarmState+0x550>
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	785b      	ldrb	r3, [r3, #1]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d019      	beq.n	8003280 <AlarmState+0x584>
 800324c:	4b33      	ldr	r3, [pc, #204]	@ (800331c <AlarmState+0x620>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	461a      	mov	r2, r3
 8003252:	4613      	mov	r3, r2
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	4413      	add	r3, r2
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	3b06      	subs	r3, #6
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	4413      	add	r3, r2
 8003260:	791b      	ldrb	r3, [r3, #4]
 8003262:	b2da      	uxtb	r2, r3
 8003264:	4b2d      	ldr	r3, [pc, #180]	@ (800331c <AlarmState+0x620>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	4619      	mov	r1, r3
 800326a:	460b      	mov	r3, r1
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	440b      	add	r3, r1
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	3b06      	subs	r3, #6
 8003274:	68f9      	ldr	r1, [r7, #12]
 8003276:	440b      	add	r3, r1
 8003278:	f082 0202 	eor.w	r2, r2, #2
 800327c:	b2d2      	uxtb	r2, r2
 800327e:	711a      	strb	r2, [r3, #4]
			if (btnPush->rising) AlarmPos = APSun;
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	785b      	ldrb	r3, [r3, #1]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d03f      	beq.n	8003308 <AlarmState+0x60c>
 8003288:	4b25      	ldr	r3, [pc, #148]	@ (8003320 <AlarmState+0x624>)
 800328a:	220b      	movs	r2, #11
 800328c:	701a      	strb	r2, [r3, #0]
			break;
 800328e:	e03b      	b.n	8003308 <AlarmState+0x60c>

		case APSun:
			if (btnUp->rising || btnDown->rising)	astAlarm[Alarmline-1].date ^= Sunday;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	785b      	ldrb	r3, [r3, #1]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d103      	bne.n	80032a0 <AlarmState+0x5a4>
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	785b      	ldrb	r3, [r3, #1]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d019      	beq.n	80032d4 <AlarmState+0x5d8>
 80032a0:	4b1e      	ldr	r3, [pc, #120]	@ (800331c <AlarmState+0x620>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	461a      	mov	r2, r3
 80032a6:	4613      	mov	r3, r2
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	4413      	add	r3, r2
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	3b06      	subs	r3, #6
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	4413      	add	r3, r2
 80032b4:	791b      	ldrb	r3, [r3, #4]
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	4b18      	ldr	r3, [pc, #96]	@ (800331c <AlarmState+0x620>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	4619      	mov	r1, r3
 80032be:	460b      	mov	r3, r1
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	440b      	add	r3, r1
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	3b06      	subs	r3, #6
 80032c8:	68f9      	ldr	r1, [r7, #12]
 80032ca:	440b      	add	r3, r1
 80032cc:	f082 0201 	eor.w	r2, r2, #1
 80032d0:	b2d2      	uxtb	r2, r2
 80032d2:	711a      	strb	r2, [r3, #4]
			if (btnPush->rising) AlarmPos = APNull;
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	785b      	ldrb	r3, [r3, #1]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d017      	beq.n	800330c <AlarmState+0x610>
 80032dc:	4b10      	ldr	r3, [pc, #64]	@ (8003320 <AlarmState+0x624>)
 80032de:	2200      	movs	r2, #0
 80032e0:	701a      	strb	r2, [r3, #0]
			break;
 80032e2:	e013      	b.n	800330c <AlarmState+0x610>
			break;
 80032e4:	bf00      	nop
 80032e6:	e012      	b.n	800330e <AlarmState+0x612>
		    break;
 80032e8:	bf00      	nop
 80032ea:	e010      	b.n	800330e <AlarmState+0x612>
			break;
 80032ec:	bf00      	nop
 80032ee:	e00e      	b.n	800330e <AlarmState+0x612>
			break;
 80032f0:	bf00      	nop
 80032f2:	e00c      	b.n	800330e <AlarmState+0x612>
			break;
 80032f4:	bf00      	nop
 80032f6:	e00a      	b.n	800330e <AlarmState+0x612>
			break;
 80032f8:	bf00      	nop
 80032fa:	e008      	b.n	800330e <AlarmState+0x612>
			break;
 80032fc:	bf00      	nop
 80032fe:	e006      	b.n	800330e <AlarmState+0x612>
			break;
 8003300:	bf00      	nop
 8003302:	e004      	b.n	800330e <AlarmState+0x612>
			break;
 8003304:	bf00      	nop
 8003306:	e002      	b.n	800330e <AlarmState+0x612>
			break;
 8003308:	bf00      	nop
 800330a:	e000      	b.n	800330e <AlarmState+0x612>
			break;
 800330c:	bf00      	nop
	}
	return StayInFunc;
 800330e:	2301      	movs	r3, #1
}
 8003310:	4618      	mov	r0, r3
 8003312:	371c      	adds	r7, #28
 8003314:	46bd      	mov	sp, r7
 8003316:	bc80      	pop	{r7}
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	20000009 	.word	0x20000009
 8003320:	20000124 	.word	0x20000124

08003324 <FlashState>:
/* Global Variables ----------------------------------------------------------*/
uint8_t Flashline = FlashLine1;
uint8_t FlashOn;

/* Private functions ---------------------------------------------------------*/
uint8_t FlashState(stButton *btnPush, stButton *btnUp, stButton *btnDown) {
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
	switch (FlashOn) {
 8003330:	4b35      	ldr	r3, [pc, #212]	@ (8003408 <FlashState+0xe4>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d002      	beq.n	800333e <FlashState+0x1a>
 8003338:	2b01      	cmp	r3, #1
 800333a:	d033      	beq.n	80033a4 <FlashState+0x80>
 800333c:	e05e      	b.n	80033fc <FlashState+0xd8>
		case NO:
			if (btnDown->rising) {
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	785b      	ldrb	r3, [r3, #1]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00c      	beq.n	8003360 <FlashState+0x3c>
				Flashline++;
 8003346:	4b31      	ldr	r3, [pc, #196]	@ (800340c <FlashState+0xe8>)
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	3301      	adds	r3, #1
 800334c:	b2da      	uxtb	r2, r3
 800334e:	4b2f      	ldr	r3, [pc, #188]	@ (800340c <FlashState+0xe8>)
 8003350:	701a      	strb	r2, [r3, #0]
				if (Flashline > FlashBack)	Flashline = FlashLine1;
 8003352:	4b2e      	ldr	r3, [pc, #184]	@ (800340c <FlashState+0xe8>)
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	2b04      	cmp	r3, #4
 8003358:	d902      	bls.n	8003360 <FlashState+0x3c>
 800335a:	4b2c      	ldr	r3, [pc, #176]	@ (800340c <FlashState+0xe8>)
 800335c:	2201      	movs	r2, #1
 800335e:	701a      	strb	r2, [r3, #0]
			}
			if (btnUp->rising) {
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	785b      	ldrb	r3, [r3, #1]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00c      	beq.n	8003382 <FlashState+0x5e>
		        Flashline--;
 8003368:	4b28      	ldr	r3, [pc, #160]	@ (800340c <FlashState+0xe8>)
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	3b01      	subs	r3, #1
 800336e:	b2da      	uxtb	r2, r3
 8003370:	4b26      	ldr	r3, [pc, #152]	@ (800340c <FlashState+0xe8>)
 8003372:	701a      	strb	r2, [r3, #0]
				if (Flashline < FlashLine1)	Flashline = FlashBack;
 8003374:	4b25      	ldr	r3, [pc, #148]	@ (800340c <FlashState+0xe8>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d102      	bne.n	8003382 <FlashState+0x5e>
 800337c:	4b23      	ldr	r3, [pc, #140]	@ (800340c <FlashState+0xe8>)
 800337e:	2204      	movs	r2, #4
 8003380:	701a      	strb	r2, [r3, #0]
			}
			if (btnPush->rising) {
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	785b      	ldrb	r3, [r3, #1]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d037      	beq.n	80033fa <FlashState+0xd6>
				if (Flashline == FlashBack) {
 800338a:	4b20      	ldr	r3, [pc, #128]	@ (800340c <FlashState+0xe8>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b04      	cmp	r3, #4
 8003390:	d104      	bne.n	800339c <FlashState+0x78>
					Flashline = FlashLine1;
 8003392:	4b1e      	ldr	r3, [pc, #120]	@ (800340c <FlashState+0xe8>)
 8003394:	2201      	movs	r2, #1
 8003396:	701a      	strb	r2, [r3, #0]
					return BackToMenu;
 8003398:	2300      	movs	r3, #0
 800339a:	e030      	b.n	80033fe <FlashState+0xda>
				}
				FlashOn = YES;
 800339c:	4b1a      	ldr	r3, [pc, #104]	@ (8003408 <FlashState+0xe4>)
 800339e:	2201      	movs	r2, #1
 80033a0:	701a      	strb	r2, [r3, #0]
			}
			break;
 80033a2:	e02a      	b.n	80033fa <FlashState+0xd6>
		case YES:
			switch (Flashline) {
 80033a4:	4b19      	ldr	r3, [pc, #100]	@ (800340c <FlashState+0xe8>)
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	2b03      	cmp	r3, #3
 80033aa:	d016      	beq.n	80033da <FlashState+0xb6>
 80033ac:	2b03      	cmp	r3, #3
 80033ae:	dc1c      	bgt.n	80033ea <FlashState+0xc6>
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d002      	beq.n	80033ba <FlashState+0x96>
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d008      	beq.n	80033ca <FlashState+0xa6>
					if (btnPush->rising) {
						FlashOn = NO;
					}
					break;
				default:
					break;
 80033b8:	e017      	b.n	80033ea <FlashState+0xc6>
					if (btnPush->rising) {
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	785b      	ldrb	r3, [r3, #1]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d015      	beq.n	80033ee <FlashState+0xca>
						FlashOn = NO;
 80033c2:	4b11      	ldr	r3, [pc, #68]	@ (8003408 <FlashState+0xe4>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	701a      	strb	r2, [r3, #0]
					break;
 80033c8:	e011      	b.n	80033ee <FlashState+0xca>
					if (btnPush->rising) {
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	785b      	ldrb	r3, [r3, #1]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00f      	beq.n	80033f2 <FlashState+0xce>
						FlashOn = NO;
 80033d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003408 <FlashState+0xe4>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	701a      	strb	r2, [r3, #0]
					break;
 80033d8:	e00b      	b.n	80033f2 <FlashState+0xce>
					if (btnPush->rising) {
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	785b      	ldrb	r3, [r3, #1]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d009      	beq.n	80033f6 <FlashState+0xd2>
						FlashOn = NO;
 80033e2:	4b09      	ldr	r3, [pc, #36]	@ (8003408 <FlashState+0xe4>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	701a      	strb	r2, [r3, #0]
					break;
 80033e8:	e005      	b.n	80033f6 <FlashState+0xd2>
					break;
 80033ea:	bf00      	nop
 80033ec:	e006      	b.n	80033fc <FlashState+0xd8>
					break;
 80033ee:	bf00      	nop
 80033f0:	e004      	b.n	80033fc <FlashState+0xd8>
					break;
 80033f2:	bf00      	nop
 80033f4:	e002      	b.n	80033fc <FlashState+0xd8>
					break;
 80033f6:	bf00      	nop
			}
			break;
 80033f8:	e000      	b.n	80033fc <FlashState+0xd8>
			break;
 80033fa:	bf00      	nop
	}
	return StayInFunc;
 80033fc:	2301      	movs	r3, #1
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	bc80      	pop	{r7}
 8003406:	4770      	bx	lr
 8003408:	20000125 	.word	0x20000125
 800340c:	2000000a 	.word	0x2000000a

08003410 <FlastStateAction>:

void FlastStateAction (uint8_t *numOfIcon) {
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
	static uint8_t lastState;
	switch (FlashOn) {
 8003418:	4b19      	ldr	r3, [pc, #100]	@ (8003480 <FlastStateAction+0x70>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d002      	beq.n	8003426 <FlastStateAction+0x16>
 8003420:	2b01      	cmp	r3, #1
 8003422:	d012      	beq.n	800344a <FlastStateAction+0x3a>
					FlashModeSOS();
					break;
			}
			lastState = YES;
	}
}
 8003424:	e028      	b.n	8003478 <FlastStateAction+0x68>
			if (lastState == YES) SolidFill(0x00);
 8003426:	4b17      	ldr	r3, [pc, #92]	@ (8003484 <FlastStateAction+0x74>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d102      	bne.n	8003434 <FlastStateAction+0x24>
 800342e:	2000      	movs	r0, #0
 8003430:	f000 fa01 	bl	8003836 <SolidFill>
			DispFlashLine(&Flashline);
 8003434:	4814      	ldr	r0, [pc, #80]	@ (8003488 <FlastStateAction+0x78>)
 8003436:	f000 fc7d 	bl	8003d34 <DispFlashLine>
			DispTopRightIcon(numOfIcon);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 fcf4 	bl	8003e28 <DispTopRightIcon>
			lastState = NO;
 8003440:	4b10      	ldr	r3, [pc, #64]	@ (8003484 <FlastStateAction+0x74>)
 8003442:	2200      	movs	r2, #0
 8003444:	701a      	strb	r2, [r3, #0]
			break;
 8003446:	bf00      	nop
}
 8003448:	e016      	b.n	8003478 <FlastStateAction+0x68>
			switch (Flashline) {
 800344a:	4b0f      	ldr	r3, [pc, #60]	@ (8003488 <FlastStateAction+0x78>)
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	2b03      	cmp	r3, #3
 8003450:	d00c      	beq.n	800346c <FlastStateAction+0x5c>
 8003452:	2b03      	cmp	r3, #3
 8003454:	dc0d      	bgt.n	8003472 <FlastStateAction+0x62>
 8003456:	2b01      	cmp	r3, #1
 8003458:	d002      	beq.n	8003460 <FlastStateAction+0x50>
 800345a:	2b02      	cmp	r3, #2
 800345c:	d003      	beq.n	8003466 <FlastStateAction+0x56>
 800345e:	e008      	b.n	8003472 <FlastStateAction+0x62>
					FlashModeLight();
 8003460:	f000 fcce 	bl	8003e00 <FlashModeLight>
					break;
 8003464:	e005      	b.n	8003472 <FlastStateAction+0x62>
					FlashModeBlink();
 8003466:	f000 fcd2 	bl	8003e0e <FlashModeBlink>
					break;
 800346a:	e002      	b.n	8003472 <FlastStateAction+0x62>
					FlashModeSOS();
 800346c:	f000 fcd5 	bl	8003e1a <FlashModeSOS>
					break;
 8003470:	bf00      	nop
			lastState = YES;
 8003472:	4b04      	ldr	r3, [pc, #16]	@ (8003484 <FlastStateAction+0x74>)
 8003474:	2201      	movs	r2, #1
 8003476:	701a      	strb	r2, [r3, #0]
}
 8003478:	bf00      	nop
 800347a:	3708      	adds	r7, #8
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	20000125 	.word	0x20000125
 8003484:	20000126 	.word	0x20000126
 8003488:	2000000a 	.word	0x2000000a

0800348c <IdlingStateAction>:
/* Global Variables ----------------------------------------------------------*/


/* Private functions ---------------------------------------------------------*/
void IdlingStateAction (uint8_t *NumberOfIcon, volatile stDispTime *Realtime )
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
	DispTopRightIcon(NumberOfIcon);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 fcc6 	bl	8003e28 <DispTopRightIcon>
    DispBotTime(Realtime, YES);
 800349c:	2101      	movs	r1, #1
 800349e:	6838      	ldr	r0, [r7, #0]
 80034a0:	f000 fd4c 	bl	8003f3c <DispBotTime>
    DispMainTime(Realtime);
 80034a4:	6838      	ldr	r0, [r7, #0]
 80034a6:	f000 fdcf 	bl	8004048 <DispMainTime>
}
 80034aa:	bf00      	nop
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <MenuStateAction>:
/* Global Variables ----------------------------------------------------------*/


/* Private functions ---------------------------------------------------------*/
void MenuStateAction (uint8_t *NumberOfIcon, uint8_t Function, volatile stDispTime *Realtime)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b084      	sub	sp, #16
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	60f8      	str	r0, [r7, #12]
 80034ba:	460b      	mov	r3, r1
 80034bc:	607a      	str	r2, [r7, #4]
 80034be:	72fb      	strb	r3, [r7, #11]
	DispTopRightIcon(NumberOfIcon);
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 fcb1 	bl	8003e28 <DispTopRightIcon>
	DispMenuName(Function);
 80034c6:	7afb      	ldrb	r3, [r7, #11]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f001 f8d1 	bl	8004670 <DispMenuName>
	DispMenuIcon(Function);
 80034ce:	7afb      	ldrb	r3, [r7, #11]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f001 f94f 	bl	8004774 <DispMenuIcon>
	DispBotTime(Realtime, NO);
 80034d6:	2100      	movs	r1, #0
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 fd2f 	bl	8003f3c <DispBotTime>
}
 80034de:	bf00      	nop
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <MainStateMachine>:
stButton btnPush;



/* Private functions ---------------------------------------------------------*/
void MainStateMachine () {
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
	switch (uStateLevel) {
 80034ec:	4b46      	ldr	r3, [pc, #280]	@ (8003608 <MainStateMachine+0x120>)
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d04a      	beq.n	800358a <MainStateMachine+0xa2>
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	f300 8085 	bgt.w	8003604 <MainStateMachine+0x11c>
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d002      	beq.n	8003504 <MainStateMachine+0x1c>
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d00b      	beq.n	800351a <MainStateMachine+0x32>
					//credit state
					break;
			}
			break;
	}
}
 8003502:	e07f      	b.n	8003604 <MainStateMachine+0x11c>
			if (btnPush.rising) {
 8003504:	4b41      	ldr	r3, [pc, #260]	@ (800360c <MainStateMachine+0x124>)
 8003506:	785b      	ldrb	r3, [r3, #1]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d076      	beq.n	80035fa <MainStateMachine+0x112>
				uStateLevel = MenuLevel;
 800350c:	4b3e      	ldr	r3, [pc, #248]	@ (8003608 <MainStateMachine+0x120>)
 800350e:	2201      	movs	r2, #1
 8003510:	701a      	strb	r2, [r3, #0]
				SolidFill(0x00);			//Clear the screen
 8003512:	2000      	movs	r0, #0
 8003514:	f000 f98f 	bl	8003836 <SolidFill>
			break;
 8003518:	e06f      	b.n	80035fa <MainStateMachine+0x112>
			if (btnDown.rising) {
 800351a:	4b3d      	ldr	r3, [pc, #244]	@ (8003610 <MainStateMachine+0x128>)
 800351c:	785b      	ldrb	r3, [r3, #1]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00c      	beq.n	800353c <MainStateMachine+0x54>
				uFuncMenu++;
 8003522:	4b3c      	ldr	r3, [pc, #240]	@ (8003614 <MainStateMachine+0x12c>)
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	3301      	adds	r3, #1
 8003528:	b2da      	uxtb	r2, r3
 800352a:	4b3a      	ldr	r3, [pc, #232]	@ (8003614 <MainStateMachine+0x12c>)
 800352c:	701a      	strb	r2, [r3, #0]
				if (uFuncMenu > BackFunc) uFuncMenu = AlarmFunc;
 800352e:	4b39      	ldr	r3, [pc, #228]	@ (8003614 <MainStateMachine+0x12c>)
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	2b06      	cmp	r3, #6
 8003534:	d902      	bls.n	800353c <MainStateMachine+0x54>
 8003536:	4b37      	ldr	r3, [pc, #220]	@ (8003614 <MainStateMachine+0x12c>)
 8003538:	2201      	movs	r2, #1
 800353a:	701a      	strb	r2, [r3, #0]
			if (btnUp.rising) {
 800353c:	4b36      	ldr	r3, [pc, #216]	@ (8003618 <MainStateMachine+0x130>)
 800353e:	785b      	ldrb	r3, [r3, #1]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00c      	beq.n	800355e <MainStateMachine+0x76>
				uFuncMenu--;
 8003544:	4b33      	ldr	r3, [pc, #204]	@ (8003614 <MainStateMachine+0x12c>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	3b01      	subs	r3, #1
 800354a:	b2da      	uxtb	r2, r3
 800354c:	4b31      	ldr	r3, [pc, #196]	@ (8003614 <MainStateMachine+0x12c>)
 800354e:	701a      	strb	r2, [r3, #0]
				if (uFuncMenu < AlarmFunc) uFuncMenu = BackFunc;
 8003550:	4b30      	ldr	r3, [pc, #192]	@ (8003614 <MainStateMachine+0x12c>)
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d102      	bne.n	800355e <MainStateMachine+0x76>
 8003558:	4b2e      	ldr	r3, [pc, #184]	@ (8003614 <MainStateMachine+0x12c>)
 800355a:	2206      	movs	r2, #6
 800355c:	701a      	strb	r2, [r3, #0]
			if (btnPush.rising) {
 800355e:	4b2b      	ldr	r3, [pc, #172]	@ (800360c <MainStateMachine+0x124>)
 8003560:	785b      	ldrb	r3, [r3, #1]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d04b      	beq.n	80035fe <MainStateMachine+0x116>
				if (uFuncMenu == BackFunc) {
 8003566:	4b2b      	ldr	r3, [pc, #172]	@ (8003614 <MainStateMachine+0x12c>)
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b06      	cmp	r3, #6
 800356c:	d106      	bne.n	800357c <MainStateMachine+0x94>
					uStateLevel = IdlingLevel;
 800356e:	4b26      	ldr	r3, [pc, #152]	@ (8003608 <MainStateMachine+0x120>)
 8003570:	2200      	movs	r2, #0
 8003572:	701a      	strb	r2, [r3, #0]
					uFuncMenu = AlarmFunc;
 8003574:	4b27      	ldr	r3, [pc, #156]	@ (8003614 <MainStateMachine+0x12c>)
 8003576:	2201      	movs	r2, #1
 8003578:	701a      	strb	r2, [r3, #0]
 800357a:	e002      	b.n	8003582 <MainStateMachine+0x9a>
					uStateLevel = FunctionLevel;
 800357c:	4b22      	ldr	r3, [pc, #136]	@ (8003608 <MainStateMachine+0x120>)
 800357e:	2202      	movs	r2, #2
 8003580:	701a      	strb	r2, [r3, #0]
				SolidFill(0x00);			//Clear the screen
 8003582:	2000      	movs	r0, #0
 8003584:	f000 f957 	bl	8003836 <SolidFill>
			break;
 8003588:	e039      	b.n	80035fe <MainStateMachine+0x116>
			switch (uFuncMenu) {
 800358a:	4b22      	ldr	r3, [pc, #136]	@ (8003614 <MainStateMachine+0x12c>)
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	3b01      	subs	r3, #1
 8003590:	2b04      	cmp	r3, #4
 8003592:	d836      	bhi.n	8003602 <MainStateMachine+0x11a>
 8003594:	a201      	add	r2, pc, #4	@ (adr r2, 800359c <MainStateMachine+0xb4>)
 8003596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800359a:	bf00      	nop
 800359c:	080035b1 	.word	0x080035b1
 80035a0:	080035ef 	.word	0x080035ef
 80035a4:	080035d1 	.word	0x080035d1
 80035a8:	080035ef 	.word	0x080035ef
 80035ac:	080035ef 	.word	0x080035ef
					if (!AlarmState(stAlarm1, &btnPush, &btnUp, &btnDown)) {
 80035b0:	4b17      	ldr	r3, [pc, #92]	@ (8003610 <MainStateMachine+0x128>)
 80035b2:	4a19      	ldr	r2, [pc, #100]	@ (8003618 <MainStateMachine+0x130>)
 80035b4:	4915      	ldr	r1, [pc, #84]	@ (800360c <MainStateMachine+0x124>)
 80035b6:	4819      	ldr	r0, [pc, #100]	@ (800361c <MainStateMachine+0x134>)
 80035b8:	f7ff fba0 	bl	8002cfc <AlarmState>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d117      	bne.n	80035f2 <MainStateMachine+0x10a>
						uStateLevel = MenuLevel;
 80035c2:	4b11      	ldr	r3, [pc, #68]	@ (8003608 <MainStateMachine+0x120>)
 80035c4:	2201      	movs	r2, #1
 80035c6:	701a      	strb	r2, [r3, #0]
						SolidFill(0x00);
 80035c8:	2000      	movs	r0, #0
 80035ca:	f000 f934 	bl	8003836 <SolidFill>
					break;
 80035ce:	e010      	b.n	80035f2 <MainStateMachine+0x10a>
					if (!FlashState(&btnPush, &btnUp, &btnDown)) {
 80035d0:	4a0f      	ldr	r2, [pc, #60]	@ (8003610 <MainStateMachine+0x128>)
 80035d2:	4911      	ldr	r1, [pc, #68]	@ (8003618 <MainStateMachine+0x130>)
 80035d4:	480d      	ldr	r0, [pc, #52]	@ (800360c <MainStateMachine+0x124>)
 80035d6:	f7ff fea5 	bl	8003324 <FlashState>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10a      	bne.n	80035f6 <MainStateMachine+0x10e>
						uStateLevel = MenuLevel;
 80035e0:	4b09      	ldr	r3, [pc, #36]	@ (8003608 <MainStateMachine+0x120>)
 80035e2:	2201      	movs	r2, #1
 80035e4:	701a      	strb	r2, [r3, #0]
						SolidFill(0x00);
 80035e6:	2000      	movs	r0, #0
 80035e8:	f000 f925 	bl	8003836 <SolidFill>
					break;
 80035ec:	e003      	b.n	80035f6 <MainStateMachine+0x10e>
					break;
 80035ee:	bf00      	nop
 80035f0:	e007      	b.n	8003602 <MainStateMachine+0x11a>
					break;
 80035f2:	bf00      	nop
 80035f4:	e005      	b.n	8003602 <MainStateMachine+0x11a>
					break;
 80035f6:	bf00      	nop
			break;
 80035f8:	e003      	b.n	8003602 <MainStateMachine+0x11a>
			break;
 80035fa:	bf00      	nop
 80035fc:	e002      	b.n	8003604 <MainStateMachine+0x11c>
			break;
 80035fe:	bf00      	nop
 8003600:	e000      	b.n	8003604 <MainStateMachine+0x11c>
			break;
 8003602:	bf00      	nop
}
 8003604:	bf00      	nop
 8003606:	bd80      	pop	{r7, pc}
 8003608:	20000127 	.word	0x20000127
 800360c:	20000154 	.word	0x20000154
 8003610:	20000150 	.word	0x20000150
 8003614:	2000000b 	.word	0x2000000b
 8003618:	2000014c 	.word	0x2000014c
 800361c:	2000012c 	.word	0x2000012c

08003620 <MainStateAction>:

void MainStateAction () {
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
	switch (uStateLevel) {
 8003624:	4b1a      	ldr	r3, [pc, #104]	@ (8003690 <MainStateAction+0x70>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	2b02      	cmp	r3, #2
 800362a:	d013      	beq.n	8003654 <MainStateAction+0x34>
 800362c:	2b02      	cmp	r3, #2
 800362e:	dc22      	bgt.n	8003676 <MainStateAction+0x56>
 8003630:	2b00      	cmp	r3, #0
 8003632:	d002      	beq.n	800363a <MainStateAction+0x1a>
 8003634:	2b01      	cmp	r3, #1
 8003636:	d005      	beq.n	8003644 <MainStateAction+0x24>
			}

			break;

		default:
			break;
 8003638:	e01d      	b.n	8003676 <MainStateAction+0x56>
			IdlingStateAction(&uNumIcon, &stCurrentTime);
 800363a:	4916      	ldr	r1, [pc, #88]	@ (8003694 <MainStateAction+0x74>)
 800363c:	4816      	ldr	r0, [pc, #88]	@ (8003698 <MainStateAction+0x78>)
 800363e:	f7ff ff25 	bl	800348c <IdlingStateAction>
			break;
 8003642:	e019      	b.n	8003678 <MainStateAction+0x58>
			MenuStateAction(&uNumIcon, uFuncMenu, &stCurrentTime);
 8003644:	4b15      	ldr	r3, [pc, #84]	@ (800369c <MainStateAction+0x7c>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	4a12      	ldr	r2, [pc, #72]	@ (8003694 <MainStateAction+0x74>)
 800364a:	4619      	mov	r1, r3
 800364c:	4812      	ldr	r0, [pc, #72]	@ (8003698 <MainStateAction+0x78>)
 800364e:	f7ff ff30 	bl	80034b2 <MenuStateAction>
			break;
 8003652:	e011      	b.n	8003678 <MainStateAction+0x58>
			switch (uFuncMenu) {
 8003654:	4b11      	ldr	r3, [pc, #68]	@ (800369c <MainStateAction+0x7c>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d002      	beq.n	8003662 <MainStateAction+0x42>
 800365c:	2b03      	cmp	r3, #3
 800365e:	d005      	beq.n	800366c <MainStateAction+0x4c>
			break;
 8003660:	e00a      	b.n	8003678 <MainStateAction+0x58>
					AlarmStateAction(stAlarm1, &uNumIcon);
 8003662:	490d      	ldr	r1, [pc, #52]	@ (8003698 <MainStateAction+0x78>)
 8003664:	480e      	ldr	r0, [pc, #56]	@ (80036a0 <MainStateAction+0x80>)
 8003666:	f7ff fb05 	bl	8002c74 <AlarmStateAction>
					break;
 800366a:	e003      	b.n	8003674 <MainStateAction+0x54>
					FlastStateAction(&uNumIcon);
 800366c:	480a      	ldr	r0, [pc, #40]	@ (8003698 <MainStateAction+0x78>)
 800366e:	f7ff fecf 	bl	8003410 <FlastStateAction>
					break;
 8003672:	bf00      	nop
			break;
 8003674:	e000      	b.n	8003678 <MainStateAction+0x58>
			break;
 8003676:	bf00      	nop
	}

	Button_ExeUp(&btnUp);
 8003678:	480a      	ldr	r0, [pc, #40]	@ (80036a4 <MainStateAction+0x84>)
 800367a:	f001 f98b 	bl	8004994 <Button_ExeUp>
	Button_ExeDown(&btnDown);
 800367e:	480a      	ldr	r0, [pc, #40]	@ (80036a8 <MainStateAction+0x88>)
 8003680:	f001 f9cc 	bl	8004a1c <Button_ExeDown>
	Button_ExePush(&btnPush);
 8003684:	4809      	ldr	r0, [pc, #36]	@ (80036ac <MainStateAction+0x8c>)
 8003686:	f001 f941 	bl	800490c <Button_ExePush>
}
 800368a:	bf00      	nop
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20000127 	.word	0x20000127
 8003694:	2000000c 	.word	0x2000000c
 8003698:	20000128 	.word	0x20000128
 800369c:	2000000b 	.word	0x2000000b
 80036a0:	2000012c 	.word	0x2000012c
 80036a4:	2000014c 	.word	0x2000014c
 80036a8:	20000150 	.word	0x20000150
 80036ac:	20000154 	.word	0x20000154

080036b0 <GotoXP>:
	uint8_t p;
} Pos;

/* Private functions ---------------------------------------------------------*/
void GotoXP (uint8_t x, uint8_t p)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	4603      	mov	r3, r0
 80036b8:	460a      	mov	r2, r1
 80036ba:	71fb      	strb	r3, [r7, #7]
 80036bc:	4613      	mov	r3, r2
 80036be:	71bb      	strb	r3, [r7, #6]
	Pos.x = x;
 80036c0:	4a05      	ldr	r2, [pc, #20]	@ (80036d8 <GotoXP+0x28>)
 80036c2:	79fb      	ldrb	r3, [r7, #7]
 80036c4:	7013      	strb	r3, [r2, #0]
	Pos.p = p;
 80036c6:	4a04      	ldr	r2, [pc, #16]	@ (80036d8 <GotoXP+0x28>)
 80036c8:	79bb      	ldrb	r3, [r7, #6]
 80036ca:	7053      	strb	r3, [r2, #1]
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bc80      	pop	{r7}
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	20000558 	.word	0x20000558

080036dc <NextPosition>:

void NextPosition (uint8_t xpos, uint8_t ppos)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	4603      	mov	r3, r0
 80036e4:	460a      	mov	r2, r1
 80036e6:	71fb      	strb	r3, [r7, #7]
 80036e8:	4613      	mov	r3, r2
 80036ea:	71bb      	strb	r3, [r7, #6]
	Pos.x = xpos + 1;
 80036ec:	79fb      	ldrb	r3, [r7, #7]
 80036ee:	3301      	adds	r3, #1
 80036f0:	b2da      	uxtb	r2, r3
 80036f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003730 <NextPosition+0x54>)
 80036f4:	701a      	strb	r2, [r3, #0]
	if (Pos.x >127)
 80036f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003730 <NextPosition+0x54>)
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	b25b      	sxtb	r3, r3
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	da12      	bge.n	8003726 <NextPosition+0x4a>
	{
		Pos.p = ppos + 1;
 8003700:	79bb      	ldrb	r3, [r7, #6]
 8003702:	3301      	adds	r3, #1
 8003704:	b2da      	uxtb	r2, r3
 8003706:	4b0a      	ldr	r3, [pc, #40]	@ (8003730 <NextPosition+0x54>)
 8003708:	705a      	strb	r2, [r3, #1]
		if (Pos.p > 7)
 800370a:	4b09      	ldr	r3, [pc, #36]	@ (8003730 <NextPosition+0x54>)
 800370c:	785b      	ldrb	r3, [r3, #1]
 800370e:	2b07      	cmp	r3, #7
 8003710:	d906      	bls.n	8003720 <NextPosition+0x44>
		{
			Pos.p = 7;
 8003712:	4b07      	ldr	r3, [pc, #28]	@ (8003730 <NextPosition+0x54>)
 8003714:	2207      	movs	r2, #7
 8003716:	705a      	strb	r2, [r3, #1]
			Pos.x = 127;
 8003718:	4b05      	ldr	r3, [pc, #20]	@ (8003730 <NextPosition+0x54>)
 800371a:	227f      	movs	r2, #127	@ 0x7f
 800371c:	701a      	strb	r2, [r3, #0]
		}
		else Pos.x = 0;
	}
}
 800371e:	e002      	b.n	8003726 <NextPosition+0x4a>
		else Pos.x = 0;
 8003720:	4b03      	ldr	r3, [pc, #12]	@ (8003730 <NextPosition+0x54>)
 8003722:	2200      	movs	r2, #0
 8003724:	701a      	strb	r2, [r3, #0]
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	bc80      	pop	{r7}
 800372e:	4770      	bx	lr
 8003730:	20000558 	.word	0x20000558

08003734 <WriteCol>:

void WriteCol (uint8_t Col)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	4603      	mov	r3, r0
 800373c:	71fb      	strb	r3, [r7, #7]
	*(Buffer + (128* Pos.p + Pos.x)) = Col;					//equation: pos = 128*y + x
 800373e:	4b0b      	ldr	r3, [pc, #44]	@ (800376c <WriteCol+0x38>)
 8003740:	785b      	ldrb	r3, [r3, #1]
 8003742:	01db      	lsls	r3, r3, #7
 8003744:	4a09      	ldr	r2, [pc, #36]	@ (800376c <WriteCol+0x38>)
 8003746:	7812      	ldrb	r2, [r2, #0]
 8003748:	4413      	add	r3, r2
 800374a:	461a      	mov	r2, r3
 800374c:	4b08      	ldr	r3, [pc, #32]	@ (8003770 <WriteCol+0x3c>)
 800374e:	4413      	add	r3, r2
 8003750:	79fa      	ldrb	r2, [r7, #7]
 8003752:	701a      	strb	r2, [r3, #0]
	NextPosition (Pos.x,Pos.p);
 8003754:	4b05      	ldr	r3, [pc, #20]	@ (800376c <WriteCol+0x38>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	4a04      	ldr	r2, [pc, #16]	@ (800376c <WriteCol+0x38>)
 800375a:	7852      	ldrb	r2, [r2, #1]
 800375c:	4611      	mov	r1, r2
 800375e:	4618      	mov	r0, r3
 8003760:	f7ff ffbc 	bl	80036dc <NextPosition>
}
 8003764:	bf00      	nop
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	20000558 	.word	0x20000558
 8003770:	20000158 	.word	0x20000158

08003774 <WriteChar>:

void WriteChar (uint8_t Char)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	4603      	mov	r3, r0
 800377c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 0; i <= 5; i++)
 800377e:	2300      	movs	r3, #0
 8003780:	73fb      	strb	r3, [r7, #15]
 8003782:	e011      	b.n	80037a8 <WriteChar+0x34>
		WriteCol(fonta[Char - 32][i]);
 8003784:	79fb      	ldrb	r3, [r7, #7]
 8003786:	f1a3 0220 	sub.w	r2, r3, #32
 800378a:	7bf9      	ldrb	r1, [r7, #15]
 800378c:	480a      	ldr	r0, [pc, #40]	@ (80037b8 <WriteChar+0x44>)
 800378e:	4613      	mov	r3, r2
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	4413      	add	r3, r2
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	4403      	add	r3, r0
 8003798:	440b      	add	r3, r1
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff ffc9 	bl	8003734 <WriteCol>
	for (i = 0; i <= 5; i++)
 80037a2:	7bfb      	ldrb	r3, [r7, #15]
 80037a4:	3301      	adds	r3, #1
 80037a6:	73fb      	strb	r3, [r7, #15]
 80037a8:	7bfb      	ldrb	r3, [r7, #15]
 80037aa:	2b05      	cmp	r3, #5
 80037ac:	d9ea      	bls.n	8003784 <WriteChar+0x10>
}
 80037ae:	bf00      	nop
 80037b0:	bf00      	nop
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	08004f5c 	.word	0x08004f5c

080037bc <WriteString>:

void WriteString (char String[])
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80037c4:	2300      	movs	r3, #0
 80037c6:	73fb      	strb	r3, [r7, #15]
	while (String[i])
 80037c8:	e009      	b.n	80037de <WriteString+0x22>
	{
		WriteChar((uint8_t)String[i]);
 80037ca:	7bfb      	ldrb	r3, [r7, #15]
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	4413      	add	r3, r2
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7ff ffce 	bl	8003774 <WriteChar>
		i++;
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
 80037da:	3301      	adds	r3, #1
 80037dc:	73fb      	strb	r3, [r7, #15]
	while (String[i])
 80037de:	7bfb      	ldrb	r3, [r7, #15]
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	4413      	add	r3, r2
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1ef      	bne.n	80037ca <WriteString+0xe>
	}
}
 80037ea:	bf00      	nop
 80037ec:	bf00      	nop
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <DeleteString>:

void DeleteString (uint8_t x, uint8_t p, uint8_t numChar)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	4603      	mov	r3, r0
 80037fc:	71fb      	strb	r3, [r7, #7]
 80037fe:	460b      	mov	r3, r1
 8003800:	71bb      	strb	r3, [r7, #6]
 8003802:	4613      	mov	r3, r2
 8003804:	717b      	strb	r3, [r7, #5]
	GotoXP(x, p);
 8003806:	79ba      	ldrb	r2, [r7, #6]
 8003808:	79fb      	ldrb	r3, [r7, #7]
 800380a:	4611      	mov	r1, r2
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff ff4f 	bl	80036b0 <GotoXP>
	for (uint8_t i = 1; i <= numChar; i++)
 8003812:	2301      	movs	r3, #1
 8003814:	73fb      	strb	r3, [r7, #15]
 8003816:	e005      	b.n	8003824 <DeleteString+0x30>
	{
		WriteChar((uint8_t)' ');
 8003818:	2020      	movs	r0, #32
 800381a:	f7ff ffab 	bl	8003774 <WriteChar>
	for (uint8_t i = 1; i <= numChar; i++)
 800381e:	7bfb      	ldrb	r3, [r7, #15]
 8003820:	3301      	adds	r3, #1
 8003822:	73fb      	strb	r3, [r7, #15]
 8003824:	7bfa      	ldrb	r2, [r7, #15]
 8003826:	797b      	ldrb	r3, [r7, #5]
 8003828:	429a      	cmp	r2, r3
 800382a:	d9f5      	bls.n	8003818 <DeleteString+0x24>
	}
}
 800382c:	bf00      	nop
 800382e:	bf00      	nop
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <SolidFill>:

void SolidFill (uint8_t Fill)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b084      	sub	sp, #16
 800383a:	af00      	add	r7, sp, #0
 800383c:	4603      	mov	r3, r0
 800383e:	71fb      	strb	r3, [r7, #7]
	GotoXP(0,0);
 8003840:	2100      	movs	r1, #0
 8003842:	2000      	movs	r0, #0
 8003844:	f7ff ff34 	bl	80036b0 <GotoXP>
	uint8_t i = 0;
 8003848:	2300      	movs	r3, #0
 800384a:	73fb      	strb	r3, [r7, #15]
	uint8_t j = 0;
 800384c:	2300      	movs	r3, #0
 800384e:	73bb      	strb	r3, [r7, #14]
	for (j = 0; j<= 7; j++)
 8003850:	2300      	movs	r3, #0
 8003852:	73bb      	strb	r3, [r7, #14]
 8003854:	e010      	b.n	8003878 <SolidFill+0x42>
		for (i = 0; i<= 127; i++)
 8003856:	2300      	movs	r3, #0
 8003858:	73fb      	strb	r3, [r7, #15]
 800385a:	e006      	b.n	800386a <SolidFill+0x34>
		{
			WriteCol(Fill);
 800385c:	79fb      	ldrb	r3, [r7, #7]
 800385e:	4618      	mov	r0, r3
 8003860:	f7ff ff68 	bl	8003734 <WriteCol>
		for (i = 0; i<= 127; i++)
 8003864:	7bfb      	ldrb	r3, [r7, #15]
 8003866:	3301      	adds	r3, #1
 8003868:	73fb      	strb	r3, [r7, #15]
 800386a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800386e:	2b00      	cmp	r3, #0
 8003870:	daf4      	bge.n	800385c <SolidFill+0x26>
	for (j = 0; j<= 7; j++)
 8003872:	7bbb      	ldrb	r3, [r7, #14]
 8003874:	3301      	adds	r3, #1
 8003876:	73bb      	strb	r3, [r7, #14]
 8003878:	7bbb      	ldrb	r3, [r7, #14]
 800387a:	2b07      	cmp	r3, #7
 800387c:	d9eb      	bls.n	8003856 <SolidFill+0x20>
		}
}
 800387e:	bf00      	nop
 8003880:	bf00      	nop
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <DrawIcon>:
			WriteCol((bmp[x++]^0xFF));
		}
}

void DrawIcon (const uint8_t *Icon, uint8_t Size)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	for (i = 0; i < Size ; i++)
 8003894:	2300      	movs	r3, #0
 8003896:	73fb      	strb	r3, [r7, #15]
 8003898:	e009      	b.n	80038ae <DrawIcon+0x26>
		WriteCol(*(Icon + i));
 800389a:	7bfb      	ldrb	r3, [r7, #15]
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	4413      	add	r3, r2
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7ff ff46 	bl	8003734 <WriteCol>
	for (i = 0; i < Size ; i++)
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
 80038aa:	3301      	adds	r3, #1
 80038ac:	73fb      	strb	r3, [r7, #15]
 80038ae:	7bfa      	ldrb	r2, [r7, #15]
 80038b0:	78fb      	ldrb	r3, [r7, #3]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d3f1      	bcc.n	800389a <DrawIcon+0x12>
}
 80038b6:	bf00      	nop
 80038b8:	bf00      	nop
 80038ba:	3710      	adds	r7, #16
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <DrawImage>:

void DrawImage (const uint8_t *bmp, uint8_t xbegin, uint8_t xend, uint8_t pbegin, uint8_t pend)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	4608      	mov	r0, r1
 80038ca:	4611      	mov	r1, r2
 80038cc:	461a      	mov	r2, r3
 80038ce:	4603      	mov	r3, r0
 80038d0:	70fb      	strb	r3, [r7, #3]
 80038d2:	460b      	mov	r3, r1
 80038d4:	70bb      	strb	r3, [r7, #2]
 80038d6:	4613      	mov	r3, r2
 80038d8:	707b      	strb	r3, [r7, #1]
	uint8_t i = xbegin;
 80038da:	78fb      	ldrb	r3, [r7, #3]
 80038dc:	73fb      	strb	r3, [r7, #15]
	uint8_t j = pbegin;
 80038de:	787b      	ldrb	r3, [r7, #1]
 80038e0:	73bb      	strb	r3, [r7, #14]
	uint16_t x = 0;
 80038e2:	2300      	movs	r3, #0
 80038e4:	81bb      	strh	r3, [r7, #12]
	for (j = pbegin; j<= pend; j++)
 80038e6:	787b      	ldrb	r3, [r7, #1]
 80038e8:	73bb      	strb	r3, [r7, #14]
 80038ea:	e01c      	b.n	8003926 <DrawImage+0x66>
	{
		GotoXP(xbegin,j);
 80038ec:	7bba      	ldrb	r2, [r7, #14]
 80038ee:	78fb      	ldrb	r3, [r7, #3]
 80038f0:	4611      	mov	r1, r2
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7ff fedc 	bl	80036b0 <GotoXP>
		for (i = xbegin; i<= xend; i++)
 80038f8:	78fb      	ldrb	r3, [r7, #3]
 80038fa:	73fb      	strb	r3, [r7, #15]
 80038fc:	e00c      	b.n	8003918 <DrawImage+0x58>
		{
			WriteCol(bmp[x++]);
 80038fe:	89bb      	ldrh	r3, [r7, #12]
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	81ba      	strh	r2, [r7, #12]
 8003904:	461a      	mov	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4413      	add	r3, r2
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	4618      	mov	r0, r3
 800390e:	f7ff ff11 	bl	8003734 <WriteCol>
		for (i = xbegin; i<= xend; i++)
 8003912:	7bfb      	ldrb	r3, [r7, #15]
 8003914:	3301      	adds	r3, #1
 8003916:	73fb      	strb	r3, [r7, #15]
 8003918:	7bfa      	ldrb	r2, [r7, #15]
 800391a:	78bb      	ldrb	r3, [r7, #2]
 800391c:	429a      	cmp	r2, r3
 800391e:	d9ee      	bls.n	80038fe <DrawImage+0x3e>
	for (j = pbegin; j<= pend; j++)
 8003920:	7bbb      	ldrb	r3, [r7, #14]
 8003922:	3301      	adds	r3, #1
 8003924:	73bb      	strb	r3, [r7, #14]
 8003926:	7bba      	ldrb	r2, [r7, #14]
 8003928:	7e3b      	ldrb	r3, [r7, #24]
 800392a:	429a      	cmp	r2, r3
 800392c:	d9de      	bls.n	80038ec <DrawImage+0x2c>
		}
	}
}
 800392e:	bf00      	nop
 8003930:	bf00      	nop
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <InverseImage>:

void InverseImage (uint8_t xbegin, uint8_t xend, uint8_t pbegin, uint8_t pend)
{
 8003938:	b590      	push	{r4, r7, lr}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	4604      	mov	r4, r0
 8003940:	4608      	mov	r0, r1
 8003942:	4611      	mov	r1, r2
 8003944:	461a      	mov	r2, r3
 8003946:	4623      	mov	r3, r4
 8003948:	71fb      	strb	r3, [r7, #7]
 800394a:	4603      	mov	r3, r0
 800394c:	71bb      	strb	r3, [r7, #6]
 800394e:	460b      	mov	r3, r1
 8003950:	717b      	strb	r3, [r7, #5]
 8003952:	4613      	mov	r3, r2
 8003954:	713b      	strb	r3, [r7, #4]
	uint8_t i = xbegin;
 8003956:	79fb      	ldrb	r3, [r7, #7]
 8003958:	73fb      	strb	r3, [r7, #15]
	uint8_t j = pbegin;
 800395a:	797b      	ldrb	r3, [r7, #5]
 800395c:	73bb      	strb	r3, [r7, #14]
	for (j = pbegin; j<= pend; j++)
 800395e:	797b      	ldrb	r3, [r7, #5]
 8003960:	73bb      	strb	r3, [r7, #14]
 8003962:	e01f      	b.n	80039a4 <InverseImage+0x6c>
	{
		GotoXP(xbegin,j);
 8003964:	7bba      	ldrb	r2, [r7, #14]
 8003966:	79fb      	ldrb	r3, [r7, #7]
 8003968:	4611      	mov	r1, r2
 800396a:	4618      	mov	r0, r3
 800396c:	f7ff fea0 	bl	80036b0 <GotoXP>
		for (i = xbegin; i<= xend; i++)
 8003970:	79fb      	ldrb	r3, [r7, #7]
 8003972:	73fb      	strb	r3, [r7, #15]
 8003974:	e00f      	b.n	8003996 <InverseImage+0x5e>
		{
			WriteCol(*(Buffer + (128* j + i)) ^ 0xFF);
 8003976:	7bbb      	ldrb	r3, [r7, #14]
 8003978:	01da      	lsls	r2, r3, #7
 800397a:	7bfb      	ldrb	r3, [r7, #15]
 800397c:	4413      	add	r3, r2
 800397e:	461a      	mov	r2, r3
 8003980:	4b0d      	ldr	r3, [pc, #52]	@ (80039b8 <InverseImage+0x80>)
 8003982:	4413      	add	r3, r2
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	43db      	mvns	r3, r3
 8003988:	b2db      	uxtb	r3, r3
 800398a:	4618      	mov	r0, r3
 800398c:	f7ff fed2 	bl	8003734 <WriteCol>
		for (i = xbegin; i<= xend; i++)
 8003990:	7bfb      	ldrb	r3, [r7, #15]
 8003992:	3301      	adds	r3, #1
 8003994:	73fb      	strb	r3, [r7, #15]
 8003996:	7bfa      	ldrb	r2, [r7, #15]
 8003998:	79bb      	ldrb	r3, [r7, #6]
 800399a:	429a      	cmp	r2, r3
 800399c:	d9eb      	bls.n	8003976 <InverseImage+0x3e>
	for (j = pbegin; j<= pend; j++)
 800399e:	7bbb      	ldrb	r3, [r7, #14]
 80039a0:	3301      	adds	r3, #1
 80039a2:	73bb      	strb	r3, [r7, #14]
 80039a4:	7bba      	ldrb	r2, [r7, #14]
 80039a6:	793b      	ldrb	r3, [r7, #4]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d9db      	bls.n	8003964 <InverseImage+0x2c>
		}
	}
}
 80039ac:	bf00      	nop
 80039ae:	bf00      	nop
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd90      	pop	{r4, r7, pc}
 80039b6:	bf00      	nop
 80039b8:	20000158 	.word	0x20000158

080039bc <UpdateScreen>:

void UpdateScreen (uint8_t inverse)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4603      	mov	r3, r0
 80039c4:	71fb      	strb	r3, [r7, #7]
	Oled_Update(Buffer, inverse);
 80039c6:	79fb      	ldrb	r3, [r7, #7]
 80039c8:	4619      	mov	r1, r3
 80039ca:	4803      	ldr	r0, [pc, #12]	@ (80039d8 <UpdateScreen+0x1c>)
 80039cc:	f001 f96e 	bl	8004cac <Oled_Update>
}
 80039d0:	bf00      	nop
 80039d2:	3708      	adds	r7, #8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	20000158 	.word	0x20000158

080039dc <DispAlarmLine>:
/* Global Variables -----------------------------------------------------------*/


/* Private functions ------------------------------------------------*/
void DispAlarmLine(volatile stAlarm *AlarmData, uint8_t *AlarmLine, uint8_t *AlarmPos)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
	GotoXP(0,0);
 80039e8:	2100      	movs	r1, #0
 80039ea:	2000      	movs	r0, #0
 80039ec:	f7ff fe60 	bl	80036b0 <GotoXP>
	WriteString("<ALARMS>");
 80039f0:	48b8      	ldr	r0, [pc, #736]	@ (8003cd4 <DispAlarmLine+0x2f8>)
 80039f2:	f7ff fee3 	bl	80037bc <WriteString>

	uint8_t i;
	for (i = 2; i<= 6; i++)
 80039f6:	2302      	movs	r3, #2
 80039f8:	75fb      	strb	r3, [r7, #23]
 80039fa:	e179      	b.n	8003cf0 <DispAlarmLine+0x314>
	{
		GotoXP(0,i);
 80039fc:	7dfb      	ldrb	r3, [r7, #23]
 80039fe:	4619      	mov	r1, r3
 8003a00:	2000      	movs	r0, #0
 8003a02:	f7ff fe55 	bl	80036b0 <GotoXP>
		if (*AlarmLine == (i-1))
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	7dfb      	ldrb	r3, [r7, #23]
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d106      	bne.n	8003a22 <DispAlarmLine+0x46>
		{
			WriteChar(92+32);
 8003a14:	207c      	movs	r0, #124	@ 0x7c
 8003a16:	f7ff fead 	bl	8003774 <WriteChar>
			WriteChar(' ');
 8003a1a:	2020      	movs	r0, #32
 8003a1c:	f7ff feaa 	bl	8003774 <WriteChar>
 8003a20:	e002      	b.n	8003a28 <DispAlarmLine+0x4c>
		}
		else
		{
			WriteString("  ");
 8003a22:	48ad      	ldr	r0, [pc, #692]	@ (8003cd8 <DispAlarmLine+0x2fc>)
 8003a24:	f7ff feca 	bl	80037bc <WriteString>
		}

		if (((AlarmData+i-2)->enable) )
 8003a28:	7dfa      	ldrb	r2, [r7, #23]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	4413      	add	r3, r2
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	3b0c      	subs	r3, #12
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	4413      	add	r3, r2
 8003a38:	795b      	ldrb	r3, [r3, #5]
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d006      	beq.n	8003a4e <DispAlarmLine+0x72>
		{
			WriteChar(93+32);
 8003a40:	207d      	movs	r0, #125	@ 0x7d
 8003a42:	f7ff fe97 	bl	8003774 <WriteChar>
			WriteChar(' ');
 8003a46:	2020      	movs	r0, #32
 8003a48:	f7ff fe94 	bl	8003774 <WriteChar>
 8003a4c:	e002      	b.n	8003a54 <DispAlarmLine+0x78>
		}
		else
		{
			WriteString("  ");
 8003a4e:	48a2      	ldr	r0, [pc, #648]	@ (8003cd8 <DispAlarmLine+0x2fc>)
 8003a50:	f7ff feb4 	bl	80037bc <WriteString>
		}

		WriteChar(((AlarmData+i-2)->hour10)+48);
 8003a54:	7dfa      	ldrb	r2, [r7, #23]
 8003a56:	4613      	mov	r3, r2
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	4413      	add	r3, r2
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	3b0c      	subs	r3, #12
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	4413      	add	r3, r2
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	3330      	adds	r3, #48	@ 0x30
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff fe81 	bl	8003774 <WriteChar>
		WriteChar(((AlarmData+i-2)->hour)+48);
 8003a72:	7dfa      	ldrb	r2, [r7, #23]
 8003a74:	4613      	mov	r3, r2
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	4413      	add	r3, r2
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	3b0c      	subs	r3, #12
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	4413      	add	r3, r2
 8003a82:	785b      	ldrb	r3, [r3, #1]
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	3330      	adds	r3, #48	@ 0x30
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff fe72 	bl	8003774 <WriteChar>
		WriteChar(':');
 8003a90:	203a      	movs	r0, #58	@ 0x3a
 8003a92:	f7ff fe6f 	bl	8003774 <WriteChar>
		WriteChar(((AlarmData+i-2)->min10)+48);
 8003a96:	7dfa      	ldrb	r2, [r7, #23]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	4413      	add	r3, r2
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	3b0c      	subs	r3, #12
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	789b      	ldrb	r3, [r3, #2]
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	3330      	adds	r3, #48	@ 0x30
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7ff fe60 	bl	8003774 <WriteChar>
		WriteChar(((AlarmData+i-2)->min)+48);
 8003ab4:	7dfa      	ldrb	r2, [r7, #23]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	4413      	add	r3, r2
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	3b0c      	subs	r3, #12
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	78db      	ldrb	r3, [r3, #3]
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	3330      	adds	r3, #48	@ 0x30
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7ff fe51 	bl	8003774 <WriteChar>
		WriteChar(' ');
 8003ad2:	2020      	movs	r0, #32
 8003ad4:	f7ff fe4e 	bl	8003774 <WriteChar>

		if (((AlarmData+i-2)->date) & Monday)
 8003ad8:	7dfa      	ldrb	r2, [r7, #23]
 8003ada:	4613      	mov	r3, r2
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	4413      	add	r3, r2
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	3b0c      	subs	r3, #12
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	791b      	ldrb	r3, [r3, #4]
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <DispAlarmLine+0x120>
		{
			WriteChar('M');
 8003af4:	204d      	movs	r0, #77	@ 0x4d
 8003af6:	f7ff fe3d 	bl	8003774 <WriteChar>
 8003afa:	e002      	b.n	8003b02 <DispAlarmLine+0x126>
		}
		else
		{
			WriteChar('-');
 8003afc:	202d      	movs	r0, #45	@ 0x2d
 8003afe:	f7ff fe39 	bl	8003774 <WriteChar>
		}
		if (((AlarmData+i-2)->date) & Tuesday)
 8003b02:	7dfa      	ldrb	r2, [r7, #23]
 8003b04:	4613      	mov	r3, r2
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	4413      	add	r3, r2
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	3b0c      	subs	r3, #12
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	4413      	add	r3, r2
 8003b12:	791b      	ldrb	r3, [r3, #4]
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	f003 0320 	and.w	r3, r3, #32
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <DispAlarmLine+0x14a>
		{
			WriteChar('T');
 8003b1e:	2054      	movs	r0, #84	@ 0x54
 8003b20:	f7ff fe28 	bl	8003774 <WriteChar>
 8003b24:	e002      	b.n	8003b2c <DispAlarmLine+0x150>
		}
		else
		{
			WriteChar('-');
 8003b26:	202d      	movs	r0, #45	@ 0x2d
 8003b28:	f7ff fe24 	bl	8003774 <WriteChar>
		}
		if (((AlarmData+i-2)->date) & Wednesday)
 8003b2c:	7dfa      	ldrb	r2, [r7, #23]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	4413      	add	r3, r2
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	3b0c      	subs	r3, #12
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	791b      	ldrb	r3, [r3, #4]
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	f003 0310 	and.w	r3, r3, #16
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d003      	beq.n	8003b50 <DispAlarmLine+0x174>
		{
			WriteChar('W');
 8003b48:	2057      	movs	r0, #87	@ 0x57
 8003b4a:	f7ff fe13 	bl	8003774 <WriteChar>
 8003b4e:	e002      	b.n	8003b56 <DispAlarmLine+0x17a>
		}
		else
		{
			WriteChar('-');
 8003b50:	202d      	movs	r0, #45	@ 0x2d
 8003b52:	f7ff fe0f 	bl	8003774 <WriteChar>
		}
		if (((AlarmData+i-2)->date) & Thursday)
 8003b56:	7dfa      	ldrb	r2, [r7, #23]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	4413      	add	r3, r2
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	3b0c      	subs	r3, #12
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	4413      	add	r3, r2
 8003b66:	791b      	ldrb	r3, [r3, #4]
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <DispAlarmLine+0x19e>
		{
			WriteChar('T');
 8003b72:	2054      	movs	r0, #84	@ 0x54
 8003b74:	f7ff fdfe 	bl	8003774 <WriteChar>
 8003b78:	e002      	b.n	8003b80 <DispAlarmLine+0x1a4>
		}
		else
		{
			WriteChar('-');
 8003b7a:	202d      	movs	r0, #45	@ 0x2d
 8003b7c:	f7ff fdfa 	bl	8003774 <WriteChar>
		}
		if (((AlarmData+i-2)->date) & Friday)
 8003b80:	7dfa      	ldrb	r2, [r7, #23]
 8003b82:	4613      	mov	r3, r2
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	4413      	add	r3, r2
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	3b0c      	subs	r3, #12
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	4413      	add	r3, r2
 8003b90:	791b      	ldrb	r3, [r3, #4]
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d003      	beq.n	8003ba4 <DispAlarmLine+0x1c8>
		{
			WriteChar('F');
 8003b9c:	2046      	movs	r0, #70	@ 0x46
 8003b9e:	f7ff fde9 	bl	8003774 <WriteChar>
 8003ba2:	e002      	b.n	8003baa <DispAlarmLine+0x1ce>
		}
		else
		{
			WriteChar('-');
 8003ba4:	202d      	movs	r0, #45	@ 0x2d
 8003ba6:	f7ff fde5 	bl	8003774 <WriteChar>
		}
		if (((AlarmData+i-2)->date) & Saturday)
 8003baa:	7dfa      	ldrb	r2, [r7, #23]
 8003bac:	4613      	mov	r3, r2
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	4413      	add	r3, r2
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	3b0c      	subs	r3, #12
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	4413      	add	r3, r2
 8003bba:	791b      	ldrb	r3, [r3, #4]
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <DispAlarmLine+0x1f2>
		{
			WriteChar('S');
 8003bc6:	2053      	movs	r0, #83	@ 0x53
 8003bc8:	f7ff fdd4 	bl	8003774 <WriteChar>
 8003bcc:	e002      	b.n	8003bd4 <DispAlarmLine+0x1f8>
		}
		else
		{
			WriteChar('-');
 8003bce:	202d      	movs	r0, #45	@ 0x2d
 8003bd0:	f7ff fdd0 	bl	8003774 <WriteChar>
		}
		if (((AlarmData+i-2)->date) & Sunday)
 8003bd4:	7dfa      	ldrb	r2, [r7, #23]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	4413      	add	r3, r2
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	3b0c      	subs	r3, #12
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	4413      	add	r3, r2
 8003be4:	791b      	ldrb	r3, [r3, #4]
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d003      	beq.n	8003bf8 <DispAlarmLine+0x21c>
		{
			WriteChar('S');
 8003bf0:	2053      	movs	r0, #83	@ 0x53
 8003bf2:	f7ff fdbf 	bl	8003774 <WriteChar>
 8003bf6:	e002      	b.n	8003bfe <DispAlarmLine+0x222>
		}
		else
		{
			WriteChar('-');
 8003bf8:	202d      	movs	r0, #45	@ 0x2d
 8003bfa:	f7ff fdbb 	bl	8003774 <WriteChar>
		}

		if (*AlarmLine == (i-1))
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	461a      	mov	r2, r3
 8003c04:	7dfb      	ldrb	r3, [r7, #23]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d16e      	bne.n	8003cea <DispAlarmLine+0x30e>
		{
			switch (*AlarmPos)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	3b01      	subs	r3, #1
 8003c12:	2b0a      	cmp	r3, #10
 8003c14:	d869      	bhi.n	8003cea <DispAlarmLine+0x30e>
 8003c16:	a201      	add	r2, pc, #4	@ (adr r2, 8003c1c <DispAlarmLine+0x240>)
 8003c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1c:	08003c49 	.word	0x08003c49
 8003c20:	08003c57 	.word	0x08003c57
 8003c24:	08003c65 	.word	0x08003c65
 8003c28:	08003c73 	.word	0x08003c73
 8003c2c:	08003c81 	.word	0x08003c81
 8003c30:	08003c8f 	.word	0x08003c8f
 8003c34:	08003c9d 	.word	0x08003c9d
 8003c38:	08003cab 	.word	0x08003cab
 8003c3c:	08003cb9 	.word	0x08003cb9
 8003c40:	08003cc7 	.word	0x08003cc7
 8003c44:	08003cdd 	.word	0x08003cdd
			{
			case APEnable:
				InverseImage(12,17,i,i);
 8003c48:	7dfb      	ldrb	r3, [r7, #23]
 8003c4a:	7dfa      	ldrb	r2, [r7, #23]
 8003c4c:	2111      	movs	r1, #17
 8003c4e:	200c      	movs	r0, #12
 8003c50:	f7ff fe72 	bl	8003938 <InverseImage>
				break;
 8003c54:	e049      	b.n	8003cea <DispAlarmLine+0x30e>
			case APHour:
				InverseImage(24,35,i,i);
 8003c56:	7dfb      	ldrb	r3, [r7, #23]
 8003c58:	7dfa      	ldrb	r2, [r7, #23]
 8003c5a:	2123      	movs	r1, #35	@ 0x23
 8003c5c:	2018      	movs	r0, #24
 8003c5e:	f7ff fe6b 	bl	8003938 <InverseImage>
				break;
 8003c62:	e042      	b.n	8003cea <DispAlarmLine+0x30e>
			case APMin10:
				InverseImage(42,47,i,i);
 8003c64:	7dfb      	ldrb	r3, [r7, #23]
 8003c66:	7dfa      	ldrb	r2, [r7, #23]
 8003c68:	212f      	movs	r1, #47	@ 0x2f
 8003c6a:	202a      	movs	r0, #42	@ 0x2a
 8003c6c:	f7ff fe64 	bl	8003938 <InverseImage>
				break;
 8003c70:	e03b      	b.n	8003cea <DispAlarmLine+0x30e>
			case APMin:
				InverseImage(48,53,i,i);
 8003c72:	7dfb      	ldrb	r3, [r7, #23]
 8003c74:	7dfa      	ldrb	r2, [r7, #23]
 8003c76:	2135      	movs	r1, #53	@ 0x35
 8003c78:	2030      	movs	r0, #48	@ 0x30
 8003c7a:	f7ff fe5d 	bl	8003938 <InverseImage>
				break;
 8003c7e:	e034      	b.n	8003cea <DispAlarmLine+0x30e>
			case APMon:
				InverseImage(60,65,i,i);
 8003c80:	7dfb      	ldrb	r3, [r7, #23]
 8003c82:	7dfa      	ldrb	r2, [r7, #23]
 8003c84:	2141      	movs	r1, #65	@ 0x41
 8003c86:	203c      	movs	r0, #60	@ 0x3c
 8003c88:	f7ff fe56 	bl	8003938 <InverseImage>
				break;
 8003c8c:	e02d      	b.n	8003cea <DispAlarmLine+0x30e>
			case APTue:
				InverseImage(66,71,i,i);
 8003c8e:	7dfb      	ldrb	r3, [r7, #23]
 8003c90:	7dfa      	ldrb	r2, [r7, #23]
 8003c92:	2147      	movs	r1, #71	@ 0x47
 8003c94:	2042      	movs	r0, #66	@ 0x42
 8003c96:	f7ff fe4f 	bl	8003938 <InverseImage>
				break;
 8003c9a:	e026      	b.n	8003cea <DispAlarmLine+0x30e>
			case APWed:
				InverseImage(72,77,i,i);
 8003c9c:	7dfb      	ldrb	r3, [r7, #23]
 8003c9e:	7dfa      	ldrb	r2, [r7, #23]
 8003ca0:	214d      	movs	r1, #77	@ 0x4d
 8003ca2:	2048      	movs	r0, #72	@ 0x48
 8003ca4:	f7ff fe48 	bl	8003938 <InverseImage>
				break;
 8003ca8:	e01f      	b.n	8003cea <DispAlarmLine+0x30e>
			case APThu:
				InverseImage(78,83,i,i);
 8003caa:	7dfb      	ldrb	r3, [r7, #23]
 8003cac:	7dfa      	ldrb	r2, [r7, #23]
 8003cae:	2153      	movs	r1, #83	@ 0x53
 8003cb0:	204e      	movs	r0, #78	@ 0x4e
 8003cb2:	f7ff fe41 	bl	8003938 <InverseImage>
				break;
 8003cb6:	e018      	b.n	8003cea <DispAlarmLine+0x30e>
			case APFri:
				InverseImage(84,89,i,i);
 8003cb8:	7dfb      	ldrb	r3, [r7, #23]
 8003cba:	7dfa      	ldrb	r2, [r7, #23]
 8003cbc:	2159      	movs	r1, #89	@ 0x59
 8003cbe:	2054      	movs	r0, #84	@ 0x54
 8003cc0:	f7ff fe3a 	bl	8003938 <InverseImage>
				break;
 8003cc4:	e011      	b.n	8003cea <DispAlarmLine+0x30e>
			case APSat:
				InverseImage(90,95,i,i);
 8003cc6:	7dfb      	ldrb	r3, [r7, #23]
 8003cc8:	7dfa      	ldrb	r2, [r7, #23]
 8003cca:	215f      	movs	r1, #95	@ 0x5f
 8003ccc:	205a      	movs	r0, #90	@ 0x5a
 8003cce:	f7ff fe33 	bl	8003938 <InverseImage>
				break;
 8003cd2:	e00a      	b.n	8003cea <DispAlarmLine+0x30e>
 8003cd4:	08004e90 	.word	0x08004e90
 8003cd8:	08004e9c 	.word	0x08004e9c
			case APSun:
				InverseImage(96,101,i,i);
 8003cdc:	7dfb      	ldrb	r3, [r7, #23]
 8003cde:	7dfa      	ldrb	r2, [r7, #23]
 8003ce0:	2165      	movs	r1, #101	@ 0x65
 8003ce2:	2060      	movs	r0, #96	@ 0x60
 8003ce4:	f7ff fe28 	bl	8003938 <InverseImage>
				break;
 8003ce8:	bf00      	nop
	for (i = 2; i<= 6; i++)
 8003cea:	7dfb      	ldrb	r3, [r7, #23]
 8003cec:	3301      	adds	r3, #1
 8003cee:	75fb      	strb	r3, [r7, #23]
 8003cf0:	7dfb      	ldrb	r3, [r7, #23]
 8003cf2:	2b06      	cmp	r3, #6
 8003cf4:	f67f ae82 	bls.w	80039fc <DispAlarmLine+0x20>
			}
		}
	}

	GotoXP(0,7);
 8003cf8:	2107      	movs	r1, #7
 8003cfa:	2000      	movs	r0, #0
 8003cfc:	f7ff fcd8 	bl	80036b0 <GotoXP>
	if (*AlarmLine == 6)
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	2b06      	cmp	r3, #6
 8003d06:	d106      	bne.n	8003d16 <DispAlarmLine+0x33a>
	{
		WriteChar(92+32);
 8003d08:	207c      	movs	r0, #124	@ 0x7c
 8003d0a:	f7ff fd33 	bl	8003774 <WriteChar>
		WriteChar(' ');
 8003d0e:	2020      	movs	r0, #32
 8003d10:	f7ff fd30 	bl	8003774 <WriteChar>
 8003d14:	e002      	b.n	8003d1c <DispAlarmLine+0x340>
	}
	else
	{
		WriteString("  ");
 8003d16:	4805      	ldr	r0, [pc, #20]	@ (8003d2c <DispAlarmLine+0x350>)
 8003d18:	f7ff fd50 	bl	80037bc <WriteString>
	}
	WriteString("Back");
 8003d1c:	4804      	ldr	r0, [pc, #16]	@ (8003d30 <DispAlarmLine+0x354>)
 8003d1e:	f7ff fd4d 	bl	80037bc <WriteString>
}
 8003d22:	bf00      	nop
 8003d24:	3718      	adds	r7, #24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	08004e9c 	.word	0x08004e9c
 8003d30:	08004ea0 	.word	0x08004ea0

08003d34 <DispFlashLine>:
#include "FlashView.h"

/* Global Variables ----------------------------------------------------------*/

/* Private functions ---------------------------------------------------------*/
void DispFlashLine(uint8_t *FlashLine) {
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
	GotoXP(0,0);
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	2000      	movs	r0, #0
 8003d40:	f7ff fcb6 	bl	80036b0 <GotoXP>
	WriteString("<FLASH>");
 8003d44:	4828      	ldr	r0, [pc, #160]	@ (8003de8 <DispFlashLine+0xb4>)
 8003d46:	f7ff fd39 	bl	80037bc <WriteString>

	uint8_t i;
	for (i = 2; i<= 4; i++) {
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	73fb      	strb	r3, [r7, #15]
 8003d4e:	e02f      	b.n	8003db0 <DispFlashLine+0x7c>
		GotoXP(0,i);
 8003d50:	7bfb      	ldrb	r3, [r7, #15]
 8003d52:	4619      	mov	r1, r3
 8003d54:	2000      	movs	r0, #0
 8003d56:	f7ff fcab 	bl	80036b0 <GotoXP>
		if (*FlashLine == (i-1)) {
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	7bfb      	ldrb	r3, [r7, #15]
 8003d62:	3b01      	subs	r3, #1
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d106      	bne.n	8003d76 <DispFlashLine+0x42>
			WriteChar(92+32);
 8003d68:	207c      	movs	r0, #124	@ 0x7c
 8003d6a:	f7ff fd03 	bl	8003774 <WriteChar>
			WriteChar(' ');
 8003d6e:	2020      	movs	r0, #32
 8003d70:	f7ff fd00 	bl	8003774 <WriteChar>
 8003d74:	e002      	b.n	8003d7c <DispFlashLine+0x48>
		}
		else {
			WriteString("  ");
 8003d76:	481d      	ldr	r0, [pc, #116]	@ (8003dec <DispFlashLine+0xb8>)
 8003d78:	f7ff fd20 	bl	80037bc <WriteString>
		}

		switch (i-1) {
 8003d7c:	7bfb      	ldrb	r3, [r7, #15]
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	2b03      	cmp	r3, #3
 8003d82:	d00e      	beq.n	8003da2 <DispFlashLine+0x6e>
 8003d84:	2b03      	cmp	r3, #3
 8003d86:	dc10      	bgt.n	8003daa <DispFlashLine+0x76>
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d002      	beq.n	8003d92 <DispFlashLine+0x5e>
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d004      	beq.n	8003d9a <DispFlashLine+0x66>
 8003d90:	e00b      	b.n	8003daa <DispFlashLine+0x76>
		case FlashLine1:
			WriteString("Flash Light");
 8003d92:	4817      	ldr	r0, [pc, #92]	@ (8003df0 <DispFlashLine+0xbc>)
 8003d94:	f7ff fd12 	bl	80037bc <WriteString>
			break;
 8003d98:	e007      	b.n	8003daa <DispFlashLine+0x76>
		case FlashLine2:
			WriteString("Blinking");
 8003d9a:	4816      	ldr	r0, [pc, #88]	@ (8003df4 <DispFlashLine+0xc0>)
 8003d9c:	f7ff fd0e 	bl	80037bc <WriteString>
			break;
 8003da0:	e003      	b.n	8003daa <DispFlashLine+0x76>
		case FlashLine3:
			WriteString("S.O.S");
 8003da2:	4815      	ldr	r0, [pc, #84]	@ (8003df8 <DispFlashLine+0xc4>)
 8003da4:	f7ff fd0a 	bl	80037bc <WriteString>
			break;
 8003da8:	bf00      	nop
	for (i = 2; i<= 4; i++) {
 8003daa:	7bfb      	ldrb	r3, [r7, #15]
 8003dac:	3301      	adds	r3, #1
 8003dae:	73fb      	strb	r3, [r7, #15]
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	d9cc      	bls.n	8003d50 <DispFlashLine+0x1c>
		}
	}

	GotoXP(0,7);
 8003db6:	2107      	movs	r1, #7
 8003db8:	2000      	movs	r0, #0
 8003dba:	f7ff fc79 	bl	80036b0 <GotoXP>
	if (*FlashLine == FlashBack) {
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	2b04      	cmp	r3, #4
 8003dc4:	d106      	bne.n	8003dd4 <DispFlashLine+0xa0>
		WriteChar(92+32);
 8003dc6:	207c      	movs	r0, #124	@ 0x7c
 8003dc8:	f7ff fcd4 	bl	8003774 <WriteChar>
		WriteChar(' ');
 8003dcc:	2020      	movs	r0, #32
 8003dce:	f7ff fcd1 	bl	8003774 <WriteChar>
 8003dd2:	e002      	b.n	8003dda <DispFlashLine+0xa6>
	}
	else {
		WriteString("  ");
 8003dd4:	4805      	ldr	r0, [pc, #20]	@ (8003dec <DispFlashLine+0xb8>)
 8003dd6:	f7ff fcf1 	bl	80037bc <WriteString>
	}
	WriteString("Back");
 8003dda:	4808      	ldr	r0, [pc, #32]	@ (8003dfc <DispFlashLine+0xc8>)
 8003ddc:	f7ff fcee 	bl	80037bc <WriteString>
}
 8003de0:	bf00      	nop
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	08004ea8 	.word	0x08004ea8
 8003dec:	08004eb0 	.word	0x08004eb0
 8003df0:	08004eb4 	.word	0x08004eb4
 8003df4:	08004ec0 	.word	0x08004ec0
 8003df8:	08004ecc 	.word	0x08004ecc
 8003dfc:	08004ed4 	.word	0x08004ed4

08003e00 <FlashModeLight>:

void FlashModeLight() {
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
	SolidFill(0xFF);
 8003e04:	20ff      	movs	r0, #255	@ 0xff
 8003e06:	f7ff fd16 	bl	8003836 <SolidFill>
}
 8003e0a:	bf00      	nop
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <FlashModeBlink>:

void FlashModeBlink() {
 8003e0e:	b480      	push	{r7}
 8003e10:	af00      	add	r7, sp, #0

}
 8003e12:	bf00      	nop
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bc80      	pop	{r7}
 8003e18:	4770      	bx	lr

08003e1a <FlashModeSOS>:

void FlashModeSOS() {
 8003e1a:	b480      	push	{r7}
 8003e1c:	af00      	add	r7, sp, #0

}
 8003e1e:	bf00      	nop
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bc80      	pop	{r7}
 8003e24:	4770      	bx	lr
	...

08003e28 <DispTopRightIcon>:
/* Global Structs ------------------------------------------------------------*/


/* Private functions ---------------------------------------------------------*/
void DispTopRightIcon(uint8_t* Gicon)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
	uint8_t icon = *Gicon;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	73bb      	strb	r3, [r7, #14]
	uint8_t space = 0;
 8003e36:	2300      	movs	r3, #0
 8003e38:	73fb      	strb	r3, [r7, #15]

	if (icon & IBattery)
 8003e3a:	7bbb      	ldrb	r3, [r7, #14]
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d011      	beq.n	8003e68 <DispTopRightIcon+0x40>
	{
		space += (lena(IconBattery) + Spacer);
 8003e44:	7bfb      	ldrb	r3, [r7, #15]
 8003e46:	330a      	adds	r3, #10
 8003e48:	73fb      	strb	r3, [r7, #15]
		GotoXP(128-space,0);
 8003e4a:	7bfb      	ldrb	r3, [r7, #15]
 8003e4c:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 8003e50:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 8003e54:	3380      	adds	r3, #128	@ 0x80
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2100      	movs	r1, #0
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff fc28 	bl	80036b0 <GotoXP>
		DrawIcon(IconBattery,lena(IconBattery));
 8003e60:	2108      	movs	r1, #8
 8003e62:	4831      	ldr	r0, [pc, #196]	@ (8003f28 <DispTopRightIcon+0x100>)
 8003e64:	f7ff fd10 	bl	8003888 <DrawIcon>
	}
	if (icon & ICharge)
 8003e68:	7bbb      	ldrb	r3, [r7, #14]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d011      	beq.n	8003e96 <DispTopRightIcon+0x6e>
	{
		space += (lena(IconCharge) + Spacer);
 8003e72:	7bfb      	ldrb	r3, [r7, #15]
 8003e74:	3308      	adds	r3, #8
 8003e76:	73fb      	strb	r3, [r7, #15]
		GotoXP(128-space,0);
 8003e78:	7bfb      	ldrb	r3, [r7, #15]
 8003e7a:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 8003e7e:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 8003e82:	3380      	adds	r3, #128	@ 0x80
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2100      	movs	r1, #0
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7ff fc11 	bl	80036b0 <GotoXP>
		DrawIcon(IconCharge,lena(IconCharge));
 8003e8e:	2106      	movs	r1, #6
 8003e90:	4826      	ldr	r0, [pc, #152]	@ (8003f2c <DispTopRightIcon+0x104>)
 8003e92:	f7ff fcf9 	bl	8003888 <DrawIcon>
	}
	if (icon & IAlarm)
 8003e96:	7bbb      	ldrb	r3, [r7, #14]
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d011      	beq.n	8003ec4 <DispTopRightIcon+0x9c>
	{
		space += (lena(IconAlarm) + Spacer);
 8003ea0:	7bfb      	ldrb	r3, [r7, #15]
 8003ea2:	3308      	adds	r3, #8
 8003ea4:	73fb      	strb	r3, [r7, #15]
		GotoXP(128-space,0);
 8003ea6:	7bfb      	ldrb	r3, [r7, #15]
 8003ea8:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 8003eac:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 8003eb0:	3380      	adds	r3, #128	@ 0x80
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7ff fbfa 	bl	80036b0 <GotoXP>
		DrawIcon(IconAlarm,lena(IconAlarm));
 8003ebc:	2106      	movs	r1, #6
 8003ebe:	481c      	ldr	r0, [pc, #112]	@ (8003f30 <DispTopRightIcon+0x108>)
 8003ec0:	f7ff fce2 	bl	8003888 <DrawIcon>
	}
	if (icon & ISound)
 8003ec4:	7bbb      	ldrb	r3, [r7, #14]
 8003ec6:	f003 0308 	and.w	r3, r3, #8
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d011      	beq.n	8003ef2 <DispTopRightIcon+0xca>
	{
		space += (lena(IconSound) + Spacer);
 8003ece:	7bfb      	ldrb	r3, [r7, #15]
 8003ed0:	330a      	adds	r3, #10
 8003ed2:	73fb      	strb	r3, [r7, #15]
		GotoXP(128-space,0);
 8003ed4:	7bfb      	ldrb	r3, [r7, #15]
 8003ed6:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 8003eda:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 8003ede:	3380      	adds	r3, #128	@ 0x80
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7ff fbe3 	bl	80036b0 <GotoXP>
		DrawIcon(IconSound,lena(IconSound));
 8003eea:	2108      	movs	r1, #8
 8003eec:	4811      	ldr	r0, [pc, #68]	@ (8003f34 <DispTopRightIcon+0x10c>)
 8003eee:	f7ff fccb 	bl	8003888 <DrawIcon>
	}
	if (icon & ICount)
 8003ef2:	7bbb      	ldrb	r3, [r7, #14]
 8003ef4:	f003 0310 	and.w	r3, r3, #16
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d011      	beq.n	8003f20 <DispTopRightIcon+0xf8>
	{
		space += (lena(IconCount) + Spacer);
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
 8003efe:	330a      	adds	r3, #10
 8003f00:	73fb      	strb	r3, [r7, #15]
		GotoXP(128-space,0);
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
 8003f04:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 8003f08:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 8003f0c:	3380      	adds	r3, #128	@ 0x80
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2100      	movs	r1, #0
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff fbcc 	bl	80036b0 <GotoXP>
		DrawIcon(IconCount,lena(IconCount));
 8003f18:	2108      	movs	r1, #8
 8003f1a:	4807      	ldr	r0, [pc, #28]	@ (8003f38 <DispTopRightIcon+0x110>)
 8003f1c:	f7ff fcb4 	bl	8003888 <DrawIcon>
	}
}
 8003f20:	bf00      	nop
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	08005190 	.word	0x08005190
 8003f2c:	08005198 	.word	0x08005198
 8003f30:	080051a0 	.word	0x080051a0
 8003f34:	080051a8 	.word	0x080051a8
 8003f38:	080051b0 	.word	0x080051b0

08003f3c <DispBotTime>:

void DispBotTime(volatile stDispTime *time, uint8_t isIdleState)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	460b      	mov	r3, r1
 8003f46:	70fb      	strb	r3, [r7, #3]
	GotoXP(0,7);
 8003f48:	2107      	movs	r1, #7
 8003f4a:	2000      	movs	r0, #0
 8003f4c:	f7ff fbb0 	bl	80036b0 <GotoXP>
	switch (isIdleState)
 8003f50:	78fb      	ldrb	r3, [r7, #3]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d123      	bne.n	8003f9e <DispBotTime+0x62>
	{
	case ENABLE:
		WriteChar(time->hour10 + 48);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	3330      	adds	r3, #48	@ 0x30
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff fc07 	bl	8003774 <WriteChar>
		WriteChar(time->hour + 48);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	785b      	ldrb	r3, [r3, #1]
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	3330      	adds	r3, #48	@ 0x30
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7ff fbff 	bl	8003774 <WriteChar>
		WriteChar(':');
 8003f76:	203a      	movs	r0, #58	@ 0x3a
 8003f78:	f7ff fbfc 	bl	8003774 <WriteChar>
		WriteChar(time->min10 + 48);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	789b      	ldrb	r3, [r3, #2]
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	3330      	adds	r3, #48	@ 0x30
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7ff fbf4 	bl	8003774 <WriteChar>
		WriteChar(time->min + 48);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	78db      	ldrb	r3, [r3, #3]
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	3330      	adds	r3, #48	@ 0x30
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff fbec 	bl	8003774 <WriteChar>
		break;
 8003f9c:	e004      	b.n	8003fa8 <DispBotTime+0x6c>
	default:
		GotoXP(30,7);
 8003f9e:	2107      	movs	r1, #7
 8003fa0:	201e      	movs	r0, #30
 8003fa2:	f7ff fb85 	bl	80036b0 <GotoXP>
		break;
 8003fa6:	bf00      	nop
	}

	WriteString("   ");
 8003fa8:	4825      	ldr	r0, [pc, #148]	@ (8004040 <DispBotTime+0x104>)
 8003faa:	f7ff fc07 	bl	80037bc <WriteString>
    uint8_t i = time->date;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	799b      	ldrb	r3, [r3, #6]
 8003fb2:	73fb      	strb	r3, [r7, #15]
	WriteString((uint8_t*)(Datetype+i-1));
 8003fb4:	7bfa      	ldrb	r2, [r7, #15]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	4413      	add	r3, r2
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	3b06      	subs	r3, #6
 8003fc0:	4a20      	ldr	r2, [pc, #128]	@ (8004044 <DispBotTime+0x108>)
 8003fc2:	4413      	add	r3, r2
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7ff fbf9 	bl	80037bc <WriteString>
	WriteChar(time->day10 + 48);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	79db      	ldrb	r3, [r3, #7]
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	3330      	adds	r3, #48	@ 0x30
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff fbcd 	bl	8003774 <WriteChar>
	WriteChar(time->day + 48);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	7a1b      	ldrb	r3, [r3, #8]
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	3330      	adds	r3, #48	@ 0x30
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7ff fbc5 	bl	8003774 <WriteChar>
	WriteChar('/');
 8003fea:	202f      	movs	r0, #47	@ 0x2f
 8003fec:	f7ff fbc2 	bl	8003774 <WriteChar>
	WriteChar(time->mon10 + 48);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	7a5b      	ldrb	r3, [r3, #9]
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	3330      	adds	r3, #48	@ 0x30
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7ff fbba 	bl	8003774 <WriteChar>
	WriteChar(time->mon + 48);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	7a9b      	ldrb	r3, [r3, #10]
 8004004:	b2db      	uxtb	r3, r3
 8004006:	3330      	adds	r3, #48	@ 0x30
 8004008:	b2db      	uxtb	r3, r3
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff fbb2 	bl	8003774 <WriteChar>
	WriteChar('/');
 8004010:	202f      	movs	r0, #47	@ 0x2f
 8004012:	f7ff fbaf 	bl	8003774 <WriteChar>
	WriteChar(time->year10 + 48);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	7adb      	ldrb	r3, [r3, #11]
 800401a:	b2db      	uxtb	r3, r3
 800401c:	3330      	adds	r3, #48	@ 0x30
 800401e:	b2db      	uxtb	r3, r3
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff fba7 	bl	8003774 <WriteChar>
	WriteChar(time->year + 48);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	7b1b      	ldrb	r3, [r3, #12]
 800402a:	b2db      	uxtb	r3, r3
 800402c:	3330      	adds	r3, #48	@ 0x30
 800402e:	b2db      	uxtb	r3, r3
 8004030:	4618      	mov	r0, r3
 8004032:	f7ff fb9f 	bl	8003774 <WriteChar>
}
 8004036:	bf00      	nop
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	08004edc 	.word	0x08004edc
 8004044:	080051b8 	.word	0x080051b8

08004048 <DispMainTime>:

/* Global Variables ----------------------------------------------------------*/

/* Private functions ---------------------------------------------------------*/
void DispMainTime (volatile stDispTime *time)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af02      	add	r7, sp, #8
 800404e:	6078      	str	r0, [r7, #4]
	DrawImage(Dots,0+dos,7+dos,2,5);
 8004050:	2305      	movs	r3, #5
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	2302      	movs	r3, #2
 8004056:	2236      	movs	r2, #54	@ 0x36
 8004058:	212f      	movs	r1, #47	@ 0x2f
 800405a:	48c1      	ldr	r0, [pc, #772]	@ (8004360 <DispMainTime+0x318>)
 800405c:	f7ff fc30 	bl	80038c0 <DrawImage>
	switch (time->hour10)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b09      	cmp	r3, #9
 8004068:	d870      	bhi.n	800414c <DispMainTime+0x104>
 800406a:	a201      	add	r2, pc, #4	@ (adr r2, 8004070 <DispMainTime+0x28>)
 800406c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004070:	08004099 	.word	0x08004099
 8004074:	080040ab 	.word	0x080040ab
 8004078:	080040bd 	.word	0x080040bd
 800407c:	080040cf 	.word	0x080040cf
 8004080:	080040e1 	.word	0x080040e1
 8004084:	080040f3 	.word	0x080040f3
 8004088:	08004105 	.word	0x08004105
 800408c:	08004117 	.word	0x08004117
 8004090:	08004129 	.word	0x08004129
 8004094:	0800413b 	.word	0x0800413b
	{
	case 0:
		DrawImage(Zero,0+h10os,17+h10os,2,5);
 8004098:	2305      	movs	r3, #5
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	2302      	movs	r3, #2
 800409e:	2217      	movs	r2, #23
 80040a0:	2106      	movs	r1, #6
 80040a2:	48b0      	ldr	r0, [pc, #704]	@ (8004364 <DispMainTime+0x31c>)
 80040a4:	f7ff fc0c 	bl	80038c0 <DrawImage>
		break;
 80040a8:	e050      	b.n	800414c <DispMainTime+0x104>
	case 1:
		DrawImage(One,0+h10os,17+h10os,2,5);
 80040aa:	2305      	movs	r3, #5
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	2302      	movs	r3, #2
 80040b0:	2217      	movs	r2, #23
 80040b2:	2106      	movs	r1, #6
 80040b4:	48ac      	ldr	r0, [pc, #688]	@ (8004368 <DispMainTime+0x320>)
 80040b6:	f7ff fc03 	bl	80038c0 <DrawImage>
		break;
 80040ba:	e047      	b.n	800414c <DispMainTime+0x104>
	case 2:
		DrawImage(Two,0+h10os,17+h10os,2,5);
 80040bc:	2305      	movs	r3, #5
 80040be:	9300      	str	r3, [sp, #0]
 80040c0:	2302      	movs	r3, #2
 80040c2:	2217      	movs	r2, #23
 80040c4:	2106      	movs	r1, #6
 80040c6:	48a9      	ldr	r0, [pc, #676]	@ (800436c <DispMainTime+0x324>)
 80040c8:	f7ff fbfa 	bl	80038c0 <DrawImage>
		break;
 80040cc:	e03e      	b.n	800414c <DispMainTime+0x104>
	case 3:
		DrawImage(Three,0+h10os,17+h10os,2,5);
 80040ce:	2305      	movs	r3, #5
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	2302      	movs	r3, #2
 80040d4:	2217      	movs	r2, #23
 80040d6:	2106      	movs	r1, #6
 80040d8:	48a5      	ldr	r0, [pc, #660]	@ (8004370 <DispMainTime+0x328>)
 80040da:	f7ff fbf1 	bl	80038c0 <DrawImage>
		break;
 80040de:	e035      	b.n	800414c <DispMainTime+0x104>
	case 4:
		DrawImage(Four,0+h10os,17+h10os,2,5);
 80040e0:	2305      	movs	r3, #5
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	2302      	movs	r3, #2
 80040e6:	2217      	movs	r2, #23
 80040e8:	2106      	movs	r1, #6
 80040ea:	48a2      	ldr	r0, [pc, #648]	@ (8004374 <DispMainTime+0x32c>)
 80040ec:	f7ff fbe8 	bl	80038c0 <DrawImage>
		break;
 80040f0:	e02c      	b.n	800414c <DispMainTime+0x104>
	case 5:
		DrawImage(Five,0+h10os,17+h10os,2,5);
 80040f2:	2305      	movs	r3, #5
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	2302      	movs	r3, #2
 80040f8:	2217      	movs	r2, #23
 80040fa:	2106      	movs	r1, #6
 80040fc:	489e      	ldr	r0, [pc, #632]	@ (8004378 <DispMainTime+0x330>)
 80040fe:	f7ff fbdf 	bl	80038c0 <DrawImage>
		break;
 8004102:	e023      	b.n	800414c <DispMainTime+0x104>
	case 6:
		DrawImage(Six,0+h10os,17+h10os,2,5);
 8004104:	2305      	movs	r3, #5
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	2302      	movs	r3, #2
 800410a:	2217      	movs	r2, #23
 800410c:	2106      	movs	r1, #6
 800410e:	489b      	ldr	r0, [pc, #620]	@ (800437c <DispMainTime+0x334>)
 8004110:	f7ff fbd6 	bl	80038c0 <DrawImage>
		break;
 8004114:	e01a      	b.n	800414c <DispMainTime+0x104>
	case 7:
		DrawImage(Seven,0+h10os,17+h10os,2,5);
 8004116:	2305      	movs	r3, #5
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	2302      	movs	r3, #2
 800411c:	2217      	movs	r2, #23
 800411e:	2106      	movs	r1, #6
 8004120:	4897      	ldr	r0, [pc, #604]	@ (8004380 <DispMainTime+0x338>)
 8004122:	f7ff fbcd 	bl	80038c0 <DrawImage>
		break;
 8004126:	e011      	b.n	800414c <DispMainTime+0x104>
	case 8:
		DrawImage(Eight,0+h10os,17+h10os,2,5);
 8004128:	2305      	movs	r3, #5
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	2302      	movs	r3, #2
 800412e:	2217      	movs	r2, #23
 8004130:	2106      	movs	r1, #6
 8004132:	4894      	ldr	r0, [pc, #592]	@ (8004384 <DispMainTime+0x33c>)
 8004134:	f7ff fbc4 	bl	80038c0 <DrawImage>
		break;
 8004138:	e008      	b.n	800414c <DispMainTime+0x104>
	case 9:
		DrawImage(Nine,0+h10os,17+h10os,2,5);
 800413a:	2305      	movs	r3, #5
 800413c:	9300      	str	r3, [sp, #0]
 800413e:	2302      	movs	r3, #2
 8004140:	2217      	movs	r2, #23
 8004142:	2106      	movs	r1, #6
 8004144:	4890      	ldr	r0, [pc, #576]	@ (8004388 <DispMainTime+0x340>)
 8004146:	f7ff fbbb 	bl	80038c0 <DrawImage>
		break;
 800414a:	bf00      	nop
	}

	switch (time->hour)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	785b      	ldrb	r3, [r3, #1]
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b09      	cmp	r3, #9
 8004154:	d870      	bhi.n	8004238 <DispMainTime+0x1f0>
 8004156:	a201      	add	r2, pc, #4	@ (adr r2, 800415c <DispMainTime+0x114>)
 8004158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415c:	08004185 	.word	0x08004185
 8004160:	08004197 	.word	0x08004197
 8004164:	080041a9 	.word	0x080041a9
 8004168:	080041bb 	.word	0x080041bb
 800416c:	080041cd 	.word	0x080041cd
 8004170:	080041df 	.word	0x080041df
 8004174:	080041f1 	.word	0x080041f1
 8004178:	08004203 	.word	0x08004203
 800417c:	08004215 	.word	0x08004215
 8004180:	08004227 	.word	0x08004227
	{
	case 0:
		DrawImage(Zero,0+hos,17+hos,2,5);
 8004184:	2305      	movs	r3, #5
 8004186:	9300      	str	r3, [sp, #0]
 8004188:	2302      	movs	r3, #2
 800418a:	222b      	movs	r2, #43	@ 0x2b
 800418c:	211a      	movs	r1, #26
 800418e:	4875      	ldr	r0, [pc, #468]	@ (8004364 <DispMainTime+0x31c>)
 8004190:	f7ff fb96 	bl	80038c0 <DrawImage>
		break;
 8004194:	e050      	b.n	8004238 <DispMainTime+0x1f0>
	case 1:
		DrawImage(One,0+hos,17+hos,2,5);
 8004196:	2305      	movs	r3, #5
 8004198:	9300      	str	r3, [sp, #0]
 800419a:	2302      	movs	r3, #2
 800419c:	222b      	movs	r2, #43	@ 0x2b
 800419e:	211a      	movs	r1, #26
 80041a0:	4871      	ldr	r0, [pc, #452]	@ (8004368 <DispMainTime+0x320>)
 80041a2:	f7ff fb8d 	bl	80038c0 <DrawImage>
		break;
 80041a6:	e047      	b.n	8004238 <DispMainTime+0x1f0>
	case 2:
		DrawImage(Two,0+hos,17+hos,2,5);
 80041a8:	2305      	movs	r3, #5
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	2302      	movs	r3, #2
 80041ae:	222b      	movs	r2, #43	@ 0x2b
 80041b0:	211a      	movs	r1, #26
 80041b2:	486e      	ldr	r0, [pc, #440]	@ (800436c <DispMainTime+0x324>)
 80041b4:	f7ff fb84 	bl	80038c0 <DrawImage>
		break;
 80041b8:	e03e      	b.n	8004238 <DispMainTime+0x1f0>
	case 3:
		DrawImage(Three,0+hos,17+hos,2,5);
 80041ba:	2305      	movs	r3, #5
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	2302      	movs	r3, #2
 80041c0:	222b      	movs	r2, #43	@ 0x2b
 80041c2:	211a      	movs	r1, #26
 80041c4:	486a      	ldr	r0, [pc, #424]	@ (8004370 <DispMainTime+0x328>)
 80041c6:	f7ff fb7b 	bl	80038c0 <DrawImage>
		break;
 80041ca:	e035      	b.n	8004238 <DispMainTime+0x1f0>
	case 4:
		DrawImage(Four,0+hos,17+hos,2,5);
 80041cc:	2305      	movs	r3, #5
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	2302      	movs	r3, #2
 80041d2:	222b      	movs	r2, #43	@ 0x2b
 80041d4:	211a      	movs	r1, #26
 80041d6:	4867      	ldr	r0, [pc, #412]	@ (8004374 <DispMainTime+0x32c>)
 80041d8:	f7ff fb72 	bl	80038c0 <DrawImage>
		break;
 80041dc:	e02c      	b.n	8004238 <DispMainTime+0x1f0>
	case 5:
		DrawImage(Five,0+hos,17+hos,2,5);
 80041de:	2305      	movs	r3, #5
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	2302      	movs	r3, #2
 80041e4:	222b      	movs	r2, #43	@ 0x2b
 80041e6:	211a      	movs	r1, #26
 80041e8:	4863      	ldr	r0, [pc, #396]	@ (8004378 <DispMainTime+0x330>)
 80041ea:	f7ff fb69 	bl	80038c0 <DrawImage>
		break;
 80041ee:	e023      	b.n	8004238 <DispMainTime+0x1f0>
	case 6:
		DrawImage(Six,0+hos,17+hos,2,5);
 80041f0:	2305      	movs	r3, #5
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	2302      	movs	r3, #2
 80041f6:	222b      	movs	r2, #43	@ 0x2b
 80041f8:	211a      	movs	r1, #26
 80041fa:	4860      	ldr	r0, [pc, #384]	@ (800437c <DispMainTime+0x334>)
 80041fc:	f7ff fb60 	bl	80038c0 <DrawImage>
		break;
 8004200:	e01a      	b.n	8004238 <DispMainTime+0x1f0>
	case 7:
		DrawImage(Seven,0+hos,17+hos,2,5);
 8004202:	2305      	movs	r3, #5
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	2302      	movs	r3, #2
 8004208:	222b      	movs	r2, #43	@ 0x2b
 800420a:	211a      	movs	r1, #26
 800420c:	485c      	ldr	r0, [pc, #368]	@ (8004380 <DispMainTime+0x338>)
 800420e:	f7ff fb57 	bl	80038c0 <DrawImage>
		break;
 8004212:	e011      	b.n	8004238 <DispMainTime+0x1f0>
	case 8:
		DrawImage(Eight,0+hos,17+hos,2,5);
 8004214:	2305      	movs	r3, #5
 8004216:	9300      	str	r3, [sp, #0]
 8004218:	2302      	movs	r3, #2
 800421a:	222b      	movs	r2, #43	@ 0x2b
 800421c:	211a      	movs	r1, #26
 800421e:	4859      	ldr	r0, [pc, #356]	@ (8004384 <DispMainTime+0x33c>)
 8004220:	f7ff fb4e 	bl	80038c0 <DrawImage>
		break;
 8004224:	e008      	b.n	8004238 <DispMainTime+0x1f0>
	case 9:
		DrawImage(Nine,0+hos,17+hos,2,5);
 8004226:	2305      	movs	r3, #5
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	2302      	movs	r3, #2
 800422c:	222b      	movs	r2, #43	@ 0x2b
 800422e:	211a      	movs	r1, #26
 8004230:	4855      	ldr	r0, [pc, #340]	@ (8004388 <DispMainTime+0x340>)
 8004232:	f7ff fb45 	bl	80038c0 <DrawImage>
		break;
 8004236:	bf00      	nop
	}

	switch (time->min10)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	789b      	ldrb	r3, [r3, #2]
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b09      	cmp	r3, #9
 8004240:	d870      	bhi.n	8004324 <DispMainTime+0x2dc>
 8004242:	a201      	add	r2, pc, #4	@ (adr r2, 8004248 <DispMainTime+0x200>)
 8004244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004248:	08004271 	.word	0x08004271
 800424c:	08004283 	.word	0x08004283
 8004250:	08004295 	.word	0x08004295
 8004254:	080042a7 	.word	0x080042a7
 8004258:	080042b9 	.word	0x080042b9
 800425c:	080042cb 	.word	0x080042cb
 8004260:	080042dd 	.word	0x080042dd
 8004264:	080042ef 	.word	0x080042ef
 8004268:	08004301 	.word	0x08004301
 800426c:	08004313 	.word	0x08004313
	{
	case 0:
		DrawImage(Zero,0+m10os,17+m10os,2,5);
 8004270:	2305      	movs	r3, #5
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	2302      	movs	r3, #2
 8004276:	224b      	movs	r2, #75	@ 0x4b
 8004278:	213a      	movs	r1, #58	@ 0x3a
 800427a:	483a      	ldr	r0, [pc, #232]	@ (8004364 <DispMainTime+0x31c>)
 800427c:	f7ff fb20 	bl	80038c0 <DrawImage>
		break;
 8004280:	e050      	b.n	8004324 <DispMainTime+0x2dc>
	case 1:
		DrawImage(One,0+m10os,17+m10os,2,5);
 8004282:	2305      	movs	r3, #5
 8004284:	9300      	str	r3, [sp, #0]
 8004286:	2302      	movs	r3, #2
 8004288:	224b      	movs	r2, #75	@ 0x4b
 800428a:	213a      	movs	r1, #58	@ 0x3a
 800428c:	4836      	ldr	r0, [pc, #216]	@ (8004368 <DispMainTime+0x320>)
 800428e:	f7ff fb17 	bl	80038c0 <DrawImage>
		break;
 8004292:	e047      	b.n	8004324 <DispMainTime+0x2dc>
	case 2:
		DrawImage(Two,0+m10os,17+m10os,2,5);
 8004294:	2305      	movs	r3, #5
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	2302      	movs	r3, #2
 800429a:	224b      	movs	r2, #75	@ 0x4b
 800429c:	213a      	movs	r1, #58	@ 0x3a
 800429e:	4833      	ldr	r0, [pc, #204]	@ (800436c <DispMainTime+0x324>)
 80042a0:	f7ff fb0e 	bl	80038c0 <DrawImage>
		break;
 80042a4:	e03e      	b.n	8004324 <DispMainTime+0x2dc>
	case 3:
		DrawImage(Three,0+m10os,17+m10os,2,5);
 80042a6:	2305      	movs	r3, #5
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	2302      	movs	r3, #2
 80042ac:	224b      	movs	r2, #75	@ 0x4b
 80042ae:	213a      	movs	r1, #58	@ 0x3a
 80042b0:	482f      	ldr	r0, [pc, #188]	@ (8004370 <DispMainTime+0x328>)
 80042b2:	f7ff fb05 	bl	80038c0 <DrawImage>
		break;
 80042b6:	e035      	b.n	8004324 <DispMainTime+0x2dc>
	case 4:
		DrawImage(Four,0+m10os,17+m10os,2,5);
 80042b8:	2305      	movs	r3, #5
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	2302      	movs	r3, #2
 80042be:	224b      	movs	r2, #75	@ 0x4b
 80042c0:	213a      	movs	r1, #58	@ 0x3a
 80042c2:	482c      	ldr	r0, [pc, #176]	@ (8004374 <DispMainTime+0x32c>)
 80042c4:	f7ff fafc 	bl	80038c0 <DrawImage>
		break;
 80042c8:	e02c      	b.n	8004324 <DispMainTime+0x2dc>
	case 5:
		DrawImage(Five,0+m10os,17+m10os,2,5);
 80042ca:	2305      	movs	r3, #5
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	2302      	movs	r3, #2
 80042d0:	224b      	movs	r2, #75	@ 0x4b
 80042d2:	213a      	movs	r1, #58	@ 0x3a
 80042d4:	4828      	ldr	r0, [pc, #160]	@ (8004378 <DispMainTime+0x330>)
 80042d6:	f7ff faf3 	bl	80038c0 <DrawImage>
		break;
 80042da:	e023      	b.n	8004324 <DispMainTime+0x2dc>
	case 6:
		DrawImage(Six,0+m10os,17+m10os,2,5);
 80042dc:	2305      	movs	r3, #5
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	2302      	movs	r3, #2
 80042e2:	224b      	movs	r2, #75	@ 0x4b
 80042e4:	213a      	movs	r1, #58	@ 0x3a
 80042e6:	4825      	ldr	r0, [pc, #148]	@ (800437c <DispMainTime+0x334>)
 80042e8:	f7ff faea 	bl	80038c0 <DrawImage>
		break;
 80042ec:	e01a      	b.n	8004324 <DispMainTime+0x2dc>
	case 7:
		DrawImage(Seven,0+m10os,17+m10os,2,5);
 80042ee:	2305      	movs	r3, #5
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	2302      	movs	r3, #2
 80042f4:	224b      	movs	r2, #75	@ 0x4b
 80042f6:	213a      	movs	r1, #58	@ 0x3a
 80042f8:	4821      	ldr	r0, [pc, #132]	@ (8004380 <DispMainTime+0x338>)
 80042fa:	f7ff fae1 	bl	80038c0 <DrawImage>
		break;
 80042fe:	e011      	b.n	8004324 <DispMainTime+0x2dc>
	case 8:
		DrawImage(Eight,0+m10os,17+m10os,2,5);
 8004300:	2305      	movs	r3, #5
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	2302      	movs	r3, #2
 8004306:	224b      	movs	r2, #75	@ 0x4b
 8004308:	213a      	movs	r1, #58	@ 0x3a
 800430a:	481e      	ldr	r0, [pc, #120]	@ (8004384 <DispMainTime+0x33c>)
 800430c:	f7ff fad8 	bl	80038c0 <DrawImage>
		break;
 8004310:	e008      	b.n	8004324 <DispMainTime+0x2dc>
	case 9:
		DrawImage(Nine,0+m10os,17+m10os,2,5);
 8004312:	2305      	movs	r3, #5
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	2302      	movs	r3, #2
 8004318:	224b      	movs	r2, #75	@ 0x4b
 800431a:	213a      	movs	r1, #58	@ 0x3a
 800431c:	481a      	ldr	r0, [pc, #104]	@ (8004388 <DispMainTime+0x340>)
 800431e:	f7ff facf 	bl	80038c0 <DrawImage>
		break;
 8004322:	bf00      	nop
	}

	switch (time->min)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	78db      	ldrb	r3, [r3, #3]
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b09      	cmp	r3, #9
 800432c:	f200 8088 	bhi.w	8004440 <DispMainTime+0x3f8>
 8004330:	a201      	add	r2, pc, #4	@ (adr r2, 8004338 <DispMainTime+0x2f0>)
 8004332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004336:	bf00      	nop
 8004338:	0800438d 	.word	0x0800438d
 800433c:	0800439f 	.word	0x0800439f
 8004340:	080043b1 	.word	0x080043b1
 8004344:	080043c3 	.word	0x080043c3
 8004348:	080043d5 	.word	0x080043d5
 800434c:	080043e7 	.word	0x080043e7
 8004350:	080043f9 	.word	0x080043f9
 8004354:	0800440b 	.word	0x0800440b
 8004358:	0800441d 	.word	0x0800441d
 800435c:	0800442f 	.word	0x0800442f
 8004360:	080055cc 	.word	0x080055cc
 8004364:	080051e4 	.word	0x080051e4
 8004368:	0800522c 	.word	0x0800522c
 800436c:	08005274 	.word	0x08005274
 8004370:	080052bc 	.word	0x080052bc
 8004374:	08005304 	.word	0x08005304
 8004378:	0800534c 	.word	0x0800534c
 800437c:	08005394 	.word	0x08005394
 8004380:	080053dc 	.word	0x080053dc
 8004384:	08005424 	.word	0x08005424
 8004388:	0800546c 	.word	0x0800546c
	{
	case 0:
		DrawImage(Zero,0+mos,17+mos,2,5);
 800438c:	2305      	movs	r3, #5
 800438e:	9300      	str	r3, [sp, #0]
 8004390:	2302      	movs	r3, #2
 8004392:	225f      	movs	r2, #95	@ 0x5f
 8004394:	214e      	movs	r1, #78	@ 0x4e
 8004396:	48a2      	ldr	r0, [pc, #648]	@ (8004620 <DispMainTime+0x5d8>)
 8004398:	f7ff fa92 	bl	80038c0 <DrawImage>
		break;
 800439c:	e050      	b.n	8004440 <DispMainTime+0x3f8>
	case 1:
		DrawImage(One,0+mos,17+mos,2,5);
 800439e:	2305      	movs	r3, #5
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	2302      	movs	r3, #2
 80043a4:	225f      	movs	r2, #95	@ 0x5f
 80043a6:	214e      	movs	r1, #78	@ 0x4e
 80043a8:	489e      	ldr	r0, [pc, #632]	@ (8004624 <DispMainTime+0x5dc>)
 80043aa:	f7ff fa89 	bl	80038c0 <DrawImage>
		break;
 80043ae:	e047      	b.n	8004440 <DispMainTime+0x3f8>
	case 2:
		DrawImage(Two,0+mos,17+mos,2,5);
 80043b0:	2305      	movs	r3, #5
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	2302      	movs	r3, #2
 80043b6:	225f      	movs	r2, #95	@ 0x5f
 80043b8:	214e      	movs	r1, #78	@ 0x4e
 80043ba:	489b      	ldr	r0, [pc, #620]	@ (8004628 <DispMainTime+0x5e0>)
 80043bc:	f7ff fa80 	bl	80038c0 <DrawImage>
		break;
 80043c0:	e03e      	b.n	8004440 <DispMainTime+0x3f8>
	case 3:
		DrawImage(Three,0+mos,17+mos,2,5);
 80043c2:	2305      	movs	r3, #5
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	2302      	movs	r3, #2
 80043c8:	225f      	movs	r2, #95	@ 0x5f
 80043ca:	214e      	movs	r1, #78	@ 0x4e
 80043cc:	4897      	ldr	r0, [pc, #604]	@ (800462c <DispMainTime+0x5e4>)
 80043ce:	f7ff fa77 	bl	80038c0 <DrawImage>
		break;
 80043d2:	e035      	b.n	8004440 <DispMainTime+0x3f8>
	case 4:
		DrawImage(Four,0+mos,17+mos,2,5);
 80043d4:	2305      	movs	r3, #5
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	2302      	movs	r3, #2
 80043da:	225f      	movs	r2, #95	@ 0x5f
 80043dc:	214e      	movs	r1, #78	@ 0x4e
 80043de:	4894      	ldr	r0, [pc, #592]	@ (8004630 <DispMainTime+0x5e8>)
 80043e0:	f7ff fa6e 	bl	80038c0 <DrawImage>
		break;
 80043e4:	e02c      	b.n	8004440 <DispMainTime+0x3f8>
	case 5:
		DrawImage(Five,0+mos,17+mos,2,5);
 80043e6:	2305      	movs	r3, #5
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	2302      	movs	r3, #2
 80043ec:	225f      	movs	r2, #95	@ 0x5f
 80043ee:	214e      	movs	r1, #78	@ 0x4e
 80043f0:	4890      	ldr	r0, [pc, #576]	@ (8004634 <DispMainTime+0x5ec>)
 80043f2:	f7ff fa65 	bl	80038c0 <DrawImage>
		break;
 80043f6:	e023      	b.n	8004440 <DispMainTime+0x3f8>
	case 6:
		DrawImage(Six,0+mos,17+mos,2,5);
 80043f8:	2305      	movs	r3, #5
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	2302      	movs	r3, #2
 80043fe:	225f      	movs	r2, #95	@ 0x5f
 8004400:	214e      	movs	r1, #78	@ 0x4e
 8004402:	488d      	ldr	r0, [pc, #564]	@ (8004638 <DispMainTime+0x5f0>)
 8004404:	f7ff fa5c 	bl	80038c0 <DrawImage>
		break;
 8004408:	e01a      	b.n	8004440 <DispMainTime+0x3f8>
	case 7:
		DrawImage(Seven,0+mos,17+mos,2,5);
 800440a:	2305      	movs	r3, #5
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	2302      	movs	r3, #2
 8004410:	225f      	movs	r2, #95	@ 0x5f
 8004412:	214e      	movs	r1, #78	@ 0x4e
 8004414:	4889      	ldr	r0, [pc, #548]	@ (800463c <DispMainTime+0x5f4>)
 8004416:	f7ff fa53 	bl	80038c0 <DrawImage>
		break;
 800441a:	e011      	b.n	8004440 <DispMainTime+0x3f8>
	case 8:
		DrawImage(Eight,0+mos,17+mos,2,5);
 800441c:	2305      	movs	r3, #5
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	2302      	movs	r3, #2
 8004422:	225f      	movs	r2, #95	@ 0x5f
 8004424:	214e      	movs	r1, #78	@ 0x4e
 8004426:	4886      	ldr	r0, [pc, #536]	@ (8004640 <DispMainTime+0x5f8>)
 8004428:	f7ff fa4a 	bl	80038c0 <DrawImage>
		break;
 800442c:	e008      	b.n	8004440 <DispMainTime+0x3f8>
	case 9:
		DrawImage(Nine,0+mos,17+mos,2,5);
 800442e:	2305      	movs	r3, #5
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	2302      	movs	r3, #2
 8004434:	225f      	movs	r2, #95	@ 0x5f
 8004436:	214e      	movs	r1, #78	@ 0x4e
 8004438:	4882      	ldr	r0, [pc, #520]	@ (8004644 <DispMainTime+0x5fc>)
 800443a:	f7ff fa41 	bl	80038c0 <DrawImage>
		break;
 800443e:	bf00      	nop
	}

	switch (time->sec10)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	791b      	ldrb	r3, [r3, #4]
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b09      	cmp	r3, #9
 8004448:	d870      	bhi.n	800452c <DispMainTime+0x4e4>
 800444a:	a201      	add	r2, pc, #4	@ (adr r2, 8004450 <DispMainTime+0x408>)
 800444c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004450:	08004479 	.word	0x08004479
 8004454:	0800448b 	.word	0x0800448b
 8004458:	0800449d 	.word	0x0800449d
 800445c:	080044af 	.word	0x080044af
 8004460:	080044c1 	.word	0x080044c1
 8004464:	080044d3 	.word	0x080044d3
 8004468:	080044e5 	.word	0x080044e5
 800446c:	080044f7 	.word	0x080044f7
 8004470:	08004509 	.word	0x08004509
 8004474:	0800451b 	.word	0x0800451b
	{
	case 0:
		DrawImage(Zeros,0+s10os,8+s10os,3,5);
 8004478:	2305      	movs	r3, #5
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	2303      	movs	r3, #3
 800447e:	226e      	movs	r2, #110	@ 0x6e
 8004480:	2166      	movs	r1, #102	@ 0x66
 8004482:	4871      	ldr	r0, [pc, #452]	@ (8004648 <DispMainTime+0x600>)
 8004484:	f7ff fa1c 	bl	80038c0 <DrawImage>
		break;
 8004488:	e050      	b.n	800452c <DispMainTime+0x4e4>
	case 1:
		DrawImage(Ones,0+s10os,8+s10os,3,5);
 800448a:	2305      	movs	r3, #5
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	2303      	movs	r3, #3
 8004490:	226e      	movs	r2, #110	@ 0x6e
 8004492:	2166      	movs	r1, #102	@ 0x66
 8004494:	486d      	ldr	r0, [pc, #436]	@ (800464c <DispMainTime+0x604>)
 8004496:	f7ff fa13 	bl	80038c0 <DrawImage>
		break;
 800449a:	e047      	b.n	800452c <DispMainTime+0x4e4>
	case 2:
		DrawImage(Twos,0+s10os,8+s10os,3,5);
 800449c:	2305      	movs	r3, #5
 800449e:	9300      	str	r3, [sp, #0]
 80044a0:	2303      	movs	r3, #3
 80044a2:	226e      	movs	r2, #110	@ 0x6e
 80044a4:	2166      	movs	r1, #102	@ 0x66
 80044a6:	486a      	ldr	r0, [pc, #424]	@ (8004650 <DispMainTime+0x608>)
 80044a8:	f7ff fa0a 	bl	80038c0 <DrawImage>
		break;
 80044ac:	e03e      	b.n	800452c <DispMainTime+0x4e4>
	case 3:
		DrawImage(Threes,0+s10os,8+s10os,3,5);
 80044ae:	2305      	movs	r3, #5
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	2303      	movs	r3, #3
 80044b4:	226e      	movs	r2, #110	@ 0x6e
 80044b6:	2166      	movs	r1, #102	@ 0x66
 80044b8:	4866      	ldr	r0, [pc, #408]	@ (8004654 <DispMainTime+0x60c>)
 80044ba:	f7ff fa01 	bl	80038c0 <DrawImage>
		break;
 80044be:	e035      	b.n	800452c <DispMainTime+0x4e4>
	case 4:
		DrawImage(Fours,0+s10os,8+s10os,3,5);
 80044c0:	2305      	movs	r3, #5
 80044c2:	9300      	str	r3, [sp, #0]
 80044c4:	2303      	movs	r3, #3
 80044c6:	226e      	movs	r2, #110	@ 0x6e
 80044c8:	2166      	movs	r1, #102	@ 0x66
 80044ca:	4863      	ldr	r0, [pc, #396]	@ (8004658 <DispMainTime+0x610>)
 80044cc:	f7ff f9f8 	bl	80038c0 <DrawImage>
		break;
 80044d0:	e02c      	b.n	800452c <DispMainTime+0x4e4>
	case 5:
		DrawImage(Fives,0+s10os,8+s10os,3,5);
 80044d2:	2305      	movs	r3, #5
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	2303      	movs	r3, #3
 80044d8:	226e      	movs	r2, #110	@ 0x6e
 80044da:	2166      	movs	r1, #102	@ 0x66
 80044dc:	485f      	ldr	r0, [pc, #380]	@ (800465c <DispMainTime+0x614>)
 80044de:	f7ff f9ef 	bl	80038c0 <DrawImage>
		break;
 80044e2:	e023      	b.n	800452c <DispMainTime+0x4e4>
	case 6:
		DrawImage(Sixs,0+s10os,8+s10os,3,5);
 80044e4:	2305      	movs	r3, #5
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	2303      	movs	r3, #3
 80044ea:	226e      	movs	r2, #110	@ 0x6e
 80044ec:	2166      	movs	r1, #102	@ 0x66
 80044ee:	485c      	ldr	r0, [pc, #368]	@ (8004660 <DispMainTime+0x618>)
 80044f0:	f7ff f9e6 	bl	80038c0 <DrawImage>
		break;
 80044f4:	e01a      	b.n	800452c <DispMainTime+0x4e4>
	case 7:
		DrawImage(Sevens,0+s10os,8+s10os,3,5);
 80044f6:	2305      	movs	r3, #5
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	2303      	movs	r3, #3
 80044fc:	226e      	movs	r2, #110	@ 0x6e
 80044fe:	2166      	movs	r1, #102	@ 0x66
 8004500:	4858      	ldr	r0, [pc, #352]	@ (8004664 <DispMainTime+0x61c>)
 8004502:	f7ff f9dd 	bl	80038c0 <DrawImage>
		break;
 8004506:	e011      	b.n	800452c <DispMainTime+0x4e4>
	case 8:
		DrawImage(Eights,0+s10os,8+s10os,3,5);
 8004508:	2305      	movs	r3, #5
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	2303      	movs	r3, #3
 800450e:	226e      	movs	r2, #110	@ 0x6e
 8004510:	2166      	movs	r1, #102	@ 0x66
 8004512:	4855      	ldr	r0, [pc, #340]	@ (8004668 <DispMainTime+0x620>)
 8004514:	f7ff f9d4 	bl	80038c0 <DrawImage>
		break;
 8004518:	e008      	b.n	800452c <DispMainTime+0x4e4>
	case 9:
		DrawImage(Nines,0+s10os,8+s10os,3,5);
 800451a:	2305      	movs	r3, #5
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	2303      	movs	r3, #3
 8004520:	226e      	movs	r2, #110	@ 0x6e
 8004522:	2166      	movs	r1, #102	@ 0x66
 8004524:	4851      	ldr	r0, [pc, #324]	@ (800466c <DispMainTime+0x624>)
 8004526:	f7ff f9cb 	bl	80038c0 <DrawImage>
		break;
 800452a:	bf00      	nop
	}

	switch (time->sec)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	795b      	ldrb	r3, [r3, #5]
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b09      	cmp	r3, #9
 8004534:	d870      	bhi.n	8004618 <DispMainTime+0x5d0>
 8004536:	a201      	add	r2, pc, #4	@ (adr r2, 800453c <DispMainTime+0x4f4>)
 8004538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453c:	08004565 	.word	0x08004565
 8004540:	08004577 	.word	0x08004577
 8004544:	08004589 	.word	0x08004589
 8004548:	0800459b 	.word	0x0800459b
 800454c:	080045ad 	.word	0x080045ad
 8004550:	080045bf 	.word	0x080045bf
 8004554:	080045d1 	.word	0x080045d1
 8004558:	080045e3 	.word	0x080045e3
 800455c:	080045f5 	.word	0x080045f5
 8004560:	08004607 	.word	0x08004607
	{
	case 0:
		DrawImage(Zeros,0+sos,8+sos,3,5);
 8004564:	2305      	movs	r3, #5
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	2303      	movs	r3, #3
 800456a:	2279      	movs	r2, #121	@ 0x79
 800456c:	2171      	movs	r1, #113	@ 0x71
 800456e:	4836      	ldr	r0, [pc, #216]	@ (8004648 <DispMainTime+0x600>)
 8004570:	f7ff f9a6 	bl	80038c0 <DrawImage>
		break;
 8004574:	e050      	b.n	8004618 <DispMainTime+0x5d0>
	case 1:
		DrawImage(Ones,0+sos,8+sos,3,5);
 8004576:	2305      	movs	r3, #5
 8004578:	9300      	str	r3, [sp, #0]
 800457a:	2303      	movs	r3, #3
 800457c:	2279      	movs	r2, #121	@ 0x79
 800457e:	2171      	movs	r1, #113	@ 0x71
 8004580:	4832      	ldr	r0, [pc, #200]	@ (800464c <DispMainTime+0x604>)
 8004582:	f7ff f99d 	bl	80038c0 <DrawImage>
		break;
 8004586:	e047      	b.n	8004618 <DispMainTime+0x5d0>
	case 2:
		DrawImage(Twos,0+sos,8+sos,3,5);
 8004588:	2305      	movs	r3, #5
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	2303      	movs	r3, #3
 800458e:	2279      	movs	r2, #121	@ 0x79
 8004590:	2171      	movs	r1, #113	@ 0x71
 8004592:	482f      	ldr	r0, [pc, #188]	@ (8004650 <DispMainTime+0x608>)
 8004594:	f7ff f994 	bl	80038c0 <DrawImage>
		break;
 8004598:	e03e      	b.n	8004618 <DispMainTime+0x5d0>
	case 3:
		DrawImage(Threes,0+sos,8+sos,3,5);
 800459a:	2305      	movs	r3, #5
 800459c:	9300      	str	r3, [sp, #0]
 800459e:	2303      	movs	r3, #3
 80045a0:	2279      	movs	r2, #121	@ 0x79
 80045a2:	2171      	movs	r1, #113	@ 0x71
 80045a4:	482b      	ldr	r0, [pc, #172]	@ (8004654 <DispMainTime+0x60c>)
 80045a6:	f7ff f98b 	bl	80038c0 <DrawImage>
		break;
 80045aa:	e035      	b.n	8004618 <DispMainTime+0x5d0>
	case 4:
		DrawImage(Fours,0+sos,8+sos,3,5);
 80045ac:	2305      	movs	r3, #5
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	2303      	movs	r3, #3
 80045b2:	2279      	movs	r2, #121	@ 0x79
 80045b4:	2171      	movs	r1, #113	@ 0x71
 80045b6:	4828      	ldr	r0, [pc, #160]	@ (8004658 <DispMainTime+0x610>)
 80045b8:	f7ff f982 	bl	80038c0 <DrawImage>
		break;
 80045bc:	e02c      	b.n	8004618 <DispMainTime+0x5d0>
	case 5:
		DrawImage(Fives,0+sos,8+sos,3,5);
 80045be:	2305      	movs	r3, #5
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	2303      	movs	r3, #3
 80045c4:	2279      	movs	r2, #121	@ 0x79
 80045c6:	2171      	movs	r1, #113	@ 0x71
 80045c8:	4824      	ldr	r0, [pc, #144]	@ (800465c <DispMainTime+0x614>)
 80045ca:	f7ff f979 	bl	80038c0 <DrawImage>
		break;
 80045ce:	e023      	b.n	8004618 <DispMainTime+0x5d0>
	case 6:
		DrawImage(Sixs,0+sos,8+sos,3,5);
 80045d0:	2305      	movs	r3, #5
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	2303      	movs	r3, #3
 80045d6:	2279      	movs	r2, #121	@ 0x79
 80045d8:	2171      	movs	r1, #113	@ 0x71
 80045da:	4821      	ldr	r0, [pc, #132]	@ (8004660 <DispMainTime+0x618>)
 80045dc:	f7ff f970 	bl	80038c0 <DrawImage>
		break;
 80045e0:	e01a      	b.n	8004618 <DispMainTime+0x5d0>
	case 7:
		DrawImage(Sevens,0+sos,8+sos,3,5);
 80045e2:	2305      	movs	r3, #5
 80045e4:	9300      	str	r3, [sp, #0]
 80045e6:	2303      	movs	r3, #3
 80045e8:	2279      	movs	r2, #121	@ 0x79
 80045ea:	2171      	movs	r1, #113	@ 0x71
 80045ec:	481d      	ldr	r0, [pc, #116]	@ (8004664 <DispMainTime+0x61c>)
 80045ee:	f7ff f967 	bl	80038c0 <DrawImage>
		break;
 80045f2:	e011      	b.n	8004618 <DispMainTime+0x5d0>
	case 8:
		DrawImage(Eights,0+sos,8+sos,3,5);
 80045f4:	2305      	movs	r3, #5
 80045f6:	9300      	str	r3, [sp, #0]
 80045f8:	2303      	movs	r3, #3
 80045fa:	2279      	movs	r2, #121	@ 0x79
 80045fc:	2171      	movs	r1, #113	@ 0x71
 80045fe:	481a      	ldr	r0, [pc, #104]	@ (8004668 <DispMainTime+0x620>)
 8004600:	f7ff f95e 	bl	80038c0 <DrawImage>
		break;
 8004604:	e008      	b.n	8004618 <DispMainTime+0x5d0>
	case 9:
		DrawImage(Nines,0+sos,8+sos,3,5);
 8004606:	2305      	movs	r3, #5
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	2303      	movs	r3, #3
 800460c:	2279      	movs	r2, #121	@ 0x79
 800460e:	2171      	movs	r1, #113	@ 0x71
 8004610:	4816      	ldr	r0, [pc, #88]	@ (800466c <DispMainTime+0x624>)
 8004612:	f7ff f955 	bl	80038c0 <DrawImage>
		break;
 8004616:	bf00      	nop
	}
}
 8004618:	bf00      	nop
 800461a:	3708      	adds	r7, #8
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	080051e4 	.word	0x080051e4
 8004624:	0800522c 	.word	0x0800522c
 8004628:	08005274 	.word	0x08005274
 800462c:	080052bc 	.word	0x080052bc
 8004630:	08005304 	.word	0x08005304
 8004634:	0800534c 	.word	0x0800534c
 8004638:	08005394 	.word	0x08005394
 800463c:	080053dc 	.word	0x080053dc
 8004640:	08005424 	.word	0x08005424
 8004644:	0800546c 	.word	0x0800546c
 8004648:	080054b4 	.word	0x080054b4
 800464c:	080054d0 	.word	0x080054d0
 8004650:	080054ec 	.word	0x080054ec
 8004654:	08005508 	.word	0x08005508
 8004658:	08005524 	.word	0x08005524
 800465c:	08005540 	.word	0x08005540
 8004660:	0800555c 	.word	0x0800555c
 8004664:	08005578 	.word	0x08005578
 8004668:	08005594 	.word	0x08005594
 800466c:	080055b0 	.word	0x080055b0

08004670 <DispMenuName>:
/* Includes ------------------------------------------------------------------*/
#include "MenuView.h"

/* Global Variables ----------------------------------------------------------*/
void DispMenuName (uint8_t status)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	4603      	mov	r3, r0
 8004678:	71fb      	strb	r3, [r7, #7]
	GotoXP(14,2);
 800467a:	2102      	movs	r1, #2
 800467c:	200e      	movs	r0, #14
 800467e:	f7ff f817 	bl	80036b0 <GotoXP>
	WriteString("-MENU-");
 8004682:	4835      	ldr	r0, [pc, #212]	@ (8004758 <DispMenuName+0xe8>)
 8004684:	f7ff f89a 	bl	80037bc <WriteString>
	switch (status)
 8004688:	79fb      	ldrb	r3, [r7, #7]
 800468a:	3b01      	subs	r3, #1
 800468c:	2b05      	cmp	r3, #5
 800468e:	d85d      	bhi.n	800474c <DispMenuName+0xdc>
 8004690:	a201      	add	r2, pc, #4	@ (adr r2, 8004698 <DispMenuName+0x28>)
 8004692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004696:	bf00      	nop
 8004698:	080046cb 	.word	0x080046cb
 800469c:	080046e5 	.word	0x080046e5
 80046a0:	080046ff 	.word	0x080046ff
 80046a4:	08004719 	.word	0x08004719
 80046a8:	08004733 	.word	0x08004733
 80046ac:	080046b1 	.word	0x080046b1
	{
	case 6:
		DeleteString(5, 5, 9);
 80046b0:	2209      	movs	r2, #9
 80046b2:	2105      	movs	r1, #5
 80046b4:	2005      	movs	r0, #5
 80046b6:	f7ff f89d 	bl	80037f4 <DeleteString>
		GotoXP(14,5);
 80046ba:	2105      	movs	r1, #5
 80046bc:	200e      	movs	r0, #14
 80046be:	f7fe fff7 	bl	80036b0 <GotoXP>
		WriteString("<Back>   ");
 80046c2:	4826      	ldr	r0, [pc, #152]	@ (800475c <DispMenuName+0xec>)
 80046c4:	f7ff f87a 	bl	80037bc <WriteString>
		break;
 80046c8:	e041      	b.n	800474e <DispMenuName+0xde>
	case 1:
		DeleteString(5, 5, 9);
 80046ca:	2209      	movs	r2, #9
 80046cc:	2105      	movs	r1, #5
 80046ce:	2005      	movs	r0, #5
 80046d0:	f7ff f890 	bl	80037f4 <DeleteString>
		GotoXP(11,5);
 80046d4:	2105      	movs	r1, #5
 80046d6:	200b      	movs	r0, #11
 80046d8:	f7fe ffea 	bl	80036b0 <GotoXP>
		WriteString("<Alarm>  ");
 80046dc:	4820      	ldr	r0, [pc, #128]	@ (8004760 <DispMenuName+0xf0>)
 80046de:	f7ff f86d 	bl	80037bc <WriteString>
		break;
 80046e2:	e034      	b.n	800474e <DispMenuName+0xde>
	case 2:
		DeleteString(5, 5, 9);
 80046e4:	2209      	movs	r2, #9
 80046e6:	2105      	movs	r1, #5
 80046e8:	2005      	movs	r0, #5
 80046ea:	f7ff f883 	bl	80037f4 <DeleteString>
		GotoXP(5,5);
 80046ee:	2105      	movs	r1, #5
 80046f0:	2005      	movs	r0, #5
 80046f2:	f7fe ffdd 	bl	80036b0 <GotoXP>
		WriteString("<Counter>");
 80046f6:	481b      	ldr	r0, [pc, #108]	@ (8004764 <DispMenuName+0xf4>)
 80046f8:	f7ff f860 	bl	80037bc <WriteString>
		break;
 80046fc:	e027      	b.n	800474e <DispMenuName+0xde>
	case 3:
		DeleteString(5, 5, 9);
 80046fe:	2209      	movs	r2, #9
 8004700:	2105      	movs	r1, #5
 8004702:	2005      	movs	r0, #5
 8004704:	f7ff f876 	bl	80037f4 <DeleteString>
		GotoXP(11,5);
 8004708:	2105      	movs	r1, #5
 800470a:	200b      	movs	r0, #11
 800470c:	f7fe ffd0 	bl	80036b0 <GotoXP>
		WriteString("<Flash>  ");
 8004710:	4815      	ldr	r0, [pc, #84]	@ (8004768 <DispMenuName+0xf8>)
 8004712:	f7ff f853 	bl	80037bc <WriteString>
		break;
 8004716:	e01a      	b.n	800474e <DispMenuName+0xde>
	case 4:
		DeleteString(5, 5, 9);
 8004718:	2209      	movs	r2, #9
 800471a:	2105      	movs	r1, #5
 800471c:	2005      	movs	r0, #5
 800471e:	f7ff f869 	bl	80037f4 <DeleteString>
		GotoXP(5,5);
 8004722:	2105      	movs	r1, #5
 8004724:	2005      	movs	r0, #5
 8004726:	f7fe ffc3 	bl	80036b0 <GotoXP>
		WriteString("<Setting>");
 800472a:	4810      	ldr	r0, [pc, #64]	@ (800476c <DispMenuName+0xfc>)
 800472c:	f7ff f846 	bl	80037bc <WriteString>
		break;
 8004730:	e00d      	b.n	800474e <DispMenuName+0xde>
	case 5:
		DeleteString(5, 5, 9);
 8004732:	2209      	movs	r2, #9
 8004734:	2105      	movs	r1, #5
 8004736:	2005      	movs	r0, #5
 8004738:	f7ff f85c 	bl	80037f4 <DeleteString>
		GotoXP(8,5);
 800473c:	2105      	movs	r1, #5
 800473e:	2008      	movs	r0, #8
 8004740:	f7fe ffb6 	bl	80036b0 <GotoXP>
		WriteString("<Credit> ");
 8004744:	480a      	ldr	r0, [pc, #40]	@ (8004770 <DispMenuName+0x100>)
 8004746:	f7ff f839 	bl	80037bc <WriteString>
		break;
 800474a:	e000      	b.n	800474e <DispMenuName+0xde>
	default:
		break;
 800474c:	bf00      	nop
	}
}
 800474e:	bf00      	nop
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	08004ee0 	.word	0x08004ee0
 800475c:	08004ee8 	.word	0x08004ee8
 8004760:	08004ef4 	.word	0x08004ef4
 8004764:	08004f00 	.word	0x08004f00
 8004768:	08004f0c 	.word	0x08004f0c
 800476c:	08004f18 	.word	0x08004f18
 8004770:	08004f24 	.word	0x08004f24

08004774 <DispMenuIcon>:

void DispMenuIcon (uint8_t Status)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af02      	add	r7, sp, #8
 800477a:	4603      	mov	r3, r0
 800477c:	71fb      	strb	r3, [r7, #7]
	switch (Status)
 800477e:	79fb      	ldrb	r3, [r7, #7]
 8004780:	3b01      	subs	r3, #1
 8004782:	2b05      	cmp	r3, #5
 8004784:	d844      	bhi.n	8004810 <DispMenuIcon+0x9c>
 8004786:	a201      	add	r2, pc, #4	@ (adr r2, 800478c <DispMenuIcon+0x18>)
 8004788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478c:	080047b7 	.word	0x080047b7
 8004790:	080047c9 	.word	0x080047c9
 8004794:	080047db 	.word	0x080047db
 8004798:	080047ed 	.word	0x080047ed
 800479c:	080047ff 	.word	0x080047ff
 80047a0:	080047a5 	.word	0x080047a5
	{
	case 6:
		DrawImage(BackMenu, 82,113,2,5);
 80047a4:	2305      	movs	r3, #5
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	2302      	movs	r3, #2
 80047aa:	2271      	movs	r2, #113	@ 0x71
 80047ac:	2152      	movs	r1, #82	@ 0x52
 80047ae:	4830      	ldr	r0, [pc, #192]	@ (8004870 <DispMenuIcon+0xfc>)
 80047b0:	f7ff f886 	bl	80038c0 <DrawImage>
		break;
 80047b4:	e02c      	b.n	8004810 <DispMenuIcon+0x9c>
	case 1:
		DrawImage(AlarmMenu, 82,113,2,5);
 80047b6:	2305      	movs	r3, #5
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	2302      	movs	r3, #2
 80047bc:	2271      	movs	r2, #113	@ 0x71
 80047be:	2152      	movs	r1, #82	@ 0x52
 80047c0:	482c      	ldr	r0, [pc, #176]	@ (8004874 <DispMenuIcon+0x100>)
 80047c2:	f7ff f87d 	bl	80038c0 <DrawImage>
		break;
 80047c6:	e023      	b.n	8004810 <DispMenuIcon+0x9c>
	case 2:
		DrawImage(CounterMenu, 82,113,2,5);
 80047c8:	2305      	movs	r3, #5
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	2302      	movs	r3, #2
 80047ce:	2271      	movs	r2, #113	@ 0x71
 80047d0:	2152      	movs	r1, #82	@ 0x52
 80047d2:	4829      	ldr	r0, [pc, #164]	@ (8004878 <DispMenuIcon+0x104>)
 80047d4:	f7ff f874 	bl	80038c0 <DrawImage>
		break;
 80047d8:	e01a      	b.n	8004810 <DispMenuIcon+0x9c>
	case 3:
		DrawImage(FlashMenu, 82,113,2,5);
 80047da:	2305      	movs	r3, #5
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	2302      	movs	r3, #2
 80047e0:	2271      	movs	r2, #113	@ 0x71
 80047e2:	2152      	movs	r1, #82	@ 0x52
 80047e4:	4825      	ldr	r0, [pc, #148]	@ (800487c <DispMenuIcon+0x108>)
 80047e6:	f7ff f86b 	bl	80038c0 <DrawImage>
		break;
 80047ea:	e011      	b.n	8004810 <DispMenuIcon+0x9c>
	case 4:
		DrawImage(SettingMenu, 82,113,2,5);
 80047ec:	2305      	movs	r3, #5
 80047ee:	9300      	str	r3, [sp, #0]
 80047f0:	2302      	movs	r3, #2
 80047f2:	2271      	movs	r2, #113	@ 0x71
 80047f4:	2152      	movs	r1, #82	@ 0x52
 80047f6:	4822      	ldr	r0, [pc, #136]	@ (8004880 <DispMenuIcon+0x10c>)
 80047f8:	f7ff f862 	bl	80038c0 <DrawImage>
		break;
 80047fc:	e008      	b.n	8004810 <DispMenuIcon+0x9c>
	case 5:
		DrawImage(CreditMenu, 82,113,2,5);
 80047fe:	2305      	movs	r3, #5
 8004800:	9300      	str	r3, [sp, #0]
 8004802:	2302      	movs	r3, #2
 8004804:	2271      	movs	r2, #113	@ 0x71
 8004806:	2152      	movs	r1, #82	@ 0x52
 8004808:	481e      	ldr	r0, [pc, #120]	@ (8004884 <DispMenuIcon+0x110>)
 800480a:	f7ff f859 	bl	80038c0 <DrawImage>
		break;
 800480e:	bf00      	nop
	default:
	}
	GotoXP(78,1);
 8004810:	2101      	movs	r1, #1
 8004812:	204e      	movs	r0, #78	@ 0x4e
 8004814:	f7fe ff4c 	bl	80036b0 <GotoXP>
	WriteCol(0xF0);
 8004818:	20f0      	movs	r0, #240	@ 0xf0
 800481a:	f7fe ff8b 	bl	8003734 <WriteCol>
	for (uint8_t i = 80; i<= 116; i++)
 800481e:	2350      	movs	r3, #80	@ 0x50
 8004820:	73fb      	strb	r3, [r7, #15]
 8004822:	e005      	b.n	8004830 <DispMenuIcon+0xbc>
		WriteCol(0x10);
 8004824:	2010      	movs	r0, #16
 8004826:	f7fe ff85 	bl	8003734 <WriteCol>
	for (uint8_t i = 80; i<= 116; i++)
 800482a:	7bfb      	ldrb	r3, [r7, #15]
 800482c:	3301      	adds	r3, #1
 800482e:	73fb      	strb	r3, [r7, #15]
 8004830:	7bfb      	ldrb	r3, [r7, #15]
 8004832:	2b74      	cmp	r3, #116	@ 0x74
 8004834:	d9f6      	bls.n	8004824 <DispMenuIcon+0xb0>
	WriteCol(0xF0);
 8004836:	20f0      	movs	r0, #240	@ 0xf0
 8004838:	f7fe ff7c 	bl	8003734 <WriteCol>
	GotoXP(78,6);
 800483c:	2106      	movs	r1, #6
 800483e:	204e      	movs	r0, #78	@ 0x4e
 8004840:	f7fe ff36 	bl	80036b0 <GotoXP>
	WriteCol(0x0F);
 8004844:	200f      	movs	r0, #15
 8004846:	f7fe ff75 	bl	8003734 <WriteCol>
	for (uint8_t i = 80; i<= 116; i++)
 800484a:	2350      	movs	r3, #80	@ 0x50
 800484c:	73bb      	strb	r3, [r7, #14]
 800484e:	e005      	b.n	800485c <DispMenuIcon+0xe8>
		WriteCol(0x08);
 8004850:	2008      	movs	r0, #8
 8004852:	f7fe ff6f 	bl	8003734 <WriteCol>
	for (uint8_t i = 80; i<= 116; i++)
 8004856:	7bbb      	ldrb	r3, [r7, #14]
 8004858:	3301      	adds	r3, #1
 800485a:	73bb      	strb	r3, [r7, #14]
 800485c:	7bbb      	ldrb	r3, [r7, #14]
 800485e:	2b74      	cmp	r3, #116	@ 0x74
 8004860:	d9f6      	bls.n	8004850 <DispMenuIcon+0xdc>
	WriteCol(0x0F);
 8004862:	200f      	movs	r0, #15
 8004864:	f7fe ff66 	bl	8003734 <WriteCol>
}
 8004868:	bf00      	nop
 800486a:	3710      	adds	r7, #16
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	0800586c 	.word	0x0800586c
 8004874:	080055ec 	.word	0x080055ec
 8004878:	0800566c 	.word	0x0800566c
 800487c:	080056ec 	.word	0x080056ec
 8004880:	0800576c 	.word	0x0800576c
 8004884:	080057ec 	.word	0x080057ec

08004888 <Beep_Init>:
uint8_t uBeepOn = DISABLE;
uint32_t uPeriod, uDuty;


/* Private functions ---------------------------------------------------------*/
void Beep_Init (TIM_HandleTypeDef *pTimer, uint32_t uTimChan) {
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
	pTimCtrlBeep = pTimer;
 8004892:	4a05      	ldr	r2, [pc, #20]	@ (80048a8 <Beep_Init+0x20>)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6013      	str	r3, [r2, #0]
	uTimChannel = uTimChan;
 8004898:	4a04      	ldr	r2, [pc, #16]	@ (80048ac <Beep_Init+0x24>)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	6013      	str	r3, [r2, #0]
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bc80      	pop	{r7}
 80048a6:	4770      	bx	lr
 80048a8:	2000055c 	.word	0x2000055c
 80048ac:	20000560 	.word	0x20000560

080048b0 <Button_Init>:
/* Global variables ----------------------------------------------------------*/
GPIO_TypeDef *pGpioCtrlBtnUp, *pGpioCtrlBtnDown, *pGpioCtrlBtnPush;
uint16_t uGpioPinUp, uGpioPinDown, uGpioPinPush;

/* Private functions ---------------------------------------------------------*/
void Button_Init (GPIO_TypeDef *pGpioUp, uint16_t uPinUp, GPIO_TypeDef *pGpioDown, uint16_t uPinDown, GPIO_TypeDef *pGpioPush, uint16_t uPinPush) {
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	607a      	str	r2, [r7, #4]
 80048ba:	461a      	mov	r2, r3
 80048bc:	460b      	mov	r3, r1
 80048be:	817b      	strh	r3, [r7, #10]
 80048c0:	4613      	mov	r3, r2
 80048c2:	813b      	strh	r3, [r7, #8]
	pGpioCtrlBtnUp = pGpioUp;
 80048c4:	4a0b      	ldr	r2, [pc, #44]	@ (80048f4 <Button_Init+0x44>)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6013      	str	r3, [r2, #0]
	pGpioCtrlBtnDown = pGpioDown;
 80048ca:	4a0b      	ldr	r2, [pc, #44]	@ (80048f8 <Button_Init+0x48>)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6013      	str	r3, [r2, #0]
	pGpioCtrlBtnPush = pGpioPush;
 80048d0:	4a0a      	ldr	r2, [pc, #40]	@ (80048fc <Button_Init+0x4c>)
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	6013      	str	r3, [r2, #0]
	uGpioPinUp = uPinUp;
 80048d6:	4a0a      	ldr	r2, [pc, #40]	@ (8004900 <Button_Init+0x50>)
 80048d8:	897b      	ldrh	r3, [r7, #10]
 80048da:	8013      	strh	r3, [r2, #0]
	uGpioPinDown = uPinDown;
 80048dc:	4a09      	ldr	r2, [pc, #36]	@ (8004904 <Button_Init+0x54>)
 80048de:	893b      	ldrh	r3, [r7, #8]
 80048e0:	8013      	strh	r3, [r2, #0]
	uGpioPinPush = uPinPush;
 80048e2:	4a09      	ldr	r2, [pc, #36]	@ (8004908 <Button_Init+0x58>)
 80048e4:	8bbb      	ldrh	r3, [r7, #28]
 80048e6:	8013      	strh	r3, [r2, #0]
}
 80048e8:	bf00      	nop
 80048ea:	3714      	adds	r7, #20
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bc80      	pop	{r7}
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	20000564 	.word	0x20000564
 80048f8:	20000568 	.word	0x20000568
 80048fc:	2000056c 	.word	0x2000056c
 8004900:	20000570 	.word	0x20000570
 8004904:	20000572 	.word	0x20000572
 8004908:	20000574 	.word	0x20000574

0800490c <Button_ExePush>:

void Button_ExePush (stButton *pstBtn) {
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
	pstBtn->value = HAL_GPIO_ReadPin(pGpioCtrlBtnPush, uGpioPinPush);
 8004914:	4b1d      	ldr	r3, [pc, #116]	@ (800498c <Button_ExePush+0x80>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a1d      	ldr	r2, [pc, #116]	@ (8004990 <Button_ExePush+0x84>)
 800491a:	8812      	ldrh	r2, [r2, #0]
 800491c:	4611      	mov	r1, r2
 800491e:	4618      	mov	r0, r3
 8004920:	f7fc fa4c 	bl	8000dbc <HAL_GPIO_ReadPin>
 8004924:	4603      	mov	r3, r0
 8004926:	461a      	mov	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	701a      	strb	r2, [r3, #0]
	if (pstBtn->value > pstBtn->lastvalue) {
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	781a      	ldrb	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	78db      	ldrb	r3, [r3, #3]
 8004934:	429a      	cmp	r2, r3
 8004936:	d903      	bls.n	8004940 <Button_ExePush+0x34>
		pstBtn->rising = 1;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	705a      	strb	r2, [r3, #1]
 800493e:	e01d      	b.n	800497c <Button_ExePush+0x70>
	}
	else if (pstBtn->value < pstBtn->lastvalue) {
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	781a      	ldrb	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	78db      	ldrb	r3, [r3, #3]
 8004948:	429a      	cmp	r2, r3
 800494a:	d203      	bcs.n	8004954 <Button_ExePush+0x48>
		pstBtn->falling = 1;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	709a      	strb	r2, [r3, #2]
 8004952:	e013      	b.n	800497c <Button_ExePush+0x70>
	}
	else if (pstBtn->value == pstBtn->lastvalue && (pstBtn->rising == 1 || pstBtn->falling == 1)) {
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	781a      	ldrb	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	78db      	ldrb	r3, [r3, #3]
 800495c:	429a      	cmp	r2, r3
 800495e:	d10d      	bne.n	800497c <Button_ExePush+0x70>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	785b      	ldrb	r3, [r3, #1]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d003      	beq.n	8004970 <Button_ExePush+0x64>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	789b      	ldrb	r3, [r3, #2]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d105      	bne.n	800497c <Button_ExePush+0x70>
		pstBtn->rising = 0;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	705a      	strb	r2, [r3, #1]
		pstBtn->falling = 0;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	709a      	strb	r2, [r3, #2]
	}
	pstBtn->lastvalue = pstBtn->value;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	781a      	ldrb	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	70da      	strb	r2, [r3, #3]
}
 8004984:	bf00      	nop
 8004986:	3708      	adds	r7, #8
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	2000056c 	.word	0x2000056c
 8004990:	20000574 	.word	0x20000574

08004994 <Button_ExeUp>:

void Button_ExeUp (stButton *pstBtn) {
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
	pstBtn->value = HAL_GPIO_ReadPin(pGpioCtrlBtnUp, uGpioPinUp);
 800499c:	4b1d      	ldr	r3, [pc, #116]	@ (8004a14 <Button_ExeUp+0x80>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a1d      	ldr	r2, [pc, #116]	@ (8004a18 <Button_ExeUp+0x84>)
 80049a2:	8812      	ldrh	r2, [r2, #0]
 80049a4:	4611      	mov	r1, r2
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fc fa08 	bl	8000dbc <HAL_GPIO_ReadPin>
 80049ac:	4603      	mov	r3, r0
 80049ae:	461a      	mov	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	701a      	strb	r2, [r3, #0]
	if (pstBtn->value > pstBtn->lastvalue) {
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	781a      	ldrb	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	78db      	ldrb	r3, [r3, #3]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d903      	bls.n	80049c8 <Button_ExeUp+0x34>
		pstBtn->rising = 1;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	705a      	strb	r2, [r3, #1]
 80049c6:	e01d      	b.n	8004a04 <Button_ExeUp+0x70>
	}
	else if (pstBtn->value < pstBtn->lastvalue) {
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	781a      	ldrb	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	78db      	ldrb	r3, [r3, #3]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d203      	bcs.n	80049dc <Button_ExeUp+0x48>
		pstBtn->falling = 1;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	709a      	strb	r2, [r3, #2]
 80049da:	e013      	b.n	8004a04 <Button_ExeUp+0x70>
	}
	else if (pstBtn->value == pstBtn->lastvalue && (pstBtn->rising == 1 || pstBtn->falling == 1)) {
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	781a      	ldrb	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	78db      	ldrb	r3, [r3, #3]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d10d      	bne.n	8004a04 <Button_ExeUp+0x70>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	785b      	ldrb	r3, [r3, #1]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d003      	beq.n	80049f8 <Button_ExeUp+0x64>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	789b      	ldrb	r3, [r3, #2]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d105      	bne.n	8004a04 <Button_ExeUp+0x70>
		pstBtn->rising = 0;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	705a      	strb	r2, [r3, #1]
		pstBtn->falling = 0;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	709a      	strb	r2, [r3, #2]
	}
	pstBtn->lastvalue = pstBtn->value;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	781a      	ldrb	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	70da      	strb	r2, [r3, #3]
}
 8004a0c:	bf00      	nop
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	20000564 	.word	0x20000564
 8004a18:	20000570 	.word	0x20000570

08004a1c <Button_ExeDown>:

void Button_ExeDown (stButton *pstBtn) {
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
	pstBtn->value = HAL_GPIO_ReadPin(pGpioCtrlBtnDown, uGpioPinDown);
 8004a24:	4b1d      	ldr	r3, [pc, #116]	@ (8004a9c <Button_ExeDown+0x80>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a1d      	ldr	r2, [pc, #116]	@ (8004aa0 <Button_ExeDown+0x84>)
 8004a2a:	8812      	ldrh	r2, [r2, #0]
 8004a2c:	4611      	mov	r1, r2
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7fc f9c4 	bl	8000dbc <HAL_GPIO_ReadPin>
 8004a34:	4603      	mov	r3, r0
 8004a36:	461a      	mov	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	701a      	strb	r2, [r3, #0]
	if (pstBtn->value > pstBtn->lastvalue) {
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	781a      	ldrb	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	78db      	ldrb	r3, [r3, #3]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d903      	bls.n	8004a50 <Button_ExeDown+0x34>
		pstBtn->rising = 1;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	705a      	strb	r2, [r3, #1]
 8004a4e:	e01d      	b.n	8004a8c <Button_ExeDown+0x70>
	}
	else if (pstBtn->value < pstBtn->lastvalue) {
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	781a      	ldrb	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	78db      	ldrb	r3, [r3, #3]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d203      	bcs.n	8004a64 <Button_ExeDown+0x48>
		pstBtn->falling = 1;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	709a      	strb	r2, [r3, #2]
 8004a62:	e013      	b.n	8004a8c <Button_ExeDown+0x70>
	}
	else if (pstBtn->value == pstBtn->lastvalue && (pstBtn->rising == 1 || pstBtn->falling == 1)) {
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	781a      	ldrb	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	78db      	ldrb	r3, [r3, #3]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d10d      	bne.n	8004a8c <Button_ExeDown+0x70>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	785b      	ldrb	r3, [r3, #1]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d003      	beq.n	8004a80 <Button_ExeDown+0x64>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	789b      	ldrb	r3, [r3, #2]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d105      	bne.n	8004a8c <Button_ExeDown+0x70>
		pstBtn->rising = 0;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	705a      	strb	r2, [r3, #1]
		pstBtn->falling = 0;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	709a      	strb	r2, [r3, #2]
	}
	pstBtn->lastvalue = pstBtn->value;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	781a      	ldrb	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	70da      	strb	r2, [r3, #3]
}
 8004a94:	bf00      	nop
 8004a96:	3708      	adds	r7, #8
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	20000568 	.word	0x20000568
 8004aa0:	20000572 	.word	0x20000572

08004aa4 <Led_Init>:

void Led_Bright2 (uint8_t on) {
	HAL_GPIO_WritePin(pGpioCtrlLed2, uGpioPin2, (GPIO_PinState)on);
}

void Led_Init (GPIO_TypeDef *pGpio1, uint16_t uPin1, GPIO_TypeDef *pGpio2, uint16_t uPin2) {
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	607a      	str	r2, [r7, #4]
 8004aae:	461a      	mov	r2, r3
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	817b      	strh	r3, [r7, #10]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	813b      	strh	r3, [r7, #8]
	pGpioCtrlLed1 = pGpio1;
 8004ab8:	4a08      	ldr	r2, [pc, #32]	@ (8004adc <Led_Init+0x38>)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6013      	str	r3, [r2, #0]
	pGpioCtrlLed2 = pGpio2;
 8004abe:	4a08      	ldr	r2, [pc, #32]	@ (8004ae0 <Led_Init+0x3c>)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6013      	str	r3, [r2, #0]
	uGpioPin1 = uPin1;
 8004ac4:	4a07      	ldr	r2, [pc, #28]	@ (8004ae4 <Led_Init+0x40>)
 8004ac6:	897b      	ldrh	r3, [r7, #10]
 8004ac8:	8013      	strh	r3, [r2, #0]
	uGpioPin2 = uPin2;
 8004aca:	4a07      	ldr	r2, [pc, #28]	@ (8004ae8 <Led_Init+0x44>)
 8004acc:	893b      	ldrh	r3, [r7, #8]
 8004ace:	8013      	strh	r3, [r2, #0]
}
 8004ad0:	bf00      	nop
 8004ad2:	3714      	adds	r7, #20
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bc80      	pop	{r7}
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	20000578 	.word	0x20000578
 8004ae0:	2000057c 	.word	0x2000057c
 8004ae4:	20000580 	.word	0x20000580
 8004ae8:	20000582 	.word	0x20000582

08004aec <Oled_Init>:

/* Global Variables ----------------------------------------------------------*/
I2C_HandleTypeDef *pI2cCtrlSh1106;

/* Private functions ---------------------------------------------------------*/
uint8_t Oled_Init(I2C_HandleTypeDef *pI2c) {
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
	pI2cCtrlSh1106 = pI2c;
 8004af4:	4a6c      	ldr	r2, [pc, #432]	@ (8004ca8 <Oled_Init+0x1bc>)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6013      	str	r3, [r2, #0]

	if (Oled_WriteCmd((DisplayOn|DISABLE), 0, 0, 0) != SUCCESS) {
 8004afa:	2300      	movs	r3, #0
 8004afc:	2200      	movs	r2, #0
 8004afe:	2100      	movs	r1, #0
 8004b00:	20ae      	movs	r0, #174	@ 0xae
 8004b02:	f000 f94f 	bl	8004da4 <Oled_WriteCmd>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d001      	beq.n	8004b10 <Oled_Init+0x24>
		return ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e0c6      	b.n	8004c9e <Oled_Init+0x1b2>
	};
	if (Oled_WriteCmd(MuxRatio, 1, 0x3F, 0) != SUCCESS) {
 8004b10:	2300      	movs	r3, #0
 8004b12:	223f      	movs	r2, #63	@ 0x3f
 8004b14:	2101      	movs	r1, #1
 8004b16:	20a8      	movs	r0, #168	@ 0xa8
 8004b18:	f000 f944 	bl	8004da4 <Oled_WriteCmd>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <Oled_Init+0x3a>
		return ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e0bb      	b.n	8004c9e <Oled_Init+0x1b2>
	};
	if (Oled_WriteCmd(DisplayOffset, 1, 0x00, 0) != SUCCESS) {
 8004b26:	2300      	movs	r3, #0
 8004b28:	2200      	movs	r2, #0
 8004b2a:	2101      	movs	r1, #1
 8004b2c:	20d3      	movs	r0, #211	@ 0xd3
 8004b2e:	f000 f939 	bl	8004da4 <Oled_WriteCmd>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d001      	beq.n	8004b3c <Oled_Init+0x50>
		return ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e0b0      	b.n	8004c9e <Oled_Init+0x1b2>
	};
	if (Oled_WriteCmd(DisplayStartLine, 0, 0, 0) != SUCCESS) {
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	2200      	movs	r2, #0
 8004b40:	2100      	movs	r1, #0
 8004b42:	2040      	movs	r0, #64	@ 0x40
 8004b44:	f000 f92e 	bl	8004da4 <Oled_WriteCmd>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <Oled_Init+0x66>
		return ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e0a5      	b.n	8004c9e <Oled_Init+0x1b2>
	};
	if (Oled_WriteCmd((SegmentRemap|ENABLE), 0, 0, 0) != SUCCESS) {
 8004b52:	2300      	movs	r3, #0
 8004b54:	2200      	movs	r2, #0
 8004b56:	2100      	movs	r1, #0
 8004b58:	20a1      	movs	r0, #161	@ 0xa1
 8004b5a:	f000 f923 	bl	8004da4 <Oled_WriteCmd>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d001      	beq.n	8004b68 <Oled_Init+0x7c>
		return ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e09a      	b.n	8004c9e <Oled_Init+0x1b2>
	};
	if (Oled_WriteCmd(COMOutScanDir630, 0, 0, 0) != SUCCESS) {
 8004b68:	2300      	movs	r3, #0
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	20c8      	movs	r0, #200	@ 0xc8
 8004b70:	f000 f918 	bl	8004da4 <Oled_WriteCmd>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <Oled_Init+0x92>
		return ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e08f      	b.n	8004c9e <Oled_Init+0x1b2>
	};
	if (Oled_WriteCmd(COMPinHWConf, 1, 0x12, 0) != SUCCESS) {
 8004b7e:	2300      	movs	r3, #0
 8004b80:	2212      	movs	r2, #18
 8004b82:	2101      	movs	r1, #1
 8004b84:	20da      	movs	r0, #218	@ 0xda
 8004b86:	f000 f90d 	bl	8004da4 <Oled_WriteCmd>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d001      	beq.n	8004b94 <Oled_Init+0xa8>
		return ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e084      	b.n	8004c9e <Oled_Init+0x1b2>
	};
	if (Oled_WriteCmd(DisplayOscFreq, 1, 0xF0, 0) != SUCCESS) {
 8004b94:	2300      	movs	r3, #0
 8004b96:	22f0      	movs	r2, #240	@ 0xf0
 8004b98:	2101      	movs	r1, #1
 8004b9a:	20d5      	movs	r0, #213	@ 0xd5
 8004b9c:	f000 f902 	bl	8004da4 <Oled_WriteCmd>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <Oled_Init+0xbe>
		return ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e079      	b.n	8004c9e <Oled_Init+0x1b2>
	};
	if (Oled_WriteCmd(Precharge, 1, 0x22, 0) != SUCCESS) {
 8004baa:	2300      	movs	r3, #0
 8004bac:	2222      	movs	r2, #34	@ 0x22
 8004bae:	2101      	movs	r1, #1
 8004bb0:	20d9      	movs	r0, #217	@ 0xd9
 8004bb2:	f000 f8f7 	bl	8004da4 <Oled_WriteCmd>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <Oled_Init+0xd4>
		return ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e06e      	b.n	8004c9e <Oled_Init+0x1b2>
	};
	if (Oled_WriteCmd(ChargePump, 1, 0x14, 0) != SUCCESS) {
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	2214      	movs	r2, #20
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	208d      	movs	r0, #141	@ 0x8d
 8004bc8:	f000 f8ec 	bl	8004da4 <Oled_WriteCmd>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <Oled_Init+0xea>
		return ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e063      	b.n	8004c9e <Oled_Init+0x1b2>
	};
	if (Oled_WriteCmd(SetVcomDetect, 1, 0x20, 0) != SUCCESS) {
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	2220      	movs	r2, #32
 8004bda:	2101      	movs	r1, #1
 8004bdc:	20db      	movs	r0, #219	@ 0xdb
 8004bde:	f000 f8e1 	bl	8004da4 <Oled_WriteCmd>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d001      	beq.n	8004bec <Oled_Init+0x100>
		return ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e058      	b.n	8004c9e <Oled_Init+0x1b2>
	};

	if (Oled_WriteCmd(Contrast, 1, 0xFF, 0) != SUCCESS) {
 8004bec:	2300      	movs	r3, #0
 8004bee:	22ff      	movs	r2, #255	@ 0xff
 8004bf0:	2101      	movs	r1, #1
 8004bf2:	2081      	movs	r0, #129	@ 0x81
 8004bf4:	f000 f8d6 	bl	8004da4 <Oled_WriteCmd>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <Oled_Init+0x116>
		return ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e04d      	b.n	8004c9e <Oled_Init+0x1b2>
	};
	if (Oled_WriteCmd((Inverse|DISABLE), 0, 0, 0) != SUCCESS) {
 8004c02:	2300      	movs	r3, #0
 8004c04:	2200      	movs	r2, #0
 8004c06:	2100      	movs	r1, #0
 8004c08:	20a6      	movs	r0, #166	@ 0xa6
 8004c0a:	f000 f8cb 	bl	8004da4 <Oled_WriteCmd>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <Oled_Init+0x12c>
		return ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e042      	b.n	8004c9e <Oled_Init+0x1b2>
	};
	if (Oled_WriteCmd(AddressMode, 1, 0x10, 0) != SUCCESS) {
 8004c18:	2300      	movs	r3, #0
 8004c1a:	2210      	movs	r2, #16
 8004c1c:	2101      	movs	r1, #1
 8004c1e:	2020      	movs	r0, #32
 8004c20:	f000 f8c0 	bl	8004da4 <Oled_WriteCmd>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <Oled_Init+0x142>
		return ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e037      	b.n	8004c9e <Oled_Init+0x1b2>
	};

	if (Oled_WriteCmd((PageStartAdd + 0), 0, 0, 0) != SUCCESS) {
 8004c2e:	2300      	movs	r3, #0
 8004c30:	2200      	movs	r2, #0
 8004c32:	2100      	movs	r1, #0
 8004c34:	20b0      	movs	r0, #176	@ 0xb0
 8004c36:	f000 f8b5 	bl	8004da4 <Oled_WriteCmd>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <Oled_Init+0x158>
		return ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e02c      	b.n	8004c9e <Oled_Init+0x1b2>
	};
	if (Oled_WriteCmd((LowColStartAdd + 0), 0, 0, 0) != SUCCESS) {
 8004c44:	2300      	movs	r3, #0
 8004c46:	2200      	movs	r2, #0
 8004c48:	2100      	movs	r1, #0
 8004c4a:	2000      	movs	r0, #0
 8004c4c:	f000 f8aa 	bl	8004da4 <Oled_WriteCmd>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d001      	beq.n	8004c5a <Oled_Init+0x16e>
		return ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e021      	b.n	8004c9e <Oled_Init+0x1b2>
	};
	if (Oled_WriteCmd((HighColStartAdd + 0), 1, 0x10, 0) != SUCCESS) {
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	2210      	movs	r2, #16
 8004c5e:	2101      	movs	r1, #1
 8004c60:	2010      	movs	r0, #16
 8004c62:	f000 f89f 	bl	8004da4 <Oled_WriteCmd>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d001      	beq.n	8004c70 <Oled_Init+0x184>
		return ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e016      	b.n	8004c9e <Oled_Init+0x1b2>
	};

	if (Oled_WriteCmd((DisplayOn|ENABLE), 0, 0, 0) != SUCCESS) {
 8004c70:	2300      	movs	r3, #0
 8004c72:	2200      	movs	r2, #0
 8004c74:	2100      	movs	r1, #0
 8004c76:	20af      	movs	r0, #175	@ 0xaf
 8004c78:	f000 f894 	bl	8004da4 <Oled_WriteCmd>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <Oled_Init+0x19a>
		return ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e00b      	b.n	8004c9e <Oled_Init+0x1b2>
	};
	if (Oled_WriteCmd((EntireDisplay|DISABLE), 0, 0, 0) != SUCCESS) {
 8004c86:	2300      	movs	r3, #0
 8004c88:	2200      	movs	r2, #0
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	20a4      	movs	r0, #164	@ 0xa4
 8004c8e:	f000 f889 	bl	8004da4 <Oled_WriteCmd>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d001      	beq.n	8004c9c <Oled_Init+0x1b0>
		return ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e000      	b.n	8004c9e <Oled_Init+0x1b2>
	}

	return SUCCESS;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3708      	adds	r7, #8
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	20000584 	.word	0x20000584

08004cac <Oled_Update>:
	};
	return SUCCESS;
}

uint8_t Oled_Update (uint8_t *uScreen, uint8_t uInverse)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b0a6      	sub	sp, #152	@ 0x98
 8004cb0:	af02      	add	r7, sp, #8
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	70fb      	strb	r3, [r7, #3]
	//OledWriteCmd(PageAddress, 2, 0, 7);
	//OledWriteCmd(ColumnAddress, 2, 0, 127);

	uint8_t i = 0;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	uint8_t j = 0;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
	uint16_t x = 0;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
	uint8_t _uStatus = 0;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
	uint8_t _uInverse = 0x00;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a

	if (uInverse == ENABLE)
 8004cd6:	78fb      	ldrb	r3, [r7, #3]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d102      	bne.n	8004ce2 <Oled_Update+0x36>
		_uInverse = 0xFF;
 8004cdc:	23ff      	movs	r3, #255	@ 0xff
 8004cde:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a

	for (j = 0; j<= 7; j++)
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 8004ce8:	e04d      	b.n	8004d86 <Oled_Update+0xda>
	{
		Oled_WriteCmd((PageStartAdd + j), 0, 0, 0 );
 8004cea:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8004cee:	3b50      	subs	r3, #80	@ 0x50
 8004cf0:	b2d8      	uxtb	r0, r3
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	f000 f854 	bl	8004da4 <Oled_WriteCmd>
		Oled_WriteCmd((LowColStartAdd + ((0+2)&0x0F)), 0,0,0);
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	2200      	movs	r2, #0
 8004d00:	2100      	movs	r1, #0
 8004d02:	2002      	movs	r0, #2
 8004d04:	f000 f84e 	bl	8004da4 <Oled_WriteCmd>
		Oled_WriteCmd((HighColStartAdd + ((0+2)>>4)), 0, 0 ,0);
 8004d08:	2300      	movs	r3, #0
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	2010      	movs	r0, #16
 8004d10:	f000 f848 	bl	8004da4 <Oled_WriteCmd>

		uint8_t _uBytes[129];
		_uBytes[0] = data;
 8004d14:	2340      	movs	r3, #64	@ 0x40
 8004d16:	723b      	strb	r3, [r7, #8]
		for (i = 1; i<= 128; i++)
 8004d18:	2301      	movs	r3, #1
 8004d1a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8004d1e:	e017      	b.n	8004d50 <Oled_Update+0xa4>
		{
			_uBytes[i] = ((uScreen[x++])^_uInverse);
 8004d20:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8004d24:	1c5a      	adds	r2, r3, #1
 8004d26:	f8a7 208c 	strh.w	r2, [r7, #140]	@ 0x8c
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4413      	add	r3, r2
 8004d30:	7819      	ldrb	r1, [r3, #0]
 8004d32:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8004d36:	f897 208a 	ldrb.w	r2, [r7, #138]	@ 0x8a
 8004d3a:	404a      	eors	r2, r1
 8004d3c:	b2d2      	uxtb	r2, r2
 8004d3e:	3390      	adds	r3, #144	@ 0x90
 8004d40:	443b      	add	r3, r7
 8004d42:	f803 2c88 	strb.w	r2, [r3, #-136]
		for (i = 1; i<= 128; i++)
 8004d46:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8004d50:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8004d54:	2b80      	cmp	r3, #128	@ 0x80
 8004d56:	d9e3      	bls.n	8004d20 <Oled_Update+0x74>
		}

		_uStatus = HAL_I2C_Master_Transmit(pI2cCtrlSh1106, SH1106_I2C_ADDR, _uBytes, 129, SH1106_TIMEOUT);
 8004d58:	4b11      	ldr	r3, [pc, #68]	@ (8004da0 <Oled_Update+0xf4>)
 8004d5a:	6818      	ldr	r0, [r3, #0]
 8004d5c:	f107 0208 	add.w	r2, r7, #8
 8004d60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004d64:	9300      	str	r3, [sp, #0]
 8004d66:	2381      	movs	r3, #129	@ 0x81
 8004d68:	2178      	movs	r1, #120	@ 0x78
 8004d6a:	f7fc f99b 	bl	80010a4 <HAL_I2C_Master_Transmit>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
		if (_uStatus != SUCCESS) {
 8004d74:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d109      	bne.n	8004d90 <Oled_Update+0xe4>
	for (j = 0; j<= 7; j++)
 8004d7c:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8004d80:	3301      	adds	r3, #1
 8004d82:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 8004d86:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8004d8a:	2b07      	cmp	r3, #7
 8004d8c:	d9ad      	bls.n	8004cea <Oled_Update+0x3e>
 8004d8e:	e000      	b.n	8004d92 <Oled_Update+0xe6>
			break;
 8004d90:	bf00      	nop
		}
	}
	return _uStatus;
 8004d92:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3790      	adds	r7, #144	@ 0x90
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	20000584 	.word	0x20000584

08004da4 <Oled_WriteCmd>:

uint8_t Oled_WriteCmd (uint8_t iCommand, uint8_t iNumberOfPara, uint8_t iPara1, uint8_t iPara2) {
 8004da4:	b590      	push	{r4, r7, lr}
 8004da6:	b087      	sub	sp, #28
 8004da8:	af02      	add	r7, sp, #8
 8004daa:	4604      	mov	r4, r0
 8004dac:	4608      	mov	r0, r1
 8004dae:	4611      	mov	r1, r2
 8004db0:	461a      	mov	r2, r3
 8004db2:	4623      	mov	r3, r4
 8004db4:	71fb      	strb	r3, [r7, #7]
 8004db6:	4603      	mov	r3, r0
 8004db8:	71bb      	strb	r3, [r7, #6]
 8004dba:	460b      	mov	r3, r1
 8004dbc:	717b      	strb	r3, [r7, #5]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	713b      	strb	r3, [r7, #4]
	uint8_t _uBytes[4] = {ctrl, iCommand, iPara1, iPara2};
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	723b      	strb	r3, [r7, #8]
 8004dc6:	79fb      	ldrb	r3, [r7, #7]
 8004dc8:	727b      	strb	r3, [r7, #9]
 8004dca:	797b      	ldrb	r3, [r7, #5]
 8004dcc:	72bb      	strb	r3, [r7, #10]
 8004dce:	793b      	ldrb	r3, [r7, #4]
 8004dd0:	72fb      	strb	r3, [r7, #11]
	uint8_t _uStatus = HAL_I2C_Master_Transmit(pI2cCtrlSh1106, SH1106_I2C_ADDR, _uBytes, iNumberOfPara + 2, SH1106_TIMEOUT);
 8004dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8004dfc <Oled_WriteCmd+0x58>)
 8004dd4:	6818      	ldr	r0, [r3, #0]
 8004dd6:	79bb      	ldrb	r3, [r7, #6]
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	3302      	adds	r3, #2
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	f107 0208 	add.w	r2, r7, #8
 8004de2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004de6:	9100      	str	r1, [sp, #0]
 8004de8:	2178      	movs	r1, #120	@ 0x78
 8004dea:	f7fc f95b 	bl	80010a4 <HAL_I2C_Master_Transmit>
 8004dee:	4603      	mov	r3, r0
 8004df0:	73fb      	strb	r3, [r7, #15]
	return _uStatus;
 8004df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3714      	adds	r7, #20
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd90      	pop	{r4, r7, pc}
 8004dfc:	20000584 	.word	0x20000584

08004e00 <Rtc_Init>:
		return 1;
	}
	return 0;
}

uint8_t Rtc_Init(I2C_HandleTypeDef *pI2c) {
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
	pI2cController = pI2c;
 8004e08:	4a04      	ldr	r2, [pc, #16]	@ (8004e1c <Rtc_Init+0x1c>)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6013      	str	r3, [r2, #0]
	return 0;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bc80      	pop	{r7}
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	20000588 	.word	0x20000588

08004e20 <memset>:
 8004e20:	4603      	mov	r3, r0
 8004e22:	4402      	add	r2, r0
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d100      	bne.n	8004e2a <memset+0xa>
 8004e28:	4770      	bx	lr
 8004e2a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e2e:	e7f9      	b.n	8004e24 <memset+0x4>

08004e30 <__libc_init_array>:
 8004e30:	b570      	push	{r4, r5, r6, lr}
 8004e32:	2600      	movs	r6, #0
 8004e34:	4d0c      	ldr	r5, [pc, #48]	@ (8004e68 <__libc_init_array+0x38>)
 8004e36:	4c0d      	ldr	r4, [pc, #52]	@ (8004e6c <__libc_init_array+0x3c>)
 8004e38:	1b64      	subs	r4, r4, r5
 8004e3a:	10a4      	asrs	r4, r4, #2
 8004e3c:	42a6      	cmp	r6, r4
 8004e3e:	d109      	bne.n	8004e54 <__libc_init_array+0x24>
 8004e40:	f000 f81a 	bl	8004e78 <_init>
 8004e44:	2600      	movs	r6, #0
 8004e46:	4d0a      	ldr	r5, [pc, #40]	@ (8004e70 <__libc_init_array+0x40>)
 8004e48:	4c0a      	ldr	r4, [pc, #40]	@ (8004e74 <__libc_init_array+0x44>)
 8004e4a:	1b64      	subs	r4, r4, r5
 8004e4c:	10a4      	asrs	r4, r4, #2
 8004e4e:	42a6      	cmp	r6, r4
 8004e50:	d105      	bne.n	8004e5e <__libc_init_array+0x2e>
 8004e52:	bd70      	pop	{r4, r5, r6, pc}
 8004e54:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e58:	4798      	blx	r3
 8004e5a:	3601      	adds	r6, #1
 8004e5c:	e7ee      	b.n	8004e3c <__libc_init_array+0xc>
 8004e5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e62:	4798      	blx	r3
 8004e64:	3601      	adds	r6, #1
 8004e66:	e7f2      	b.n	8004e4e <__libc_init_array+0x1e>
 8004e68:	080058ec 	.word	0x080058ec
 8004e6c:	080058ec 	.word	0x080058ec
 8004e70:	080058ec 	.word	0x080058ec
 8004e74:	080058f0 	.word	0x080058f0

08004e78 <_init>:
 8004e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e7a:	bf00      	nop
 8004e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e7e:	bc08      	pop	{r3}
 8004e80:	469e      	mov	lr, r3
 8004e82:	4770      	bx	lr

08004e84 <_fini>:
 8004e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e86:	bf00      	nop
 8004e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e8a:	bc08      	pop	{r3}
 8004e8c:	469e      	mov	lr, r3
 8004e8e:	4770      	bx	lr
